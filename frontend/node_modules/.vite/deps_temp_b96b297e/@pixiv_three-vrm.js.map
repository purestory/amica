{
  "version": 3,
  "sources": ["../../@pixiv/three-vrm-core/lib/three-vrm-core.module.js", "../../@pixiv/three-vrm/src/VRM.ts", "../../node_modules/tslib/tslib.es6.js", "../../@pixiv/three-vrm-materials-mtoon/lib/three-vrm-materials-mtoon.module.js", "../../@pixiv/three-vrm-materials-hdr-emissive-multiplier/lib/three-vrm-materials-hdr-emissive-multiplier.module.js", "../../@pixiv/three-vrm-materials-v0compat/lib/three-vrm-materials-v0compat.module.js", "../../@pixiv/three-vrm-node-constraint/lib/three-vrm-node-constraint.module.js", "../../@pixiv/three-vrm-springbone/lib/three-vrm-springbone.module.js", "../../@pixiv/three-vrm/src/VRMLoaderPlugin.ts", "../../@pixiv/three-vrm/src/VRMUtils/deepDispose.ts", "../../@pixiv/three-vrm/src/VRMUtils/removeUnnecessaryJoints.ts", "../../@pixiv/three-vrm/src/VRMUtils/removeUnnecessaryVertices.ts", "../../@pixiv/three-vrm/src/VRMUtils/rotateVRM0.ts", "../../@pixiv/three-vrm/src/VRMUtils/index.ts"],
  "sourcesContent": ["/*!\n * @pixiv/three-vrm-core v2.1.3\n * The implementation of core features of VRM, for @pixiv/three-vrm\n *\n * Copyright (c) 2020-2024 pixiv Inc.\n * @pixiv/three-vrm-core is distributed under MIT License\n * https://github.com/pixiv/three-vrm/blob/release/LICENSE\n */\nimport * as THREE from 'three';\n\n// animationMixer の監視対象は、Scene の中に入っている必要がある。\n// そのため、表示オブジェクトではないけれど、Object3D を継承して Scene に投入できるようにする。\nclass VRMExpression extends THREE.Object3D {\n    /**\n     * A value represents how much it should override blink expressions.\n     * `0.0` == no override at all, `1.0` == completely block the expressions.\n     */\n    get overrideBlinkAmount() {\n        if (this.overrideBlink === 'block') {\n            return 0.0 < this.weight ? 1.0 : 0.0;\n        }\n        else if (this.overrideBlink === 'blend') {\n            return this.weight;\n        }\n        else {\n            return 0.0;\n        }\n    }\n    /**\n     * A value represents how much it should override lookAt expressions.\n     * `0.0` == no override at all, `1.0` == completely block the expressions.\n     */\n    get overrideLookAtAmount() {\n        if (this.overrideLookAt === 'block') {\n            return 0.0 < this.weight ? 1.0 : 0.0;\n        }\n        else if (this.overrideLookAt === 'blend') {\n            return this.weight;\n        }\n        else {\n            return 0.0;\n        }\n    }\n    /**\n     * A value represents how much it should override mouth expressions.\n     * `0.0` == no override at all, `1.0` == completely block the expressions.\n     */\n    get overrideMouthAmount() {\n        if (this.overrideMouth === 'block') {\n            return 0.0 < this.weight ? 1.0 : 0.0;\n        }\n        else if (this.overrideMouth === 'blend') {\n            return this.weight;\n        }\n        else {\n            return 0.0;\n        }\n    }\n    constructor(expressionName) {\n        super();\n        /**\n         * The current weight of the expression.\n         */\n        this.weight = 0.0;\n        /**\n         * Interpret values greater than 0.5 as 1.0, ortherwise 0.0.\n         */\n        this.isBinary = false;\n        /**\n         * Specify how the expression overrides blink expressions.\n         */\n        this.overrideBlink = 'none';\n        /**\n         * Specify how the expression overrides lookAt expressions.\n         */\n        this.overrideLookAt = 'none';\n        /**\n         * Specify how the expression overrides mouth expressions.\n         */\n        this.overrideMouth = 'none';\n        this._binds = [];\n        this.name = `VRMExpression_${expressionName}`;\n        this.expressionName = expressionName;\n        // traverse 時の救済手段として Object3D ではないことを明示しておく\n        this.type = 'VRMExpression';\n        // 表示目的のオブジェクトではないので、負荷軽減のために visible を false にしておく。\n        // これにより、このインスタンスに対する毎フレームの matrix 自動計算を省略できる。\n        this.visible = false;\n    }\n    addBind(bind) {\n        this._binds.push(bind);\n    }\n    /**\n     * Apply weight to every assigned blend shapes.\n     * Should be called every frame.\n     */\n    applyWeight(options) {\n        var _a;\n        let actualWeight = this.isBinary ? (this.weight <= 0.5 ? 0.0 : 1.0) : this.weight;\n        actualWeight *= (_a = options === null || options === void 0 ? void 0 : options.multiplier) !== null && _a !== void 0 ? _a : 1.0;\n        this._binds.forEach((bind) => bind.applyWeight(actualWeight));\n    }\n    /**\n     * Clear previously assigned blend shapes.\n     */\n    clearAppliedWeight() {\n        this._binds.forEach((bind) => bind.clearAppliedWeight());\n    }\n}\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nfunction extractPrimitivesInternal(gltf, nodeIndex, node) {\n    var _a, _b;\n    const json = gltf.parser.json;\n    /**\n     * Let's list up every possible patterns that parsed gltf nodes with a mesh can have,,,\n     *\n     * \"*\" indicates that those meshes should be listed up using this function\n     *\n     * ### A node with a (mesh, a signle primitive)\n     *\n     * - `THREE.Mesh`: The only primitive of the mesh *\n     *\n     * ### A node with a (mesh, multiple primitives)\n     *\n     * - `THREE.Group`: The root of the mesh\n     *   - `THREE.Mesh`: A primitive of the mesh *\n     *   - `THREE.Mesh`: A primitive of the mesh (2) *\n     *\n     * ### A node with a (mesh, multiple primitives) AND (a child with a mesh, a single primitive)\n     *\n     * - `THREE.Group`: The root of the mesh\n     *   - `THREE.Mesh`: A primitive of the mesh *\n     *   - `THREE.Mesh`: A primitive of the mesh (2) *\n     *   - `THREE.Mesh`: A primitive of a MESH OF THE CHILD\n     *\n     * ### A node with a (mesh, multiple primitives) AND (a child with a mesh, multiple primitives)\n     *\n     * - `THREE.Group`: The root of the mesh\n     *   - `THREE.Mesh`: A primitive of the mesh *\n     *   - `THREE.Mesh`: A primitive of the mesh (2) *\n     *   - `THREE.Group`: The root of a MESH OF THE CHILD\n     *     - `THREE.Mesh`: A primitive of the mesh of the child\n     *     - `THREE.Mesh`: A primitive of the mesh of the child (2)\n     *\n     * ### A node with a (mesh, multiple primitives) BUT the node is a bone\n     *\n     * - `THREE.Bone`: The root of the node, as a bone\n     *   - `THREE.Group`: The root of the mesh\n     *     - `THREE.Mesh`: A primitive of the mesh *\n     *     - `THREE.Mesh`: A primitive of the mesh (2) *\n     *\n     * ### A node with a (mesh, multiple primitives) AND (a child with a mesh, multiple primitives) BUT the node is a bone\n     *\n     * - `THREE.Bone`: The root of the node, as a bone\n     *   - `THREE.Group`: The root of the mesh\n     *     - `THREE.Mesh`: A primitive of the mesh *\n     *     - `THREE.Mesh`: A primitive of the mesh (2) *\n     *   - `THREE.Group`: The root of a MESH OF THE CHILD\n     *     - `THREE.Mesh`: A primitive of the mesh of the child\n     *     - `THREE.Mesh`: A primitive of the mesh of the child (2)\n     *\n     * ...I will take a strategy that traverses the root of the node and take first (primitiveCount) meshes.\n     */\n    // Make sure that the node has a mesh\n    const schemaNode = (_a = json.nodes) === null || _a === void 0 ? void 0 : _a[nodeIndex];\n    if (schemaNode == null) {\n        console.warn(`extractPrimitivesInternal: Attempt to use nodes[${nodeIndex}] of glTF but the node doesn't exist`);\n        return null;\n    }\n    const meshIndex = schemaNode.mesh;\n    if (meshIndex == null) {\n        return null;\n    }\n    // How many primitives the mesh has?\n    const schemaMesh = (_b = json.meshes) === null || _b === void 0 ? void 0 : _b[meshIndex];\n    if (schemaMesh == null) {\n        console.warn(`extractPrimitivesInternal: Attempt to use meshes[${meshIndex}] of glTF but the mesh doesn't exist`);\n        return null;\n    }\n    const primitiveCount = schemaMesh.primitives.length;\n    // Traverse the node and take first (primitiveCount) meshes\n    const primitives = [];\n    node.traverse((object) => {\n        if (primitives.length < primitiveCount) {\n            if (object.isMesh) {\n                primitives.push(object);\n            }\n        }\n    });\n    return primitives;\n}\n/**\n * Extract primitives ( `THREE.Mesh[]` ) of a node from a loaded GLTF.\n * The main purpose of this function is to distinguish primitives and children from a node that has both meshes and children.\n *\n * It utilizes the behavior that GLTFLoader adds mesh primitives to the node object ( `THREE.Group` ) first then adds its children.\n *\n * @param gltf A GLTF object taken from GLTFLoader\n * @param nodeIndex The index of the node\n */\nfunction gltfExtractPrimitivesFromNode(gltf, nodeIndex) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const node = yield gltf.parser.getDependency('node', nodeIndex);\n        return extractPrimitivesInternal(gltf, nodeIndex, node);\n    });\n}\n/**\n * Extract primitives ( `THREE.Mesh[]` ) of nodes from a loaded GLTF.\n * See {@link gltfExtractPrimitivesFromNode} for more details.\n *\n * It returns a map from node index to extraction result.\n * If a node does not have a mesh, the entry for the node will not be put in the returning map.\n *\n * @param gltf A GLTF object taken from GLTFLoader\n */\nfunction gltfExtractPrimitivesFromNodes(gltf) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const nodes = yield gltf.parser.getDependencies('node');\n        const map = new Map();\n        nodes.forEach((node, index) => {\n            const result = extractPrimitivesInternal(gltf, index, node);\n            if (result != null) {\n                map.set(index, result);\n            }\n        });\n        return map;\n    });\n}\n\n/**\n * Get a material definition index of glTF from associated material.\n * It's basically a comat code between Three.js r133 or above and previous versions.\n * @param parser GLTFParser\n * @param material A material of gltf\n * @returns Material definition index of glTF\n */\nfunction gltfGetAssociatedMaterialIndex(parser, material) {\n    var _a, _b;\n    const threeRevision = parseInt(THREE.REVISION, 10);\n    let index = null;\n    if (threeRevision >= 133) {\n        index = (_b = (_a = parser.associations.get(material)) === null || _a === void 0 ? void 0 : _a.materials) !== null && _b !== void 0 ? _b : null;\n    }\n    else {\n        const associations = parser.associations;\n        const reference = associations.get(material);\n        if ((reference === null || reference === void 0 ? void 0 : reference.type) === 'materials') {\n            index = reference.index;\n        }\n    }\n    return index;\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\nconst VRMExpressionPresetName = {\n    Aa: 'aa',\n    Ih: 'ih',\n    Ou: 'ou',\n    Ee: 'ee',\n    Oh: 'oh',\n    Blink: 'blink',\n    Happy: 'happy',\n    Angry: 'angry',\n    Sad: 'sad',\n    Relaxed: 'relaxed',\n    LookUp: 'lookUp',\n    Surprised: 'surprised',\n    LookDown: 'lookDown',\n    LookLeft: 'lookLeft',\n    LookRight: 'lookRight',\n    BlinkLeft: 'blinkLeft',\n    BlinkRight: 'blinkRight',\n    Neutral: 'neutral',\n};\n\n/**\n * Clamp the input value within [0.0 - 1.0].\n *\n * @param value The input value\n */\nfunction saturate(value) {\n    return Math.max(Math.min(value, 1.0), 0.0);\n}\n\nclass VRMExpressionManager {\n    get expressions() {\n        return this._expressions.concat();\n    }\n    get expressionMap() {\n        return Object.assign({}, this._expressionMap);\n    }\n    /**\n     * A map from name to expression, but excluding custom expressions.\n     */\n    get presetExpressionMap() {\n        const result = {};\n        const presetNameSet = new Set(Object.values(VRMExpressionPresetName));\n        Object.entries(this._expressionMap).forEach(([name, expression]) => {\n            if (presetNameSet.has(name)) {\n                result[name] = expression;\n            }\n        });\n        return result;\n    }\n    /**\n     * A map from name to expression, but excluding preset expressions.\n     */\n    get customExpressionMap() {\n        const result = {};\n        const presetNameSet = new Set(Object.values(VRMExpressionPresetName));\n        Object.entries(this._expressionMap).forEach(([name, expression]) => {\n            if (!presetNameSet.has(name)) {\n                result[name] = expression;\n            }\n        });\n        return result;\n    }\n    /**\n     * Create a new {@link VRMExpressionManager}.\n     */\n    constructor() {\n        /**\n         * A set of name or preset name of expressions that will be overridden by {@link VRMExpression.overrideBlink}.\n         */\n        this.blinkExpressionNames = ['blink', 'blinkLeft', 'blinkRight'];\n        /**\n         * A set of name or preset name of expressions that will be overridden by {@link VRMExpression.overrideLookAt}.\n         */\n        this.lookAtExpressionNames = ['lookLeft', 'lookRight', 'lookUp', 'lookDown'];\n        /**\n         * A set of name or preset name of expressions that will be overridden by {@link VRMExpression.overrideMouth}.\n         */\n        this.mouthExpressionNames = ['aa', 'ee', 'ih', 'oh', 'ou'];\n        /**\n         * A set of {@link VRMExpression}.\n         * When you want to register expressions, use {@link registerExpression}\n         */\n        this._expressions = [];\n        /**\n         * A map from name to expression.\n         */\n        this._expressionMap = {};\n        // do nothing\n    }\n    /**\n     * Copy the given {@link VRMExpressionManager} into this one.\n     * @param source The {@link VRMExpressionManager} you want to copy\n     * @returns this\n     */\n    copy(source) {\n        // first unregister all the expression it has\n        const expressions = this._expressions.concat();\n        expressions.forEach((expression) => {\n            this.unregisterExpression(expression);\n        });\n        // then register all the expression of the source\n        source._expressions.forEach((expression) => {\n            this.registerExpression(expression);\n        });\n        // copy remaining members\n        this.blinkExpressionNames = source.blinkExpressionNames.concat();\n        this.lookAtExpressionNames = source.lookAtExpressionNames.concat();\n        this.mouthExpressionNames = source.mouthExpressionNames.concat();\n        return this;\n    }\n    /**\n     * Returns a clone of this {@link VRMExpressionManager}.\n     * @returns Copied {@link VRMExpressionManager}\n     */\n    clone() {\n        return new VRMExpressionManager().copy(this);\n    }\n    /**\n     * Return a registered expression.\n     * If it cannot find an expression, it will return `null` instead.\n     *\n     * @param name Name or preset name of the expression\n     */\n    getExpression(name) {\n        var _a;\n        return (_a = this._expressionMap[name]) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * Register an expression.\n     *\n     * @param expression {@link VRMExpression} that describes the expression\n     */\n    registerExpression(expression) {\n        this._expressions.push(expression);\n        this._expressionMap[expression.expressionName] = expression;\n    }\n    /**\n     * Unregister an expression.\n     *\n     * @param expression The expression you want to unregister\n     */\n    unregisterExpression(expression) {\n        const index = this._expressions.indexOf(expression);\n        if (index === -1) {\n            console.warn('VRMExpressionManager: The specified expressions is not registered');\n        }\n        this._expressions.splice(index, 1);\n        delete this._expressionMap[expression.expressionName];\n    }\n    /**\n     * Get the current weight of the specified expression.\n     * If it doesn't have an expression of given name, it will return `null` instead.\n     *\n     * @param name Name of the expression\n     */\n    getValue(name) {\n        var _a;\n        const expression = this.getExpression(name);\n        return (_a = expression === null || expression === void 0 ? void 0 : expression.weight) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * Set a weight to the specified expression.\n     *\n     * @param name Name of the expression\n     * @param weight Weight\n     */\n    setValue(name, weight) {\n        const expression = this.getExpression(name);\n        if (expression) {\n            expression.weight = saturate(weight);\n        }\n    }\n    /**\n     * Get a track name of specified expression.\n     * This track name is needed to manipulate its expression via keyframe animations.\n     *\n     * @example Manipulate an expression using keyframe animation\n     * ```js\n     * const trackName = vrm.expressionManager.getExpressionTrackName( 'blink' );\n     * const track = new THREE.NumberKeyframeTrack(\n     *   name,\n     *   [ 0.0, 0.5, 1.0 ], // times\n     *   [ 0.0, 1.0, 0.0 ] // values\n     * );\n     *\n     * const clip = new THREE.AnimationClip(\n     *   'blink', // name\n     *   1.0, // duration\n     *   [ track ] // tracks\n     * );\n     *\n     * const mixer = new THREE.AnimationMixer( vrm.scene );\n     * const action = mixer.clipAction( clip );\n     * action.play();\n     * ```\n     *\n     * @param name Name of the expression\n     */\n    getExpressionTrackName(name) {\n        const expression = this.getExpression(name);\n        return expression ? `${expression.name}.weight` : null;\n    }\n    /**\n     * Update every expressions.\n     */\n    update() {\n        // see how much we should override certain expressions\n        const weightMultipliers = this._calculateWeightMultipliers();\n        // reset expression binds first\n        this._expressions.forEach((expression) => {\n            expression.clearAppliedWeight();\n        });\n        // then apply binds\n        this._expressions.forEach((expression) => {\n            let multiplier = 1.0;\n            const name = expression.expressionName;\n            if (this.blinkExpressionNames.indexOf(name) !== -1) {\n                multiplier *= weightMultipliers.blink;\n            }\n            if (this.lookAtExpressionNames.indexOf(name) !== -1) {\n                multiplier *= weightMultipliers.lookAt;\n            }\n            if (this.mouthExpressionNames.indexOf(name) !== -1) {\n                multiplier *= weightMultipliers.mouth;\n            }\n            expression.applyWeight({ multiplier });\n        });\n    }\n    /**\n     * Calculate sum of override amounts to see how much we should multiply weights of certain expressions.\n     */\n    _calculateWeightMultipliers() {\n        let blink = 1.0;\n        let lookAt = 1.0;\n        let mouth = 1.0;\n        this._expressions.forEach((expression) => {\n            blink -= expression.overrideBlinkAmount;\n            lookAt -= expression.overrideLookAtAmount;\n            mouth -= expression.overrideMouthAmount;\n        });\n        blink = Math.max(0.0, blink);\n        lookAt = Math.max(0.0, lookAt);\n        mouth = Math.max(0.0, mouth);\n        return { blink, lookAt, mouth };\n    }\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\nconst VRMExpressionMaterialColorType = {\n    Color: 'color',\n    EmissionColor: 'emissionColor',\n    ShadeColor: 'shadeColor',\n    MatcapColor: 'matcapColor',\n    RimColor: 'rimColor',\n    OutlineColor: 'outlineColor',\n};\nconst v0ExpressionMaterialColorMap = {\n    _Color: VRMExpressionMaterialColorType.Color,\n    _EmissionColor: VRMExpressionMaterialColorType.EmissionColor,\n    _ShadeColor: VRMExpressionMaterialColorType.ShadeColor,\n    _RimColor: VRMExpressionMaterialColorType.RimColor,\n    _OutlineColor: VRMExpressionMaterialColorType.OutlineColor,\n};\n\nconst _color = new THREE.Color();\n/**\n * A bind of expression influences to a material color.\n */\nclass VRMExpressionMaterialColorBind {\n    constructor({ material, type, targetValue, targetAlpha, }) {\n        this.material = material;\n        this.type = type;\n        this.targetValue = targetValue;\n        this.targetAlpha = targetAlpha !== null && targetAlpha !== void 0 ? targetAlpha : 1.0;\n        // init bind state\n        const color = this._initColorBindState();\n        const alpha = this._initAlphaBindState();\n        this._state = { color, alpha };\n    }\n    applyWeight(weight) {\n        const { color, alpha } = this._state;\n        if (color != null) {\n            const { propertyName, deltaValue } = color;\n            const target = this.material[propertyName];\n            if (target != undefined) {\n                target.add(_color.copy(deltaValue).multiplyScalar(weight));\n            }\n        }\n        if (alpha != null) {\n            const { propertyName, deltaValue } = alpha;\n            const target = this.material[propertyName];\n            if (target != undefined) {\n                this.material[propertyName] += deltaValue * weight;\n            }\n        }\n    }\n    clearAppliedWeight() {\n        const { color, alpha } = this._state;\n        if (color != null) {\n            const { propertyName, initialValue } = color;\n            const target = this.material[propertyName];\n            if (target != undefined) {\n                target.copy(initialValue);\n            }\n        }\n        if (alpha != null) {\n            const { propertyName, initialValue } = alpha;\n            const target = this.material[propertyName];\n            if (target != undefined) {\n                this.material[propertyName] = initialValue;\n            }\n        }\n    }\n    _initColorBindState() {\n        var _a, _b, _c;\n        const { material, type, targetValue } = this;\n        const propertyNameMap = this._getPropertyNameMap();\n        const propertyName = (_b = (_a = propertyNameMap === null || propertyNameMap === void 0 ? void 0 : propertyNameMap[type]) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : null;\n        if (propertyName == null) {\n            console.warn(`Tried to add a material color bind to the material ${(_c = material.name) !== null && _c !== void 0 ? _c : '(no name)'}, the type ${type} but the material or the type is not supported.`);\n            return null;\n        }\n        const target = material[propertyName];\n        const initialValue = target.clone();\n        // 負の値を保持するためにColor.subを使わずに差分を計算する\n        const deltaValue = new THREE.Color(targetValue.r - initialValue.r, targetValue.g - initialValue.g, targetValue.b - initialValue.b);\n        return { propertyName, initialValue, deltaValue };\n    }\n    _initAlphaBindState() {\n        var _a, _b, _c;\n        const { material, type, targetAlpha } = this;\n        const propertyNameMap = this._getPropertyNameMap();\n        const propertyName = (_b = (_a = propertyNameMap === null || propertyNameMap === void 0 ? void 0 : propertyNameMap[type]) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : null;\n        if (propertyName == null && targetAlpha !== 1.0) {\n            console.warn(`Tried to add a material alpha bind to the material ${(_c = material.name) !== null && _c !== void 0 ? _c : '(no name)'}, the type ${type} but the material or the type does not support alpha.`);\n            return null;\n        }\n        if (propertyName == null) {\n            return null;\n        }\n        const initialValue = material[propertyName];\n        const deltaValue = targetAlpha - initialValue;\n        return { propertyName, initialValue, deltaValue };\n    }\n    _getPropertyNameMap() {\n        var _a, _b;\n        return ((_b = (_a = Object.entries(VRMExpressionMaterialColorBind._propertyNameMapMap).find(([distinguisher]) => {\n            return this.material[distinguisher] === true;\n        })) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : null);\n    }\n}\n/**\n * Mapping of property names from VRMC/materialColorBinds.type to three.js/Material.\n * The first element stands for color channels, the second element stands for the alpha channel.\n * The second element can be null if the target property doesn't exist.\n */\n// TODO: We might want to use the `satisfies` operator once we bump TS to 4.9 or higher\n// See: https://github.com/pixiv/three-vrm/pull/1323#discussion_r1374020035\nVRMExpressionMaterialColorBind._propertyNameMapMap = {\n    isMeshStandardMaterial: {\n        color: ['color', 'opacity'],\n        emissionColor: ['emissive', null],\n    },\n    isMeshBasicMaterial: {\n        color: ['color', 'opacity'],\n    },\n    isMToonMaterial: {\n        color: ['color', 'opacity'],\n        emissionColor: ['emissive', null],\n        outlineColor: ['outlineColorFactor', null],\n        matcapColor: ['matcapFactor', null],\n        rimColor: ['parametricRimColorFactor', null],\n        shadeColor: ['shadeColorFactor', null],\n    },\n};\n\n/**\n * A bind of {@link VRMExpression} influences to morph targets.\n */\nclass VRMExpressionMorphTargetBind {\n    constructor({ primitives, index, weight, }) {\n        this.primitives = primitives;\n        this.index = index;\n        this.weight = weight;\n    }\n    applyWeight(weight) {\n        this.primitives.forEach((mesh) => {\n            var _a;\n            if (((_a = mesh.morphTargetInfluences) === null || _a === void 0 ? void 0 : _a[this.index]) != null) {\n                mesh.morphTargetInfluences[this.index] += this.weight * weight;\n            }\n        });\n    }\n    clearAppliedWeight() {\n        this.primitives.forEach((mesh) => {\n            var _a;\n            if (((_a = mesh.morphTargetInfluences) === null || _a === void 0 ? void 0 : _a[this.index]) != null) {\n                mesh.morphTargetInfluences[this.index] = 0.0;\n            }\n        });\n    }\n}\n\nconst _v2 = new THREE.Vector2();\n/**\n * A bind of expression influences to texture transforms.\n */\nclass VRMExpressionTextureTransformBind {\n    constructor({ material, scale, offset, }) {\n        var _a, _b;\n        this.material = material;\n        this.scale = scale;\n        this.offset = offset;\n        const propertyNames = (_a = Object.entries(VRMExpressionTextureTransformBind._propertyNamesMap).find(([distinguisher]) => {\n            return material[distinguisher] === true;\n        })) === null || _a === void 0 ? void 0 : _a[1];\n        if (propertyNames == null) {\n            console.warn(`Tried to add a texture transform bind to the material ${(_b = material.name) !== null && _b !== void 0 ? _b : '(no name)'} but the material is not supported.`);\n            this._properties = [];\n        }\n        else {\n            this._properties = [];\n            propertyNames.forEach((propertyName) => {\n                var _a;\n                const texture = (_a = material[propertyName]) === null || _a === void 0 ? void 0 : _a.clone();\n                if (!texture) {\n                    return null;\n                }\n                material[propertyName] = texture; // because the texture is cloned\n                const initialOffset = texture.offset.clone();\n                const initialScale = texture.repeat.clone();\n                const deltaOffset = offset.clone().sub(initialOffset);\n                const deltaScale = scale.clone().sub(initialScale);\n                this._properties.push({\n                    name: propertyName,\n                    initialOffset,\n                    deltaOffset,\n                    initialScale,\n                    deltaScale,\n                });\n            });\n        }\n    }\n    applyWeight(weight) {\n        this._properties.forEach((property) => {\n            const target = this.material[property.name];\n            if (target === undefined) {\n                return;\n            } // TODO: we should kick this at `addMaterialValue`\n            target.offset.add(_v2.copy(property.deltaOffset).multiplyScalar(weight));\n            target.repeat.add(_v2.copy(property.deltaScale).multiplyScalar(weight));\n        });\n    }\n    clearAppliedWeight() {\n        this._properties.forEach((property) => {\n            const target = this.material[property.name];\n            if (target === undefined) {\n                return;\n            } // TODO: we should kick this at `addMaterialValue`\n            target.offset.copy(property.initialOffset);\n            target.repeat.copy(property.initialScale);\n        });\n    }\n}\nVRMExpressionTextureTransformBind._propertyNamesMap = {\n    isMeshStandardMaterial: [\n        'map',\n        'emissiveMap',\n        'bumpMap',\n        'normalMap',\n        'displacementMap',\n        'roughnessMap',\n        'metalnessMap',\n        'alphaMap',\n    ],\n    isMeshBasicMaterial: ['map', 'specularMap', 'alphaMap'],\n    isMToonMaterial: [\n        'map',\n        'normalMap',\n        'emissiveMap',\n        'shadeMultiplyTexture',\n        'rimMultiplyTexture',\n        'outlineWidthMultiplyTexture',\n        'uvAnimationMaskTexture',\n    ],\n};\n\n/**\n * Possible spec versions it recognizes.\n */\nconst POSSIBLE_SPEC_VERSIONS$4 = new Set(['1.0', '1.0-beta']);\n/**\n * A plugin of GLTFLoader that imports a {@link VRMExpressionManager} from a VRM extension of a GLTF.\n */\nclass VRMExpressionLoaderPlugin {\n    get name() {\n        // We should use the extension name instead but we have multiple plugins for an extension...\n        return 'VRMExpressionLoaderPlugin';\n    }\n    constructor(parser) {\n        this.parser = parser;\n    }\n    afterRoot(gltf) {\n        return __awaiter(this, void 0, void 0, function* () {\n            gltf.userData.vrmExpressionManager = yield this._import(gltf);\n        });\n    }\n    /**\n     * Import a {@link VRMExpressionManager} from a VRM.\n     *\n     * @param gltf A parsed result of GLTF taken from GLTFLoader\n     */\n    _import(gltf) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const v1Result = yield this._v1Import(gltf);\n            if (v1Result) {\n                return v1Result;\n            }\n            const v0Result = yield this._v0Import(gltf);\n            if (v0Result) {\n                return v0Result;\n            }\n            return null;\n        });\n    }\n    _v1Import(gltf) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const json = this.parser.json;\n            // early abort if it doesn't use vrm\n            const isVRMUsed = ((_a = json.extensionsUsed) === null || _a === void 0 ? void 0 : _a.indexOf('VRMC_vrm')) !== -1;\n            if (!isVRMUsed) {\n                return null;\n            }\n            const extension = (_b = json.extensions) === null || _b === void 0 ? void 0 : _b['VRMC_vrm'];\n            if (!extension) {\n                return null;\n            }\n            const specVersion = extension.specVersion;\n            if (!POSSIBLE_SPEC_VERSIONS$4.has(specVersion)) {\n                console.warn(`VRMExpressionLoaderPlugin: Unknown VRMC_vrm specVersion \"${specVersion}\"`);\n                return null;\n            }\n            const schemaExpressions = extension.expressions;\n            if (!schemaExpressions) {\n                return null;\n            }\n            // list expressions\n            const presetNameSet = new Set(Object.values(VRMExpressionPresetName));\n            const nameSchemaExpressionMap = new Map();\n            if (schemaExpressions.preset != null) {\n                Object.entries(schemaExpressions.preset).forEach(([name, schemaExpression]) => {\n                    if (schemaExpression == null) {\n                        return;\n                    } // typescript\n                    if (!presetNameSet.has(name)) {\n                        console.warn(`VRMExpressionLoaderPlugin: Unknown preset name \"${name}\" detected. Ignoring the expression`);\n                        return;\n                    }\n                    nameSchemaExpressionMap.set(name, schemaExpression);\n                });\n            }\n            if (schemaExpressions.custom != null) {\n                Object.entries(schemaExpressions.custom).forEach(([name, schemaExpression]) => {\n                    if (presetNameSet.has(name)) {\n                        console.warn(`VRMExpressionLoaderPlugin: Custom expression cannot have preset name \"${name}\". Ignoring the expression`);\n                        return;\n                    }\n                    nameSchemaExpressionMap.set(name, schemaExpression);\n                });\n            }\n            // prepare manager\n            const manager = new VRMExpressionManager();\n            // load expressions\n            yield Promise.all(Array.from(nameSchemaExpressionMap.entries()).map(([name, schemaExpression]) => __awaiter(this, void 0, void 0, function* () {\n                var _c, _d, _e, _f, _g, _h, _j;\n                const expression = new VRMExpression(name);\n                gltf.scene.add(expression);\n                expression.isBinary = (_c = schemaExpression.isBinary) !== null && _c !== void 0 ? _c : false;\n                expression.overrideBlink = (_d = schemaExpression.overrideBlink) !== null && _d !== void 0 ? _d : 'none';\n                expression.overrideLookAt = (_e = schemaExpression.overrideLookAt) !== null && _e !== void 0 ? _e : 'none';\n                expression.overrideMouth = (_f = schemaExpression.overrideMouth) !== null && _f !== void 0 ? _f : 'none';\n                (_g = schemaExpression.morphTargetBinds) === null || _g === void 0 ? void 0 : _g.forEach((bind) => __awaiter(this, void 0, void 0, function* () {\n                    var _k;\n                    if (bind.node === undefined || bind.index === undefined) {\n                        return;\n                    }\n                    const primitives = (yield gltfExtractPrimitivesFromNode(gltf, bind.node));\n                    const morphTargetIndex = bind.index;\n                    // check if the mesh has the target morph target\n                    if (!primitives.every((primitive) => Array.isArray(primitive.morphTargetInfluences) &&\n                        morphTargetIndex < primitive.morphTargetInfluences.length)) {\n                        console.warn(`VRMExpressionLoaderPlugin: ${schemaExpression.name} attempts to index morph #${morphTargetIndex} but not found.`);\n                        return;\n                    }\n                    expression.addBind(new VRMExpressionMorphTargetBind({\n                        primitives,\n                        index: morphTargetIndex,\n                        weight: (_k = bind.weight) !== null && _k !== void 0 ? _k : 1.0,\n                    }));\n                }));\n                if (schemaExpression.materialColorBinds || schemaExpression.textureTransformBinds) {\n                    // list up every material in `gltf.scene`\n                    const gltfMaterials = [];\n                    gltf.scene.traverse((object) => {\n                        const material = object.material;\n                        if (material) {\n                            gltfMaterials.push(material);\n                        }\n                    });\n                    (_h = schemaExpression.materialColorBinds) === null || _h === void 0 ? void 0 : _h.forEach((bind) => __awaiter(this, void 0, void 0, function* () {\n                        const materials = gltfMaterials.filter((material) => {\n                            const materialIndex = gltfGetAssociatedMaterialIndex(this.parser, material);\n                            return bind.material === materialIndex;\n                        });\n                        materials.forEach((material) => {\n                            expression.addBind(new VRMExpressionMaterialColorBind({\n                                material,\n                                type: bind.type,\n                                targetValue: new THREE.Color().fromArray(bind.targetValue),\n                                targetAlpha: bind.targetValue[3],\n                            }));\n                        });\n                    }));\n                    (_j = schemaExpression.textureTransformBinds) === null || _j === void 0 ? void 0 : _j.forEach((bind) => __awaiter(this, void 0, void 0, function* () {\n                        const materials = gltfMaterials.filter((material) => {\n                            const materialIndex = gltfGetAssociatedMaterialIndex(this.parser, material);\n                            return bind.material === materialIndex;\n                        });\n                        materials.forEach((material) => {\n                            var _a, _b;\n                            expression.addBind(new VRMExpressionTextureTransformBind({\n                                material,\n                                offset: new THREE.Vector2().fromArray((_a = bind.offset) !== null && _a !== void 0 ? _a : [0.0, 0.0]),\n                                scale: new THREE.Vector2().fromArray((_b = bind.scale) !== null && _b !== void 0 ? _b : [1.0, 1.0]),\n                            }));\n                        });\n                    }));\n                }\n                manager.registerExpression(expression);\n            })));\n            return manager;\n        });\n    }\n    _v0Import(gltf) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const json = this.parser.json;\n            // early abort if it doesn't use vrm\n            const vrmExt = (_a = json.extensions) === null || _a === void 0 ? void 0 : _a.VRM;\n            if (!vrmExt) {\n                return null;\n            }\n            const schemaBlendShape = vrmExt.blendShapeMaster;\n            if (!schemaBlendShape) {\n                return null;\n            }\n            const manager = new VRMExpressionManager();\n            const schemaBlendShapeGroups = schemaBlendShape.blendShapeGroups;\n            if (!schemaBlendShapeGroups) {\n                return manager;\n            }\n            const blendShapeNameSet = new Set();\n            yield Promise.all(schemaBlendShapeGroups.map((schemaGroup) => __awaiter(this, void 0, void 0, function* () {\n                var _b;\n                const v0PresetName = schemaGroup.presetName;\n                const v1PresetName = (v0PresetName != null && VRMExpressionLoaderPlugin.v0v1PresetNameMap[v0PresetName]) || null;\n                const name = v1PresetName !== null && v1PresetName !== void 0 ? v1PresetName : schemaGroup.name;\n                if (name == null) {\n                    console.warn('VRMExpressionLoaderPlugin: One of custom expressions has no name. Ignoring the expression');\n                    return;\n                }\n                // duplication check\n                if (blendShapeNameSet.has(name)) {\n                    console.warn(`VRMExpressionLoaderPlugin: An expression preset ${v0PresetName} has duplicated entries. Ignoring the expression`);\n                    return;\n                }\n                blendShapeNameSet.add(name);\n                const expression = new VRMExpression(name);\n                gltf.scene.add(expression);\n                expression.isBinary = (_b = schemaGroup.isBinary) !== null && _b !== void 0 ? _b : false;\n                // v0 doesn't have ignore properties\n                // Bind morphTarget\n                if (schemaGroup.binds) {\n                    schemaGroup.binds.forEach((bind) => __awaiter(this, void 0, void 0, function* () {\n                        var _c;\n                        if (bind.mesh === undefined || bind.index === undefined) {\n                            return;\n                        }\n                        const nodesUsingMesh = [];\n                        (_c = json.nodes) === null || _c === void 0 ? void 0 : _c.forEach((node, i) => {\n                            if (node.mesh === bind.mesh) {\n                                nodesUsingMesh.push(i);\n                            }\n                        });\n                        const morphTargetIndex = bind.index;\n                        yield Promise.all(nodesUsingMesh.map((nodeIndex) => __awaiter(this, void 0, void 0, function* () {\n                            var _d;\n                            const primitives = (yield gltfExtractPrimitivesFromNode(gltf, nodeIndex));\n                            // check if the mesh has the target morph target\n                            if (!primitives.every((primitive) => Array.isArray(primitive.morphTargetInfluences) &&\n                                morphTargetIndex < primitive.morphTargetInfluences.length)) {\n                                console.warn(`VRMExpressionLoaderPlugin: ${schemaGroup.name} attempts to index ${morphTargetIndex}th morph but not found.`);\n                                return;\n                            }\n                            expression.addBind(new VRMExpressionMorphTargetBind({\n                                primitives,\n                                index: morphTargetIndex,\n                                weight: 0.01 * ((_d = bind.weight) !== null && _d !== void 0 ? _d : 100), // narrowing the range from [ 0.0 - 100.0 ] to [ 0.0 - 1.0 ]\n                            }));\n                        })));\n                    }));\n                }\n                // Bind MaterialColor and TextureTransform\n                const materialValues = schemaGroup.materialValues;\n                if (materialValues && materialValues.length !== 0) {\n                    materialValues.forEach((materialValue) => {\n                        if (materialValue.materialName === undefined ||\n                            materialValue.propertyName === undefined ||\n                            materialValue.targetValue === undefined) {\n                            return;\n                        }\n                        /**\n                         * アバターのオブジェクトに設定されているマテリアルの内から\n                         * materialValueで指定されているマテリアルを集める。\n                         *\n                         * 特定には名前を使用する。\n                         * アウトライン描画用のマテリアルも同時に集める。\n                         */\n                        const materials = [];\n                        gltf.scene.traverse((object) => {\n                            if (object.material) {\n                                const material = object.material;\n                                if (Array.isArray(material)) {\n                                    materials.push(...material.filter((mtl) => (mtl.name === materialValue.materialName ||\n                                        mtl.name === materialValue.materialName + ' (Outline)') &&\n                                        materials.indexOf(mtl) === -1));\n                                }\n                                else if (material.name === materialValue.materialName && materials.indexOf(material) === -1) {\n                                    materials.push(material);\n                                }\n                            }\n                        });\n                        const materialPropertyName = materialValue.propertyName;\n                        materials.forEach((material) => {\n                            // TextureTransformBind\n                            if (materialPropertyName === '_MainTex_ST') {\n                                const scale = new THREE.Vector2(materialValue.targetValue[0], materialValue.targetValue[1]);\n                                const offset = new THREE.Vector2(materialValue.targetValue[2], materialValue.targetValue[3]);\n                                offset.y = 1.0 - offset.y - scale.y;\n                                expression.addBind(new VRMExpressionTextureTransformBind({\n                                    material,\n                                    scale,\n                                    offset,\n                                }));\n                                return;\n                            }\n                            // MaterialColorBind\n                            const materialColorType = v0ExpressionMaterialColorMap[materialPropertyName];\n                            if (materialColorType) {\n                                expression.addBind(new VRMExpressionMaterialColorBind({\n                                    material,\n                                    type: materialColorType,\n                                    targetValue: new THREE.Color().fromArray(materialValue.targetValue),\n                                    targetAlpha: materialValue.targetValue[3],\n                                }));\n                                return;\n                            }\n                            console.warn(materialPropertyName + ' is not supported');\n                        });\n                    });\n                }\n                manager.registerExpression(expression);\n            })));\n            return manager;\n        });\n    }\n}\nVRMExpressionLoaderPlugin.v0v1PresetNameMap = {\n    a: 'aa',\n    e: 'ee',\n    i: 'ih',\n    o: 'oh',\n    u: 'ou',\n    blink: 'blink',\n    joy: 'happy',\n    angry: 'angry',\n    sorrow: 'sad',\n    fun: 'relaxed',\n    lookup: 'lookUp',\n    lookdown: 'lookDown',\n    lookleft: 'lookLeft',\n    lookright: 'lookRight',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    blink_l: 'blinkLeft',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    blink_r: 'blinkRight',\n    neutral: 'neutral',\n};\n\n/* eslint-disable @typescript-eslint/naming-convention */\nconst VRMExpressionOverrideType = {\n    None: 'none',\n    Block: 'block',\n    Blend: 'blend',\n};\n\nclass VRMFirstPerson {\n    /**\n     * Create a new VRMFirstPerson object.\n     *\n     * @param humanoid A {@link VRMHumanoid}\n     * @param meshAnnotations A renderer settings. See the description of [[RendererFirstPersonFlags]] for more info\n     */\n    constructor(humanoid, meshAnnotations) {\n        this._firstPersonOnlyLayer = VRMFirstPerson.DEFAULT_FIRSTPERSON_ONLY_LAYER;\n        this._thirdPersonOnlyLayer = VRMFirstPerson.DEFAULT_THIRDPERSON_ONLY_LAYER;\n        this._initializedLayers = false;\n        this.humanoid = humanoid;\n        this.meshAnnotations = meshAnnotations;\n    }\n    /**\n     * Copy the given {@link VRMFirstPerson} into this one.\n     * {@link humanoid} must be same as the source one.\n     * @param source The {@link VRMFirstPerson} you want to copy\n     * @returns this\n     */\n    copy(source) {\n        if (this.humanoid !== source.humanoid) {\n            throw new Error('VRMFirstPerson: humanoid must be same in order to copy');\n        }\n        this.meshAnnotations = source.meshAnnotations.map((annotation) => ({\n            meshes: annotation.meshes.concat(),\n            type: annotation.type,\n        }));\n        return this;\n    }\n    /**\n     * Returns a clone of this {@link VRMFirstPerson}.\n     * @returns Copied {@link VRMFirstPerson}\n     */\n    clone() {\n        return new VRMFirstPerson(this.humanoid, this.meshAnnotations).copy(this);\n    }\n    /**\n     * A camera layer represents `FirstPersonOnly` layer.\n     * Note that **you must call {@link setup} first before you use the layer feature** or it does not work properly.\n     *\n     * The value is {@link DEFAULT_FIRSTPERSON_ONLY_LAYER} by default but you can change the layer by specifying via {@link setup} if you prefer.\n     *\n     * @see https://vrm.dev/en/univrm/api/univrm_use_firstperson/\n     * @see https://threejs.org/docs/#api/en/core/Layers\n     */\n    get firstPersonOnlyLayer() {\n        return this._firstPersonOnlyLayer;\n    }\n    /**\n     * A camera layer represents `ThirdPersonOnly` layer.\n     * Note that **you must call {@link setup} first before you use the layer feature** or it does not work properly.\n     *\n     * The value is {@link DEFAULT_THIRDPERSON_ONLY_LAYER} by default but you can change the layer by specifying via {@link setup} if you prefer.\n     *\n     * @see https://vrm.dev/en/univrm/api/univrm_use_firstperson/\n     * @see https://threejs.org/docs/#api/en/core/Layers\n     */\n    get thirdPersonOnlyLayer() {\n        return this._thirdPersonOnlyLayer;\n    }\n    /**\n     * In this method, it assigns layers for every meshes based on mesh annotations.\n     * You must call this method first before you use the layer feature.\n     *\n     * This is an equivalent of [VRMFirstPerson.Setup](https://github.com/vrm-c/UniVRM/blob/73a5bd8fcddaa2a7a8735099a97e63c9db3e5ea0/Assets/VRM/Runtime/FirstPerson/VRMFirstPerson.cs#L295-L299) of the UniVRM.\n     *\n     * The `cameraLayer` parameter specifies which layer will be assigned for `FirstPersonOnly` / `ThirdPersonOnly`.\n     * In UniVRM, we specified those by naming each desired layer as `FIRSTPERSON_ONLY_LAYER` / `THIRDPERSON_ONLY_LAYER`\n     * but we are going to specify these layers at here since we are unable to name layers in Three.js.\n     *\n     * @param cameraLayer Specify which layer will be for `FirstPersonOnly` / `ThirdPersonOnly`.\n     */\n    setup({ firstPersonOnlyLayer = VRMFirstPerson.DEFAULT_FIRSTPERSON_ONLY_LAYER, thirdPersonOnlyLayer = VRMFirstPerson.DEFAULT_THIRDPERSON_ONLY_LAYER, } = {}) {\n        if (this._initializedLayers) {\n            return;\n        }\n        this._firstPersonOnlyLayer = firstPersonOnlyLayer;\n        this._thirdPersonOnlyLayer = thirdPersonOnlyLayer;\n        this.meshAnnotations.forEach((item) => {\n            item.meshes.forEach((mesh) => {\n                if (item.type === 'firstPersonOnly') {\n                    mesh.layers.set(this._firstPersonOnlyLayer);\n                    mesh.traverse((child) => child.layers.set(this._firstPersonOnlyLayer));\n                }\n                else if (item.type === 'thirdPersonOnly') {\n                    mesh.layers.set(this._thirdPersonOnlyLayer);\n                    mesh.traverse((child) => child.layers.set(this._thirdPersonOnlyLayer));\n                }\n                else if (item.type === 'auto') {\n                    this._createHeadlessModel(mesh);\n                }\n            });\n        });\n        this._initializedLayers = true;\n    }\n    _excludeTriangles(triangles, bws, skinIndex, exclude) {\n        let count = 0;\n        if (bws != null && bws.length > 0) {\n            for (let i = 0; i < triangles.length; i += 3) {\n                const a = triangles[i];\n                const b = triangles[i + 1];\n                const c = triangles[i + 2];\n                const bw0 = bws[a];\n                const skin0 = skinIndex[a];\n                if (bw0[0] > 0 && exclude.includes(skin0[0]))\n                    continue;\n                if (bw0[1] > 0 && exclude.includes(skin0[1]))\n                    continue;\n                if (bw0[2] > 0 && exclude.includes(skin0[2]))\n                    continue;\n                if (bw0[3] > 0 && exclude.includes(skin0[3]))\n                    continue;\n                const bw1 = bws[b];\n                const skin1 = skinIndex[b];\n                if (bw1[0] > 0 && exclude.includes(skin1[0]))\n                    continue;\n                if (bw1[1] > 0 && exclude.includes(skin1[1]))\n                    continue;\n                if (bw1[2] > 0 && exclude.includes(skin1[2]))\n                    continue;\n                if (bw1[3] > 0 && exclude.includes(skin1[3]))\n                    continue;\n                const bw2 = bws[c];\n                const skin2 = skinIndex[c];\n                if (bw2[0] > 0 && exclude.includes(skin2[0]))\n                    continue;\n                if (bw2[1] > 0 && exclude.includes(skin2[1]))\n                    continue;\n                if (bw2[2] > 0 && exclude.includes(skin2[2]))\n                    continue;\n                if (bw2[3] > 0 && exclude.includes(skin2[3]))\n                    continue;\n                triangles[count++] = a;\n                triangles[count++] = b;\n                triangles[count++] = c;\n            }\n        }\n        return count;\n    }\n    _createErasedMesh(src, erasingBonesIndex) {\n        const dst = new THREE.SkinnedMesh(src.geometry.clone(), src.material);\n        dst.name = `${src.name}(erase)`;\n        dst.frustumCulled = src.frustumCulled;\n        dst.layers.set(this._firstPersonOnlyLayer);\n        const geometry = dst.geometry;\n        const skinIndexAttr = geometry.getAttribute('skinIndex');\n        const skinIndexAttrArray = skinIndexAttr instanceof THREE.GLBufferAttribute ? [] : skinIndexAttr.array;\n        const skinIndex = [];\n        for (let i = 0; i < skinIndexAttrArray.length; i += 4) {\n            skinIndex.push([\n                skinIndexAttrArray[i],\n                skinIndexAttrArray[i + 1],\n                skinIndexAttrArray[i + 2],\n                skinIndexAttrArray[i + 3],\n            ]);\n        }\n        const skinWeightAttr = geometry.getAttribute('skinWeight');\n        const skinWeightAttrArray = skinWeightAttr instanceof THREE.GLBufferAttribute ? [] : skinWeightAttr.array;\n        const skinWeight = [];\n        for (let i = 0; i < skinWeightAttrArray.length; i += 4) {\n            skinWeight.push([\n                skinWeightAttrArray[i],\n                skinWeightAttrArray[i + 1],\n                skinWeightAttrArray[i + 2],\n                skinWeightAttrArray[i + 3],\n            ]);\n        }\n        const index = geometry.getIndex();\n        if (!index) {\n            throw new Error(\"The geometry doesn't have an index buffer\");\n        }\n        const oldTriangles = Array.from(index.array);\n        const count = this._excludeTriangles(oldTriangles, skinWeight, skinIndex, erasingBonesIndex);\n        const newTriangle = [];\n        for (let i = 0; i < count; i++) {\n            newTriangle[i] = oldTriangles[i];\n        }\n        geometry.setIndex(newTriangle);\n        // mtoon material includes onBeforeRender. this is unsupported at SkinnedMesh#clone\n        if (src.onBeforeRender) {\n            dst.onBeforeRender = src.onBeforeRender;\n        }\n        dst.bind(new THREE.Skeleton(src.skeleton.bones, src.skeleton.boneInverses), new THREE.Matrix4());\n        return dst;\n    }\n    _createHeadlessModelForSkinnedMesh(parent, mesh) {\n        const eraseBoneIndexes = [];\n        mesh.skeleton.bones.forEach((bone, index) => {\n            if (this._isEraseTarget(bone))\n                eraseBoneIndexes.push(index);\n        });\n        // Unlike UniVRM we don't copy mesh if no invisible bone was found\n        if (!eraseBoneIndexes.length) {\n            mesh.layers.enable(this._thirdPersonOnlyLayer);\n            mesh.layers.enable(this._firstPersonOnlyLayer);\n            return;\n        }\n        mesh.layers.set(this._thirdPersonOnlyLayer);\n        const newMesh = this._createErasedMesh(mesh, eraseBoneIndexes);\n        parent.add(newMesh);\n    }\n    _createHeadlessModel(node) {\n        if (node.type === 'Group') {\n            node.layers.set(this._thirdPersonOnlyLayer);\n            if (this._isEraseTarget(node)) {\n                node.traverse((child) => child.layers.set(this._thirdPersonOnlyLayer));\n            }\n            else {\n                const parent = new THREE.Group();\n                parent.name = `_headless_${node.name}`;\n                parent.layers.set(this._firstPersonOnlyLayer);\n                node.parent.add(parent);\n                node.children\n                    .filter((child) => child.type === 'SkinnedMesh')\n                    .forEach((child) => {\n                    const skinnedMesh = child;\n                    this._createHeadlessModelForSkinnedMesh(parent, skinnedMesh);\n                });\n            }\n        }\n        else if (node.type === 'SkinnedMesh') {\n            const skinnedMesh = node;\n            this._createHeadlessModelForSkinnedMesh(node.parent, skinnedMesh);\n        }\n        else {\n            if (this._isEraseTarget(node)) {\n                node.layers.set(this._thirdPersonOnlyLayer);\n                node.traverse((child) => child.layers.set(this._thirdPersonOnlyLayer));\n            }\n        }\n    }\n    _isEraseTarget(bone) {\n        if (bone === this.humanoid.getRawBoneNode('head')) {\n            return true;\n        }\n        else if (!bone.parent) {\n            return false;\n        }\n        else {\n            return this._isEraseTarget(bone.parent);\n        }\n    }\n}\n/**\n * A default camera layer for `FirstPersonOnly` layer.\n *\n * @see [[getFirstPersonOnlyLayer]]\n */\nVRMFirstPerson.DEFAULT_FIRSTPERSON_ONLY_LAYER = 9;\n/**\n * A default camera layer for `ThirdPersonOnly` layer.\n *\n * @see [[getThirdPersonOnlyLayer]]\n */\nVRMFirstPerson.DEFAULT_THIRDPERSON_ONLY_LAYER = 10;\n\n/**\n * Possible spec versions it recognizes.\n */\nconst POSSIBLE_SPEC_VERSIONS$3 = new Set(['1.0', '1.0-beta']);\n/**\n * A plugin of GLTFLoader that imports a {@link VRMFirstPerson} from a VRM extension of a GLTF.\n */\nclass VRMFirstPersonLoaderPlugin {\n    get name() {\n        // We should use the extension name instead but we have multiple plugins for an extension...\n        return 'VRMFirstPersonLoaderPlugin';\n    }\n    constructor(parser) {\n        this.parser = parser;\n    }\n    afterRoot(gltf) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const vrmHumanoid = gltf.userData.vrmHumanoid;\n            // explicitly distinguish null and undefined\n            // since vrmHumanoid might be null as a result\n            if (vrmHumanoid === null) {\n                return;\n            }\n            else if (vrmHumanoid === undefined) {\n                throw new Error('VRMFirstPersonLoaderPlugin: vrmHumanoid is undefined. VRMHumanoidLoaderPlugin have to be used first');\n            }\n            gltf.userData.vrmFirstPerson = yield this._import(gltf, vrmHumanoid);\n        });\n    }\n    /**\n     * Import a {@link VRMFirstPerson} from a VRM.\n     *\n     * @param gltf A parsed result of GLTF taken from GLTFLoader\n     * @param humanoid A {@link VRMHumanoid} instance that represents the VRM\n     */\n    _import(gltf, humanoid) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (humanoid == null) {\n                return null;\n            }\n            const v1Result = yield this._v1Import(gltf, humanoid);\n            if (v1Result) {\n                return v1Result;\n            }\n            const v0Result = yield this._v0Import(gltf, humanoid);\n            if (v0Result) {\n                return v0Result;\n            }\n            return null;\n        });\n    }\n    _v1Import(gltf, humanoid) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const json = this.parser.json;\n            // early abort if it doesn't use vrm\n            const isVRMUsed = ((_a = json.extensionsUsed) === null || _a === void 0 ? void 0 : _a.indexOf('VRMC_vrm')) !== -1;\n            if (!isVRMUsed) {\n                return null;\n            }\n            const extension = (_b = json.extensions) === null || _b === void 0 ? void 0 : _b['VRMC_vrm'];\n            if (!extension) {\n                return null;\n            }\n            const specVersion = extension.specVersion;\n            if (!POSSIBLE_SPEC_VERSIONS$3.has(specVersion)) {\n                console.warn(`VRMFirstPersonLoaderPlugin: Unknown VRMC_vrm specVersion \"${specVersion}\"`);\n                return null;\n            }\n            const schemaFirstPerson = extension.firstPerson;\n            if (!schemaFirstPerson) {\n                return null;\n            }\n            const meshAnnotations = [];\n            const nodePrimitivesMap = yield gltfExtractPrimitivesFromNodes(gltf);\n            Array.from(nodePrimitivesMap.entries()).forEach(([nodeIndex, primitives]) => {\n                var _a;\n                const annotation = schemaFirstPerson.meshAnnotations\n                    ? schemaFirstPerson.meshAnnotations.find((a) => a.node === nodeIndex)\n                    : undefined;\n                meshAnnotations.push({\n                    meshes: primitives,\n                    type: (_a = annotation === null || annotation === void 0 ? void 0 : annotation.type) !== null && _a !== void 0 ? _a : 'both',\n                });\n            });\n            return new VRMFirstPerson(humanoid, meshAnnotations);\n        });\n    }\n    _v0Import(gltf, humanoid) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const json = this.parser.json;\n            const vrmExt = (_a = json.extensions) === null || _a === void 0 ? void 0 : _a.VRM;\n            if (!vrmExt) {\n                return null;\n            }\n            const schemaFirstPerson = vrmExt.firstPerson;\n            if (!schemaFirstPerson) {\n                return null;\n            }\n            const meshAnnotations = [];\n            const nodePrimitivesMap = yield gltfExtractPrimitivesFromNodes(gltf);\n            Array.from(nodePrimitivesMap.entries()).forEach(([nodeIndex, primitives]) => {\n                const schemaNode = json.nodes[nodeIndex];\n                const flag = schemaFirstPerson.meshAnnotations\n                    ? schemaFirstPerson.meshAnnotations.find((a) => a.mesh === schemaNode.mesh)\n                    : undefined;\n                meshAnnotations.push({\n                    meshes: primitives,\n                    type: this._convertV0FlagToV1Type(flag === null || flag === void 0 ? void 0 : flag.firstPersonFlag),\n                });\n            });\n            return new VRMFirstPerson(humanoid, meshAnnotations);\n        });\n    }\n    _convertV0FlagToV1Type(flag) {\n        if (flag === 'FirstPersonOnly') {\n            return 'firstPersonOnly';\n        }\n        else if (flag === 'ThirdPersonOnly') {\n            return 'thirdPersonOnly';\n        }\n        else if (flag === 'Auto') {\n            return 'auto';\n        }\n        else {\n            return 'both';\n        }\n    }\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\nconst VRMFirstPersonMeshAnnotationType = {\n    Auto: 'auto',\n    Both: 'both',\n    ThirdPersonOnly: 'thirdPersonOnly',\n    FirstPersonOnly: 'firstPersonOnly',\n};\n\nconst _v3A$4 = new THREE.Vector3();\nconst _v3B$2 = new THREE.Vector3();\nconst _quatA$5 = new THREE.Quaternion();\nclass VRMHumanoidHelper extends THREE.Group {\n    constructor(humanoid) {\n        super();\n        this.vrmHumanoid = humanoid;\n        this._boneAxesMap = new Map();\n        Object.values(humanoid.humanBones).forEach((bone) => {\n            const helper = new THREE.AxesHelper(1.0);\n            helper.matrixAutoUpdate = false;\n            helper.material.depthTest = false;\n            helper.material.depthWrite = false;\n            this.add(helper);\n            this._boneAxesMap.set(bone, helper);\n        });\n    }\n    dispose() {\n        Array.from(this._boneAxesMap.values()).forEach((axes) => {\n            axes.geometry.dispose();\n            axes.material.dispose();\n        });\n    }\n    updateMatrixWorld(force) {\n        Array.from(this._boneAxesMap.entries()).forEach(([bone, axes]) => {\n            bone.node.updateWorldMatrix(true, false);\n            bone.node.matrixWorld.decompose(_v3A$4, _quatA$5, _v3B$2);\n            const scale = _v3A$4.set(0.1, 0.1, 0.1).divide(_v3B$2);\n            axes.matrix.copy(bone.node.matrixWorld).scale(scale);\n        });\n        super.updateMatrixWorld(force);\n    }\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * The list of {@link VRMHumanBoneName}. Dependency aware.\n */\nconst VRMHumanBoneList = [\n    'hips',\n    'spine',\n    'chest',\n    'upperChest',\n    'neck',\n    'head',\n    'leftEye',\n    'rightEye',\n    'jaw',\n    'leftUpperLeg',\n    'leftLowerLeg',\n    'leftFoot',\n    'leftToes',\n    'rightUpperLeg',\n    'rightLowerLeg',\n    'rightFoot',\n    'rightToes',\n    'leftShoulder',\n    'leftUpperArm',\n    'leftLowerArm',\n    'leftHand',\n    'rightShoulder',\n    'rightUpperArm',\n    'rightLowerArm',\n    'rightHand',\n    'leftThumbMetacarpal',\n    'leftThumbProximal',\n    'leftThumbDistal',\n    'leftIndexProximal',\n    'leftIndexIntermediate',\n    'leftIndexDistal',\n    'leftMiddleProximal',\n    'leftMiddleIntermediate',\n    'leftMiddleDistal',\n    'leftRingProximal',\n    'leftRingIntermediate',\n    'leftRingDistal',\n    'leftLittleProximal',\n    'leftLittleIntermediate',\n    'leftLittleDistal',\n    'rightThumbMetacarpal',\n    'rightThumbProximal',\n    'rightThumbDistal',\n    'rightIndexProximal',\n    'rightIndexIntermediate',\n    'rightIndexDistal',\n    'rightMiddleProximal',\n    'rightMiddleIntermediate',\n    'rightMiddleDistal',\n    'rightRingProximal',\n    'rightRingIntermediate',\n    'rightRingDistal',\n    'rightLittleProximal',\n    'rightLittleIntermediate',\n    'rightLittleDistal',\n];\n\n/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * The names of {@link VRMHumanoid} bone names.\n *\n * Ref: https://github.com/vrm-c/vrm-specification/blob/master/specification/VRMC_vrm-1.0/humanoid.md\n */\nconst VRMHumanBoneName = {\n    Hips: 'hips',\n    Spine: 'spine',\n    Chest: 'chest',\n    UpperChest: 'upperChest',\n    Neck: 'neck',\n    Head: 'head',\n    LeftEye: 'leftEye',\n    RightEye: 'rightEye',\n    Jaw: 'jaw',\n    LeftUpperLeg: 'leftUpperLeg',\n    LeftLowerLeg: 'leftLowerLeg',\n    LeftFoot: 'leftFoot',\n    LeftToes: 'leftToes',\n    RightUpperLeg: 'rightUpperLeg',\n    RightLowerLeg: 'rightLowerLeg',\n    RightFoot: 'rightFoot',\n    RightToes: 'rightToes',\n    LeftShoulder: 'leftShoulder',\n    LeftUpperArm: 'leftUpperArm',\n    LeftLowerArm: 'leftLowerArm',\n    LeftHand: 'leftHand',\n    RightShoulder: 'rightShoulder',\n    RightUpperArm: 'rightUpperArm',\n    RightLowerArm: 'rightLowerArm',\n    RightHand: 'rightHand',\n    LeftThumbMetacarpal: 'leftThumbMetacarpal',\n    LeftThumbProximal: 'leftThumbProximal',\n    LeftThumbDistal: 'leftThumbDistal',\n    LeftIndexProximal: 'leftIndexProximal',\n    LeftIndexIntermediate: 'leftIndexIntermediate',\n    LeftIndexDistal: 'leftIndexDistal',\n    LeftMiddleProximal: 'leftMiddleProximal',\n    LeftMiddleIntermediate: 'leftMiddleIntermediate',\n    LeftMiddleDistal: 'leftMiddleDistal',\n    LeftRingProximal: 'leftRingProximal',\n    LeftRingIntermediate: 'leftRingIntermediate',\n    LeftRingDistal: 'leftRingDistal',\n    LeftLittleProximal: 'leftLittleProximal',\n    LeftLittleIntermediate: 'leftLittleIntermediate',\n    LeftLittleDistal: 'leftLittleDistal',\n    RightThumbMetacarpal: 'rightThumbMetacarpal',\n    RightThumbProximal: 'rightThumbProximal',\n    RightThumbDistal: 'rightThumbDistal',\n    RightIndexProximal: 'rightIndexProximal',\n    RightIndexIntermediate: 'rightIndexIntermediate',\n    RightIndexDistal: 'rightIndexDistal',\n    RightMiddleProximal: 'rightMiddleProximal',\n    RightMiddleIntermediate: 'rightMiddleIntermediate',\n    RightMiddleDistal: 'rightMiddleDistal',\n    RightRingProximal: 'rightRingProximal',\n    RightRingIntermediate: 'rightRingIntermediate',\n    RightRingDistal: 'rightRingDistal',\n    RightLittleProximal: 'rightLittleProximal',\n    RightLittleIntermediate: 'rightLittleIntermediate',\n    RightLittleDistal: 'rightLittleDistal',\n};\n\n/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * An object that maps from {@link VRMHumanBoneName} to its parent {@link VRMHumanBoneName}.\n *\n * Ref: https://github.com/vrm-c/vrm-specification/blob/master/specification/VRMC_vrm-1.0/humanoid.md\n */\nconst VRMHumanBoneParentMap = {\n    hips: null,\n    spine: 'hips',\n    chest: 'spine',\n    upperChest: 'chest',\n    neck: 'upperChest',\n    head: 'neck',\n    leftEye: 'head',\n    rightEye: 'head',\n    jaw: 'head',\n    leftUpperLeg: 'hips',\n    leftLowerLeg: 'leftUpperLeg',\n    leftFoot: 'leftLowerLeg',\n    leftToes: 'leftFoot',\n    rightUpperLeg: 'hips',\n    rightLowerLeg: 'rightUpperLeg',\n    rightFoot: 'rightLowerLeg',\n    rightToes: 'rightFoot',\n    leftShoulder: 'upperChest',\n    leftUpperArm: 'leftShoulder',\n    leftLowerArm: 'leftUpperArm',\n    leftHand: 'leftLowerArm',\n    rightShoulder: 'upperChest',\n    rightUpperArm: 'rightShoulder',\n    rightLowerArm: 'rightUpperArm',\n    rightHand: 'rightLowerArm',\n    leftThumbMetacarpal: 'leftHand',\n    leftThumbProximal: 'leftThumbMetacarpal',\n    leftThumbDistal: 'leftThumbProximal',\n    leftIndexProximal: 'leftHand',\n    leftIndexIntermediate: 'leftIndexProximal',\n    leftIndexDistal: 'leftIndexIntermediate',\n    leftMiddleProximal: 'leftHand',\n    leftMiddleIntermediate: 'leftMiddleProximal',\n    leftMiddleDistal: 'leftMiddleIntermediate',\n    leftRingProximal: 'leftHand',\n    leftRingIntermediate: 'leftRingProximal',\n    leftRingDistal: 'leftRingIntermediate',\n    leftLittleProximal: 'leftHand',\n    leftLittleIntermediate: 'leftLittleProximal',\n    leftLittleDistal: 'leftLittleIntermediate',\n    rightThumbMetacarpal: 'rightHand',\n    rightThumbProximal: 'rightThumbMetacarpal',\n    rightThumbDistal: 'rightThumbProximal',\n    rightIndexProximal: 'rightHand',\n    rightIndexIntermediate: 'rightIndexProximal',\n    rightIndexDistal: 'rightIndexIntermediate',\n    rightMiddleProximal: 'rightHand',\n    rightMiddleIntermediate: 'rightMiddleProximal',\n    rightMiddleDistal: 'rightMiddleIntermediate',\n    rightRingProximal: 'rightHand',\n    rightRingIntermediate: 'rightRingProximal',\n    rightRingDistal: 'rightRingIntermediate',\n    rightLittleProximal: 'rightHand',\n    rightLittleIntermediate: 'rightLittleProximal',\n    rightLittleDistal: 'rightLittleIntermediate',\n};\n\n/**\n * A compat function for `Quaternion.invert()` / `Quaternion.inverse()`.\n * `Quaternion.invert()` is introduced in r123 and `Quaternion.inverse()` emits a warning.\n * We are going to use this compat for a while.\n * @param target A target quaternion\n */\nfunction quatInvertCompat(target) {\n    if (target.invert) {\n        target.invert();\n    }\n    else {\n        target.inverse();\n    }\n    return target;\n}\n\nconst _v3A$3 = new THREE.Vector3();\nconst _quatA$4 = new THREE.Quaternion();\n/**\n * A class represents the Rig of a VRM.\n */\nclass VRMRig {\n    /**\n     * Create a new {@link VRMHumanoid}.\n     * @param humanBones A {@link VRMHumanBones} contains all the bones of the new humanoid\n     */\n    constructor(humanBones) {\n        this.humanBones = humanBones;\n        this.restPose = this.getAbsolutePose();\n    }\n    /**\n     * Return the current absolute pose of this humanoid as a {@link VRMPose}.\n     * Note that the output result will contain initial state of the VRM and not compatible between different models.\n     * You might want to use {@link getPose} instead.\n     */\n    getAbsolutePose() {\n        const pose = {};\n        Object.keys(this.humanBones).forEach((vrmBoneNameString) => {\n            const vrmBoneName = vrmBoneNameString;\n            const node = this.getBoneNode(vrmBoneName);\n            // Ignore when there are no bone on the VRMHumanoid\n            if (!node) {\n                return;\n            }\n            // Get the position / rotation from the node\n            _v3A$3.copy(node.position);\n            _quatA$4.copy(node.quaternion);\n            // Convert to raw arrays\n            pose[vrmBoneName] = {\n                position: _v3A$3.toArray(),\n                rotation: _quatA$4.toArray(),\n            };\n        });\n        return pose;\n    }\n    /**\n     * Return the current pose of this humanoid as a {@link VRMPose}.\n     *\n     * Each transform is a local transform relative from rest pose (T-pose).\n     */\n    getPose() {\n        const pose = {};\n        Object.keys(this.humanBones).forEach((boneNameString) => {\n            const boneName = boneNameString;\n            const node = this.getBoneNode(boneName);\n            // Ignore when there are no bone on the VRMHumanoid\n            if (!node) {\n                return;\n            }\n            // Take a diff from restPose\n            _v3A$3.set(0, 0, 0);\n            _quatA$4.identity();\n            const restState = this.restPose[boneName];\n            if (restState === null || restState === void 0 ? void 0 : restState.position) {\n                _v3A$3.fromArray(restState.position).negate();\n            }\n            if (restState === null || restState === void 0 ? void 0 : restState.rotation) {\n                quatInvertCompat(_quatA$4.fromArray(restState.rotation));\n            }\n            // Get the position / rotation from the node\n            _v3A$3.add(node.position);\n            _quatA$4.premultiply(node.quaternion);\n            // Convert to raw arrays\n            pose[boneName] = {\n                position: _v3A$3.toArray(),\n                rotation: _quatA$4.toArray(),\n            };\n        });\n        return pose;\n    }\n    /**\n     * Let the humanoid do a specified pose.\n     *\n     * Each transform have to be a local transform relative from rest pose (T-pose).\n     * You can pass what you got from {@link getPose}.\n     *\n     * @param poseObject A [[VRMPose]] that represents a single pose\n     */\n    setPose(poseObject) {\n        Object.entries(poseObject).forEach(([boneNameString, state]) => {\n            const boneName = boneNameString;\n            const node = this.getBoneNode(boneName);\n            // Ignore when there are no bone that is defined in the pose on the VRMHumanoid\n            if (!node) {\n                return;\n            }\n            const restState = this.restPose[boneName];\n            if (!restState) {\n                // It's very unlikely. Possibly a bug\n                return;\n            }\n            // Apply the state to the actual bone\n            if (state === null || state === void 0 ? void 0 : state.position) {\n                node.position.fromArray(state.position);\n                if (restState.position) {\n                    node.position.add(_v3A$3.fromArray(restState.position));\n                }\n            }\n            if (state === null || state === void 0 ? void 0 : state.rotation) {\n                node.quaternion.fromArray(state.rotation);\n                if (restState.rotation) {\n                    node.quaternion.multiply(_quatA$4.fromArray(restState.rotation));\n                }\n            }\n        });\n    }\n    /**\n     * Reset the humanoid to its rest pose.\n     */\n    resetPose() {\n        Object.entries(this.restPose).forEach(([boneName, rest]) => {\n            const node = this.getBoneNode(boneName);\n            if (!node) {\n                return;\n            }\n            if (rest === null || rest === void 0 ? void 0 : rest.position) {\n                node.position.fromArray(rest.position);\n            }\n            if (rest === null || rest === void 0 ? void 0 : rest.rotation) {\n                node.quaternion.fromArray(rest.rotation);\n            }\n        });\n    }\n    /**\n     * Return a bone bound to a specified {@link VRMHumanBoneName}, as a {@link VRMHumanBone}.\n     *\n     * @param name Name of the bone you want\n     */\n    getBone(name) {\n        var _a;\n        return (_a = this.humanBones[name]) !== null && _a !== void 0 ? _a : undefined;\n    }\n    /**\n     * Return a bone bound to a specified {@link VRMHumanBoneName}, as a `THREE.Object3D`.\n     *\n     * @param name Name of the bone you want\n     */\n    getBoneNode(name) {\n        var _a, _b;\n        return (_b = (_a = this.humanBones[name]) === null || _a === void 0 ? void 0 : _a.node) !== null && _b !== void 0 ? _b : null;\n    }\n}\n\nconst _v3A$2 = new THREE.Vector3();\nconst _quatA$3 = new THREE.Quaternion();\nconst _boneWorldPos = new THREE.Vector3();\n/**\n * A class represents the normalized Rig of a VRM.\n */\nclass VRMHumanoidRig extends VRMRig {\n    static _setupTransforms(modelRig) {\n        const root = new THREE.Object3D();\n        root.name = 'VRMHumanoidRig';\n        // store boneWorldPositions, boneWorldRotations, and parentWorldRotations\n        const boneWorldPositions = {};\n        const boneRotations = {};\n        const parentWorldRotations = {};\n        VRMHumanBoneList.forEach((boneName) => {\n            var _a;\n            const boneNode = modelRig.getBoneNode(boneName);\n            if (boneNode) {\n                const boneWorldPosition = new THREE.Vector3();\n                const boneWorldRotation = new THREE.Quaternion();\n                boneNode.updateWorldMatrix(true, false);\n                boneNode.matrixWorld.decompose(boneWorldPosition, boneWorldRotation, _v3A$2);\n                boneWorldPositions[boneName] = boneWorldPosition;\n                boneRotations[boneName] = boneNode.quaternion.clone();\n                const parentWorldRotation = new THREE.Quaternion();\n                (_a = boneNode.parent) === null || _a === void 0 ? void 0 : _a.matrixWorld.decompose(_v3A$2, parentWorldRotation, _v3A$2);\n                parentWorldRotations[boneName] = parentWorldRotation;\n            }\n        });\n        // build rig hierarchy + store parentWorldRotations\n        const rigBones = {};\n        VRMHumanBoneList.forEach((boneName) => {\n            var _a;\n            const boneNode = modelRig.getBoneNode(boneName);\n            if (boneNode) {\n                const boneWorldPosition = boneWorldPositions[boneName];\n                // see the nearest parent position\n                let currentBoneName = boneName;\n                let parentBoneWorldPosition;\n                while (parentBoneWorldPosition == null) {\n                    currentBoneName = VRMHumanBoneParentMap[currentBoneName];\n                    if (currentBoneName == null) {\n                        break;\n                    }\n                    parentBoneWorldPosition = boneWorldPositions[currentBoneName];\n                }\n                // add to hierarchy\n                const rigBoneNode = new THREE.Object3D();\n                rigBoneNode.name = 'Normalized_' + boneNode.name;\n                const parentRigBoneNode = (currentBoneName ? (_a = rigBones[currentBoneName]) === null || _a === void 0 ? void 0 : _a.node : root);\n                parentRigBoneNode.add(rigBoneNode);\n                rigBoneNode.position.copy(boneWorldPosition);\n                if (parentBoneWorldPosition) {\n                    rigBoneNode.position.sub(parentBoneWorldPosition);\n                }\n                rigBones[boneName] = { node: rigBoneNode };\n            }\n        });\n        return {\n            rigBones: rigBones,\n            root,\n            parentWorldRotations,\n            boneRotations,\n        };\n    }\n    constructor(humanoid) {\n        const { rigBones, root, parentWorldRotations, boneRotations } = VRMHumanoidRig._setupTransforms(humanoid);\n        super(rigBones);\n        this.original = humanoid;\n        this.root = root;\n        this._parentWorldRotations = parentWorldRotations;\n        this._boneRotations = boneRotations;\n    }\n    /**\n     * Update this humanoid rig.\n     */\n    update() {\n        VRMHumanBoneList.forEach((boneName) => {\n            const boneNode = this.original.getBoneNode(boneName);\n            if (boneNode != null) {\n                const rigBoneNode = this.getBoneNode(boneName);\n                const parentWorldRotation = this._parentWorldRotations[boneName];\n                const invParentWorldRotation = _quatA$3.copy(parentWorldRotation).invert();\n                const boneRotation = this._boneRotations[boneName];\n                boneNode.quaternion\n                    .copy(rigBoneNode.quaternion)\n                    .multiply(parentWorldRotation)\n                    .premultiply(invParentWorldRotation)\n                    .multiply(boneRotation);\n                // Move the mass center of the VRM\n                if (boneName === 'hips') {\n                    const boneWorldPosition = rigBoneNode.getWorldPosition(_boneWorldPos);\n                    boneNode.parent.updateWorldMatrix(true, false);\n                    const parentWorldMatrix = boneNode.parent.matrixWorld;\n                    const localPosition = boneWorldPosition.applyMatrix4(parentWorldMatrix.invert());\n                    boneNode.position.copy(localPosition);\n                }\n            }\n        });\n    }\n}\n\n/**\n * A class represents a humanoid of a VRM.\n */\nclass VRMHumanoid {\n    /**\n     * @deprecated Deprecated. Use either {@link rawRestPose} or {@link normalizedRestPose} instead.\n     */\n    get restPose() {\n        console.warn('VRMHumanoid: restPose is deprecated. Use either rawRestPose or normalizedRestPose instead.');\n        return this.rawRestPose;\n    }\n    /**\n     * A {@link VRMPose} of its raw human bones that is its default state.\n     * Note that it's not compatible with {@link setRawPose} and {@link getRawPose}, since it contains non-relative values of each local transforms.\n     */\n    get rawRestPose() {\n        return this._rawHumanBones.restPose;\n    }\n    /**\n     * A {@link VRMPose} of its normalized human bones that is its default state.\n     * Note that it's not compatible with {@link setNormalizedPose} and {@link getNormalizedPose}, since it contains non-relative values of each local transforms.\n     */\n    get normalizedRestPose() {\n        return this._normalizedHumanBones.restPose;\n    }\n    /**\n     * A map from {@link VRMHumanBoneName} to raw {@link VRMHumanBone}s.\n     */\n    get humanBones() {\n        // an alias of `rawHumanBones`\n        return this._rawHumanBones.humanBones;\n    }\n    /**\n     * A map from {@link VRMHumanBoneName} to raw {@link VRMHumanBone}s.\n     */\n    get rawHumanBones() {\n        return this._rawHumanBones.humanBones;\n    }\n    /**\n     * A map from {@link VRMHumanBoneName} to normalized {@link VRMHumanBone}s.\n     */\n    get normalizedHumanBones() {\n        return this._normalizedHumanBones.humanBones;\n    }\n    /**\n     * The root of normalized {@link VRMHumanBone}s.\n     */\n    get normalizedHumanBonesRoot() {\n        return this._normalizedHumanBones.root;\n    }\n    /**\n     * Create a new {@link VRMHumanoid}.\n     * @param humanBones A {@link VRMHumanBones} contains all the bones of the new humanoid\n     * @param autoUpdateHumanBones Whether it copies pose from normalizedHumanBones to rawHumanBones on {@link update}. `true` by default.\n     */\n    constructor(humanBones, options) {\n        var _a;\n        this.autoUpdateHumanBones = (_a = options === null || options === void 0 ? void 0 : options.autoUpdateHumanBones) !== null && _a !== void 0 ? _a : true;\n        this._rawHumanBones = new VRMRig(humanBones);\n        this._normalizedHumanBones = new VRMHumanoidRig(this._rawHumanBones);\n    }\n    /**\n     * Copy the given {@link VRMHumanoid} into this one.\n     * @param source The {@link VRMHumanoid} you want to copy\n     * @returns this\n     */\n    copy(source) {\n        this.autoUpdateHumanBones = source.autoUpdateHumanBones;\n        this._rawHumanBones = new VRMRig(source.humanBones);\n        this._normalizedHumanBones = new VRMHumanoidRig(this._rawHumanBones);\n        return this;\n    }\n    /**\n     * Returns a clone of this {@link VRMHumanoid}.\n     * @returns Copied {@link VRMHumanoid}\n     */\n    clone() {\n        return new VRMHumanoid(this.humanBones, { autoUpdateHumanBones: this.autoUpdateHumanBones }).copy(this);\n    }\n    /**\n     * @deprecated Deprecated. Use either {@link getRawAbsolutePose} or {@link getNormalizedAbsolutePose} instead.\n     */\n    getAbsolutePose() {\n        console.warn('VRMHumanoid: getAbsolutePose() is deprecated. Use either getRawAbsolutePose() or getNormalizedAbsolutePose() instead.');\n        return this.getRawAbsolutePose();\n    }\n    /**\n     * Return the current absolute pose of this raw human bones as a {@link VRMPose}.\n     * Note that the output result will contain initial state of the VRM and not compatible between different models.\n     * You might want to use {@link getRawPose} instead.\n     */\n    getRawAbsolutePose() {\n        return this._rawHumanBones.getAbsolutePose();\n    }\n    /**\n     * Return the current absolute pose of this normalized human bones as a {@link VRMPose}.\n     * Note that the output result will contain initial state of the VRM and not compatible between different models.\n     * You might want to use {@link getNormalizedPose} instead.\n     */\n    getNormalizedAbsolutePose() {\n        return this._normalizedHumanBones.getAbsolutePose();\n    }\n    /**\n     * @deprecated Deprecated. Use either {@link getRawPose} or {@link getNormalizedPose} instead.\n     */\n    getPose() {\n        console.warn('VRMHumanoid: getPose() is deprecated. Use either getRawPose() or getNormalizedPose() instead.');\n        return this.getRawPose();\n    }\n    /**\n     * Return the current pose of raw human bones as a {@link VRMPose}.\n     *\n     * Each transform is a local transform relative from rest pose (T-pose).\n     */\n    getRawPose() {\n        return this._rawHumanBones.getPose();\n    }\n    /**\n     * Return the current pose of normalized human bones as a {@link VRMPose}.\n     *\n     * Each transform is a local transform relative from rest pose (T-pose).\n     */\n    getNormalizedPose() {\n        return this._normalizedHumanBones.getPose();\n    }\n    /**\n     * @deprecated Deprecated. Use either {@link setRawPose} or {@link setNormalizedPose} instead.\n     */\n    setPose(poseObject) {\n        console.warn('VRMHumanoid: setPose() is deprecated. Use either setRawPose() or setNormalizedPose() instead.');\n        return this.setRawPose(poseObject);\n    }\n    /**\n     * Let the raw human bones do a specified pose.\n     *\n     * Each transform have to be a local transform relative from rest pose (T-pose).\n     * You can pass what you got from {@link getRawPose}.\n     *\n     * If you are using {@link autoUpdateHumanBones}, you might want to use {@link setNormalizedPose} instead.\n     *\n     * @param poseObject A {@link VRMPose} that represents a single pose\n     */\n    setRawPose(poseObject) {\n        return this._rawHumanBones.setPose(poseObject);\n    }\n    /**\n     * Let the normalized human bones do a specified pose.\n     *\n     * Each transform have to be a local transform relative from rest pose (T-pose).\n     * You can pass what you got from {@link getNormalizedPose}.\n     *\n     * @param poseObject A {@link VRMPose} that represents a single pose\n     */\n    setNormalizedPose(poseObject) {\n        return this._normalizedHumanBones.setPose(poseObject);\n    }\n    /**\n     * @deprecated Deprecated. Use either {@link resetRawPose} or {@link resetNormalizedPose} instead.\n     */\n    resetPose() {\n        console.warn('VRMHumanoid: resetPose() is deprecated. Use either resetRawPose() or resetNormalizedPose() instead.');\n        return this.resetRawPose();\n    }\n    /**\n     * Reset the raw humanoid to its rest pose.\n     *\n     * If you are using {@link autoUpdateHumanBones}, you might want to use {@link resetNormalizedPose} instead.\n     */\n    resetRawPose() {\n        return this._rawHumanBones.resetPose();\n    }\n    /**\n     * Reset the normalized humanoid to its rest pose.\n     */\n    resetNormalizedPose() {\n        return this._normalizedHumanBones.resetPose();\n    }\n    /**\n     * @deprecated Deprecated. Use either {@link getRawBone} or {@link getNormalizedBone} instead.\n     */\n    getBone(name) {\n        console.warn('VRMHumanoid: getBone() is deprecated. Use either getRawBone() or getNormalizedBone() instead.');\n        return this.getRawBone(name);\n    }\n    /**\n     * Return a raw {@link VRMHumanBone} bound to a specified {@link VRMHumanBoneName}.\n     *\n     * @param name Name of the bone you want\n     */\n    getRawBone(name) {\n        return this._rawHumanBones.getBone(name);\n    }\n    /**\n     * Return a normalized {@link VRMHumanBone} bound to a specified {@link VRMHumanBoneName}.\n     *\n     * @param name Name of the bone you want\n     */\n    getNormalizedBone(name) {\n        return this._normalizedHumanBones.getBone(name);\n    }\n    /**\n     * @deprecated Deprecated. Use either {@link getRawBoneNode} or {@link getNormalizedBoneNode} instead.\n     */\n    getBoneNode(name) {\n        console.warn('VRMHumanoid: getBoneNode() is deprecated. Use either getRawBoneNode() or getNormalizedBoneNode() instead.');\n        return this.getRawBoneNode(name);\n    }\n    /**\n     * Return a raw bone as a `THREE.Object3D` bound to a specified {@link VRMHumanBoneName}.\n     *\n     * @param name Name of the bone you want\n     */\n    getRawBoneNode(name) {\n        return this._rawHumanBones.getBoneNode(name);\n    }\n    /**\n     * Return a normalized bone as a `THREE.Object3D` bound to a specified {@link VRMHumanBoneName}.\n     *\n     * @param name Name of the bone you want\n     */\n    getNormalizedBoneNode(name) {\n        return this._normalizedHumanBones.getBoneNode(name);\n    }\n    /**\n     * Update the humanoid component.\n     *\n     * If {@link autoUpdateHumanBones} is `true`, it transfers the pose of normalized human bones to raw human bones.\n     */\n    update() {\n        if (this.autoUpdateHumanBones) {\n            this._normalizedHumanBones.update();\n        }\n    }\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\nconst VRMRequiredHumanBoneName = {\n    Hips: 'hips',\n    Spine: 'spine',\n    Head: 'head',\n    LeftUpperLeg: 'leftUpperLeg',\n    LeftLowerLeg: 'leftLowerLeg',\n    LeftFoot: 'leftFoot',\n    RightUpperLeg: 'rightUpperLeg',\n    RightLowerLeg: 'rightLowerLeg',\n    RightFoot: 'rightFoot',\n    LeftUpperArm: 'leftUpperArm',\n    LeftLowerArm: 'leftLowerArm',\n    LeftHand: 'leftHand',\n    RightUpperArm: 'rightUpperArm',\n    RightLowerArm: 'rightLowerArm',\n    RightHand: 'rightHand',\n};\n\n/**\n * Possible spec versions it recognizes.\n */\nconst POSSIBLE_SPEC_VERSIONS$2 = new Set(['1.0', '1.0-beta']);\n/**\n * A map from old thumb bone names to new thumb bone names\n */\nconst thumbBoneNameMap = {\n    leftThumbProximal: 'leftThumbMetacarpal',\n    leftThumbIntermediate: 'leftThumbProximal',\n    rightThumbProximal: 'rightThumbMetacarpal',\n    rightThumbIntermediate: 'rightThumbProximal',\n};\n/**\n * A plugin of GLTFLoader that imports a {@link VRMHumanoid} from a VRM extension of a GLTF.\n */\nclass VRMHumanoidLoaderPlugin {\n    get name() {\n        // We should use the extension name instead but we have multiple plugins for an extension...\n        return 'VRMHumanoidLoaderPlugin';\n    }\n    constructor(parser, options) {\n        this.parser = parser;\n        this.helperRoot = options === null || options === void 0 ? void 0 : options.helperRoot;\n        this.autoUpdateHumanBones = options === null || options === void 0 ? void 0 : options.autoUpdateHumanBones;\n    }\n    afterRoot(gltf) {\n        return __awaiter(this, void 0, void 0, function* () {\n            gltf.userData.vrmHumanoid = yield this._import(gltf);\n        });\n    }\n    /**\n     * Import a {@link VRMHumanoid} from a VRM.\n     *\n     * @param gltf A parsed result of GLTF taken from GLTFLoader\n     */\n    _import(gltf) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const v1Result = yield this._v1Import(gltf);\n            if (v1Result) {\n                return v1Result;\n            }\n            const v0Result = yield this._v0Import(gltf);\n            if (v0Result) {\n                return v0Result;\n            }\n            return null;\n        });\n    }\n    _v1Import(gltf) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const json = this.parser.json;\n            // early abort if it doesn't use vrm\n            const isVRMUsed = ((_a = json.extensionsUsed) === null || _a === void 0 ? void 0 : _a.indexOf('VRMC_vrm')) !== -1;\n            if (!isVRMUsed) {\n                return null;\n            }\n            const extension = (_b = json.extensions) === null || _b === void 0 ? void 0 : _b['VRMC_vrm'];\n            if (!extension) {\n                return null;\n            }\n            const specVersion = extension.specVersion;\n            if (!POSSIBLE_SPEC_VERSIONS$2.has(specVersion)) {\n                console.warn(`VRMHumanoidLoaderPlugin: Unknown VRMC_vrm specVersion \"${specVersion}\"`);\n                return null;\n            }\n            const schemaHumanoid = extension.humanoid;\n            if (!schemaHumanoid) {\n                return null;\n            }\n            /**\n             * compat: 1.0-beta thumb bone names\n             *\n             * `true` if `leftThumbIntermediate` or `rightThumbIntermediate` exists\n             */\n            const existsPreviousThumbName = schemaHumanoid.humanBones.leftThumbIntermediate != null ||\n                schemaHumanoid.humanBones.rightThumbIntermediate != null;\n            const humanBones = {};\n            if (schemaHumanoid.humanBones != null) {\n                yield Promise.all(Object.entries(schemaHumanoid.humanBones).map(([boneNameString, schemaHumanBone]) => __awaiter(this, void 0, void 0, function* () {\n                    let boneName = boneNameString;\n                    const index = schemaHumanBone.node;\n                    // compat: 1.0-beta previous thumb bone names\n                    if (existsPreviousThumbName) {\n                        const thumbBoneName = thumbBoneNameMap[boneName];\n                        if (thumbBoneName != null) {\n                            boneName = thumbBoneName;\n                        }\n                    }\n                    const node = yield this.parser.getDependency('node', index);\n                    // if the specified node does not exist, emit a warning\n                    if (node == null) {\n                        console.warn(`A glTF node bound to the humanoid bone ${boneName} (index = ${index}) does not exist`);\n                        return;\n                    }\n                    // set to the `humanBones`\n                    humanBones[boneName] = { node };\n                })));\n            }\n            const humanoid = new VRMHumanoid(this._ensureRequiredBonesExist(humanBones), {\n                autoUpdateHumanBones: this.autoUpdateHumanBones,\n            });\n            gltf.scene.add(humanoid.normalizedHumanBonesRoot);\n            if (this.helperRoot) {\n                const helper = new VRMHumanoidHelper(humanoid);\n                this.helperRoot.add(helper);\n                helper.renderOrder = this.helperRoot.renderOrder;\n            }\n            return humanoid;\n        });\n    }\n    _v0Import(gltf) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const json = this.parser.json;\n            const vrmExt = (_a = json.extensions) === null || _a === void 0 ? void 0 : _a.VRM;\n            if (!vrmExt) {\n                return null;\n            }\n            const schemaHumanoid = vrmExt.humanoid;\n            if (!schemaHumanoid) {\n                return null;\n            }\n            const humanBones = {};\n            if (schemaHumanoid.humanBones != null) {\n                yield Promise.all(schemaHumanoid.humanBones.map((bone) => __awaiter(this, void 0, void 0, function* () {\n                    const boneName = bone.bone;\n                    const index = bone.node;\n                    if (boneName == null || index == null) {\n                        return;\n                    }\n                    const node = yield this.parser.getDependency('node', index);\n                    // if the specified node does not exist, emit a warning\n                    if (node == null) {\n                        console.warn(`A glTF node bound to the humanoid bone ${boneName} (index = ${index}) does not exist`);\n                        return;\n                    }\n                    // map to new bone name\n                    const thumbBoneName = thumbBoneNameMap[boneName];\n                    const newBoneName = (thumbBoneName !== null && thumbBoneName !== void 0 ? thumbBoneName : boneName);\n                    // v0 VRMs might have a multiple nodes attached to a single bone...\n                    // so if there already is an entry in the `humanBones`, show a warning and ignore it\n                    if (humanBones[newBoneName] != null) {\n                        console.warn(`Multiple bone entries for ${newBoneName} detected (index = ${index}), ignoring duplicated entries.`);\n                        return;\n                    }\n                    // set to the `humanBones`\n                    humanBones[newBoneName] = { node };\n                })));\n            }\n            const humanoid = new VRMHumanoid(this._ensureRequiredBonesExist(humanBones), {\n                autoUpdateHumanBones: this.autoUpdateHumanBones,\n            });\n            gltf.scene.add(humanoid.normalizedHumanBonesRoot);\n            if (this.helperRoot) {\n                const helper = new VRMHumanoidHelper(humanoid);\n                this.helperRoot.add(helper);\n                helper.renderOrder = this.helperRoot.renderOrder;\n            }\n            return humanoid;\n        });\n    }\n    /**\n     * Ensure required bones exist in given human bones.\n     * @param humanBones Human bones\n     * @returns Human bones, no longer partial!\n     */\n    _ensureRequiredBonesExist(humanBones) {\n        // ensure required bones exist\n        const missingRequiredBones = Object.values(VRMRequiredHumanBoneName).filter((requiredBoneName) => humanBones[requiredBoneName] == null);\n        // throw an error if there are missing bones\n        if (missingRequiredBones.length > 0) {\n            throw new Error(`VRMHumanoidLoaderPlugin: These humanoid bones are required but not exist: ${missingRequiredBones.join(', ')}`);\n        }\n        return humanBones;\n    }\n}\n\nclass FanBufferGeometry extends THREE.BufferGeometry {\n    constructor() {\n        super();\n        this._currentTheta = 0;\n        this._currentRadius = 0;\n        this.theta = 0.0;\n        this.radius = 0.0;\n        this._currentTheta = 0.0;\n        this._currentRadius = 0.0;\n        this._attrPos = new THREE.BufferAttribute(new Float32Array(65 * 3), 3);\n        this.setAttribute('position', this._attrPos);\n        this._attrIndex = new THREE.BufferAttribute(new Uint16Array(3 * 63), 1);\n        this.setIndex(this._attrIndex);\n        this._buildIndex();\n        this.update();\n    }\n    update() {\n        let shouldUpdateGeometry = false;\n        if (this._currentTheta !== this.theta) {\n            this._currentTheta = this.theta;\n            shouldUpdateGeometry = true;\n        }\n        if (this._currentRadius !== this.radius) {\n            this._currentRadius = this.radius;\n            shouldUpdateGeometry = true;\n        }\n        if (shouldUpdateGeometry) {\n            this._buildPosition();\n        }\n    }\n    _buildPosition() {\n        this._attrPos.setXYZ(0, 0.0, 0.0, 0.0);\n        for (let i = 0; i < 64; i++) {\n            const t = (i / 63.0) * this._currentTheta;\n            this._attrPos.setXYZ(i + 1, this._currentRadius * Math.sin(t), 0.0, this._currentRadius * Math.cos(t));\n        }\n        this._attrPos.needsUpdate = true;\n    }\n    _buildIndex() {\n        for (let i = 0; i < 63; i++) {\n            this._attrIndex.setXYZ(i * 3, 0, i + 1, i + 2);\n        }\n        this._attrIndex.needsUpdate = true;\n    }\n}\n\nclass LineAndSphereBufferGeometry extends THREE.BufferGeometry {\n    constructor() {\n        super();\n        this.radius = 0.0;\n        this._currentRadius = 0.0;\n        this.tail = new THREE.Vector3();\n        this._currentTail = new THREE.Vector3();\n        this._attrPos = new THREE.BufferAttribute(new Float32Array(294), 3);\n        this.setAttribute('position', this._attrPos);\n        this._attrIndex = new THREE.BufferAttribute(new Uint16Array(194), 1);\n        this.setIndex(this._attrIndex);\n        this._buildIndex();\n        this.update();\n    }\n    update() {\n        let shouldUpdateGeometry = false;\n        if (this._currentRadius !== this.radius) {\n            this._currentRadius = this.radius;\n            shouldUpdateGeometry = true;\n        }\n        if (!this._currentTail.equals(this.tail)) {\n            this._currentTail.copy(this.tail);\n            shouldUpdateGeometry = true;\n        }\n        if (shouldUpdateGeometry) {\n            this._buildPosition();\n        }\n    }\n    _buildPosition() {\n        for (let i = 0; i < 32; i++) {\n            const t = (i / 16.0) * Math.PI;\n            this._attrPos.setXYZ(i, Math.cos(t), Math.sin(t), 0.0);\n            this._attrPos.setXYZ(32 + i, 0.0, Math.cos(t), Math.sin(t));\n            this._attrPos.setXYZ(64 + i, Math.sin(t), 0.0, Math.cos(t));\n        }\n        this.scale(this._currentRadius, this._currentRadius, this._currentRadius);\n        this.translate(this._currentTail.x, this._currentTail.y, this._currentTail.z);\n        this._attrPos.setXYZ(96, 0, 0, 0);\n        this._attrPos.setXYZ(97, this._currentTail.x, this._currentTail.y, this._currentTail.z);\n        this._attrPos.needsUpdate = true;\n    }\n    _buildIndex() {\n        for (let i = 0; i < 32; i++) {\n            const i1 = (i + 1) % 32;\n            this._attrIndex.setXY(i * 2, i, i1);\n            this._attrIndex.setXY(64 + i * 2, 32 + i, 32 + i1);\n            this._attrIndex.setXY(128 + i * 2, 64 + i, 64 + i1);\n        }\n        this._attrIndex.setXY(192, 96, 97);\n        this._attrIndex.needsUpdate = true;\n    }\n}\n\nconst _quatA$2 = new THREE.Quaternion();\nconst _quatB$2 = new THREE.Quaternion();\nconst _v3A$1 = new THREE.Vector3();\nconst _v3B$1 = new THREE.Vector3();\nconst SQRT_2_OVER_2 = Math.sqrt(2.0) / 2.0;\nconst QUAT_XY_CW90 = new THREE.Quaternion(0, 0, -SQRT_2_OVER_2, SQRT_2_OVER_2);\nconst VEC3_POSITIVE_Y = new THREE.Vector3(0.0, 1.0, 0.0);\nclass VRMLookAtHelper extends THREE.Group {\n    constructor(lookAt) {\n        super();\n        this.matrixAutoUpdate = false;\n        this.vrmLookAt = lookAt;\n        {\n            const geometry = new FanBufferGeometry();\n            geometry.radius = 0.5;\n            const material = new THREE.MeshBasicMaterial({\n                color: 0x00ff00,\n                transparent: true,\n                opacity: 0.5,\n                side: THREE.DoubleSide,\n                depthTest: false,\n                depthWrite: false,\n            });\n            this._meshPitch = new THREE.Mesh(geometry, material);\n            this.add(this._meshPitch);\n        }\n        {\n            const geometry = new FanBufferGeometry();\n            geometry.radius = 0.5;\n            const material = new THREE.MeshBasicMaterial({\n                color: 0xff0000,\n                transparent: true,\n                opacity: 0.5,\n                side: THREE.DoubleSide,\n                depthTest: false,\n                depthWrite: false,\n            });\n            this._meshYaw = new THREE.Mesh(geometry, material);\n            this.add(this._meshYaw);\n        }\n        {\n            const geometry = new LineAndSphereBufferGeometry();\n            geometry.radius = 0.1;\n            const material = new THREE.LineBasicMaterial({\n                color: 0xffffff,\n                depthTest: false,\n                depthWrite: false,\n            });\n            this._lineTarget = new THREE.LineSegments(geometry, material);\n            this._lineTarget.frustumCulled = false;\n            this.add(this._lineTarget);\n        }\n    }\n    dispose() {\n        this._meshYaw.geometry.dispose();\n        this._meshYaw.material.dispose();\n        this._meshPitch.geometry.dispose();\n        this._meshPitch.material.dispose();\n        this._lineTarget.geometry.dispose();\n        this._lineTarget.material.dispose();\n    }\n    updateMatrixWorld(force) {\n        // update geometries\n        const yaw = THREE.MathUtils.DEG2RAD * this.vrmLookAt.yaw;\n        this._meshYaw.geometry.theta = yaw;\n        this._meshYaw.geometry.update();\n        const pitch = THREE.MathUtils.DEG2RAD * this.vrmLookAt.pitch;\n        this._meshPitch.geometry.theta = pitch;\n        this._meshPitch.geometry.update();\n        // get world position and quaternion\n        this.vrmLookAt.getLookAtWorldPosition(_v3A$1);\n        this.vrmLookAt.getLookAtWorldQuaternion(_quatA$2);\n        // calculate rotation using faceFront\n        _quatA$2.multiply(this.vrmLookAt.getFaceFrontQuaternion(_quatB$2));\n        // set transform to meshes\n        this._meshYaw.position.copy(_v3A$1);\n        this._meshYaw.quaternion.copy(_quatA$2);\n        this._meshPitch.position.copy(_v3A$1);\n        this._meshPitch.quaternion.copy(_quatA$2);\n        this._meshPitch.quaternion.multiply(_quatB$2.setFromAxisAngle(VEC3_POSITIVE_Y, yaw));\n        this._meshPitch.quaternion.multiply(QUAT_XY_CW90);\n        // update target line and sphere\n        const { target, autoUpdate } = this.vrmLookAt;\n        if (target != null && autoUpdate) {\n            target.getWorldPosition(_v3B$1).sub(_v3A$1);\n            this._lineTarget.geometry.tail.copy(_v3B$1);\n            this._lineTarget.geometry.update();\n            this._lineTarget.position.copy(_v3A$1);\n        }\n        // apply transform to meshes\n        super.updateMatrixWorld(force);\n    }\n}\n\nconst _position = new THREE.Vector3();\nconst _scale = new THREE.Vector3();\n/**\n * A replacement of `Object3D.getWorldQuaternion`.\n * Extract the world quaternion of an object from its world space matrix, without calling `Object3D.updateWorldMatrix`.\n * Use this when you're sure that the world matrix is up-to-date.\n *\n * @param object The object\n * @param out A target quaternion\n */\nfunction getWorldQuaternionLite(object, out) {\n    object.matrixWorld.decompose(_position, out, _scale);\n    return out;\n}\n\n/**\n * Calculate azimuth / altitude angles from a vector.\n *\n * This returns a difference of angles from (1, 0, 0).\n * Azimuth represents an angle around Y axis.\n * Altitude represents an angle around Z axis.\n * It is rotated in intrinsic Y-Z order.\n *\n * @param vector The vector\n * @returns A tuple contains two angles, `[ azimuth, altitude ]`\n */\nfunction calcAzimuthAltitude(vector) {\n    return [Math.atan2(-vector.z, vector.x), Math.atan2(vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z))];\n}\n\n/**\n * Make sure the angle is within -PI to PI.\n *\n * @example\n * ```js\n * sanitizeAngle(1.5 * Math.PI) // -0.5 * PI\n * ```\n *\n * @param angle An input angle\n */\nfunction sanitizeAngle(angle) {\n    const roundTurn = Math.round(angle / 2.0 / Math.PI);\n    return angle - 2.0 * Math.PI * roundTurn;\n}\n\nconst VEC3_POSITIVE_Z$1 = new THREE.Vector3(0.0, 0.0, 1.0);\nconst _v3A = new THREE.Vector3();\nconst _v3B = new THREE.Vector3();\nconst _v3C = new THREE.Vector3();\nconst _quatA$1 = new THREE.Quaternion();\nconst _quatB$1 = new THREE.Quaternion();\nconst _quatC = new THREE.Quaternion();\nconst _quatD = new THREE.Quaternion();\nconst _eulerA$1 = new THREE.Euler();\n/**\n * A class controls eye gaze movements of a VRM.\n */\nclass VRMLookAt {\n    /**\n     * Its current angle around Y axis, in degree.\n     */\n    get yaw() {\n        return this._yaw;\n    }\n    /**\n     * Its current angle around Y axis, in degree.\n     */\n    set yaw(value) {\n        this._yaw = value;\n        this._needsUpdate = true;\n    }\n    /**\n     * Its current angle around X axis, in degree.\n     */\n    get pitch() {\n        return this._pitch;\n    }\n    /**\n     * Its current angle around X axis, in degree.\n     */\n    set pitch(value) {\n        this._pitch = value;\n        this._needsUpdate = true;\n    }\n    /**\n     * @deprecated Use {@link getEuler} instead.\n     */\n    get euler() {\n        console.warn('VRMLookAt: euler is deprecated. use getEuler() instead.');\n        return this.getEuler(new THREE.Euler());\n    }\n    /**\n     * Create a new {@link VRMLookAt}.\n     *\n     * @param humanoid A {@link VRMHumanoid}\n     * @param applier A {@link VRMLookAtApplier}\n     */\n    constructor(humanoid, applier) {\n        /**\n         * The origin of LookAt. Position offset from the head bone.\n         */\n        this.offsetFromHeadBone = new THREE.Vector3();\n        /**\n         * If this is true, the LookAt will be updated automatically by calling {@link update}, towarding the direction to the {@link target}.\n         * `true` by default.\n         *\n         * See also: {@link target}\n         */\n        this.autoUpdate = true;\n        /**\n         * The front direction of the face.\n         * Intended to be used for VRM 0.0 compat (VRM 0.0 models are facing Z- instead of Z+).\n         * You usually don't want to touch this.\n         */\n        this.faceFront = new THREE.Vector3(0.0, 0.0, 1.0);\n        this.humanoid = humanoid;\n        this.applier = applier;\n        this._yaw = 0.0;\n        this._pitch = 0.0;\n        this._needsUpdate = true;\n        this._restHeadWorldQuaternion = this.getLookAtWorldQuaternion(new THREE.Quaternion());\n    }\n    /**\n     * Get its yaw-pitch angles as an `Euler`.\n     * Does NOT consider {@link faceFront}; it returns `Euler(0, 0, 0; \"YXZ\")` by default regardless of the faceFront value.\n     *\n     * @param target The target euler\n     */\n    getEuler(target) {\n        return target.set(THREE.MathUtils.DEG2RAD * this._pitch, THREE.MathUtils.DEG2RAD * this._yaw, 0.0, 'YXZ');\n    }\n    /**\n     * Copy the given {@link VRMLookAt} into this one.\n     * {@link humanoid} must be same as the source one.\n     * {@link applier} will reference the same instance as the source one.\n     * @param source The {@link VRMLookAt} you want to copy\n     * @returns this\n     */\n    copy(source) {\n        if (this.humanoid !== source.humanoid) {\n            throw new Error('VRMLookAt: humanoid must be same in order to copy');\n        }\n        this.offsetFromHeadBone.copy(source.offsetFromHeadBone);\n        this.applier = source.applier;\n        this.autoUpdate = source.autoUpdate;\n        this.target = source.target;\n        this.faceFront.copy(source.faceFront);\n        return this;\n    }\n    /**\n     * Returns a clone of this {@link VRMLookAt}.\n     * Note that {@link humanoid} and {@link applier} will reference the same instance as this one.\n     * @returns Copied {@link VRMLookAt}\n     */\n    clone() {\n        return new VRMLookAt(this.humanoid, this.applier).copy(this);\n    }\n    /**\n     * Reset the lookAt direction (yaw and pitch) to the initial direction.\n     */\n    reset() {\n        this._yaw = 0.0;\n        this._pitch = 0.0;\n        this._needsUpdate = true;\n    }\n    /**\n     * Get its lookAt position in world coordinate.\n     *\n     * @param target A target `THREE.Vector3`\n     */\n    getLookAtWorldPosition(target) {\n        const head = this.humanoid.getRawBoneNode('head');\n        return target.copy(this.offsetFromHeadBone).applyMatrix4(head.matrixWorld);\n    }\n    /**\n     * Get its lookAt rotation in world coordinate.\n     * Does NOT consider {@link faceFront}.\n     *\n     * @param target A target `THREE.Quaternion`\n     */\n    getLookAtWorldQuaternion(target) {\n        const head = this.humanoid.getRawBoneNode('head');\n        return getWorldQuaternionLite(head, target);\n    }\n    /**\n     * Get a quaternion that rotates the +Z unit vector of the humanoid Head to the {@link faceFront} direction.\n     *\n     * @param target A target `THREE.Quaternion`\n     */\n    getFaceFrontQuaternion(target) {\n        if (this.faceFront.distanceToSquared(VEC3_POSITIVE_Z$1) < 0.01) {\n            return target.copy(this._restHeadWorldQuaternion).invert();\n        }\n        const [faceFrontAzimuth, faceFrontAltitude] = calcAzimuthAltitude(this.faceFront);\n        _eulerA$1.set(0.0, 0.5 * Math.PI + faceFrontAzimuth, faceFrontAltitude, 'YZX');\n        return target.setFromEuler(_eulerA$1).premultiply(_quatD.copy(this._restHeadWorldQuaternion).invert());\n    }\n    /**\n     * Get its LookAt direction in world coordinate.\n     *\n     * @param target A target `THREE.Vector3`\n     */\n    getLookAtWorldDirection(target) {\n        this.getLookAtWorldQuaternion(_quatB$1);\n        this.getFaceFrontQuaternion(_quatC);\n        return target\n            .copy(VEC3_POSITIVE_Z$1)\n            .applyQuaternion(_quatB$1)\n            .applyQuaternion(_quatC)\n            .applyEuler(this.getEuler(_eulerA$1));\n    }\n    /**\n     * Set its lookAt target position.\n     *\n     * Note that its result will be instantly overwritten if {@link VRMLookAtHead.autoUpdate} is enabled.\n     *\n     * If you want to track an object continuously, you might want to use {@link target} instead.\n     *\n     * @param position A target position, in world space\n     */\n    lookAt(position) {\n        // Look at direction in local coordinate\n        const headRotDiffInv = _quatA$1\n            .copy(this._restHeadWorldQuaternion)\n            .multiply(quatInvertCompat(this.getLookAtWorldQuaternion(_quatB$1)));\n        const headPos = this.getLookAtWorldPosition(_v3B);\n        const lookAtDir = _v3C.copy(position).sub(headPos).applyQuaternion(headRotDiffInv).normalize();\n        // calculate angles\n        const [azimuthFrom, altitudeFrom] = calcAzimuthAltitude(this.faceFront);\n        const [azimuthTo, altitudeTo] = calcAzimuthAltitude(lookAtDir);\n        const yaw = sanitizeAngle(azimuthTo - azimuthFrom);\n        const pitch = sanitizeAngle(altitudeFrom - altitudeTo); // spinning (1, 0, 0) CCW around Z axis makes the vector look up, while spinning (0, 0, 1) CCW around X axis makes the vector look down\n        // apply angles\n        this._yaw = THREE.MathUtils.RAD2DEG * yaw;\n        this._pitch = THREE.MathUtils.RAD2DEG * pitch;\n        this._needsUpdate = true;\n    }\n    /**\n     * Update the VRMLookAtHead.\n     * If {@link autoUpdate} is enabled, this will make it look at the {@link target}.\n     *\n     * @param delta deltaTime, it isn't used though. You can use the parameter if you want to use this in your own extended {@link VRMLookAt}.\n     */\n    update(delta) {\n        if (this.target != null && this.autoUpdate) {\n            this.lookAt(this.target.getWorldPosition(_v3A));\n        }\n        if (this._needsUpdate) {\n            this._needsUpdate = false;\n            this.applier.applyYawPitch(this._yaw, this._pitch);\n        }\n    }\n}\nVRMLookAt.EULER_ORDER = 'YXZ'; // yaw-pitch-roll\n\nconst VEC3_POSITIVE_Z = new THREE.Vector3(0.0, 0.0, 1.0);\nconst _quatA = new THREE.Quaternion();\nconst _quatB = new THREE.Quaternion();\nconst _eulerA = new THREE.Euler(0.0, 0.0, 0.0, 'YXZ');\n/**\n * A class that applies eye gaze directions to a VRM.\n * It will be used by {@link VRMLookAt}.\n */\nclass VRMLookAtBoneApplier {\n    /**\n     * Create a new {@link VRMLookAtBoneApplier}.\n     *\n     * @param humanoid A {@link VRMHumanoid}\n     * @param rangeMapHorizontalInner A {@link VRMLookAtRangeMap} used for inner transverse direction\n     * @param rangeMapHorizontalOuter A {@link VRMLookAtRangeMap} used for outer transverse direction\n     * @param rangeMapVerticalDown A {@link VRMLookAtRangeMap} used for down direction\n     * @param rangeMapVerticalUp A {@link VRMLookAtRangeMap} used for up direction\n     */\n    constructor(humanoid, rangeMapHorizontalInner, rangeMapHorizontalOuter, rangeMapVerticalDown, rangeMapVerticalUp) {\n        this.humanoid = humanoid;\n        this.rangeMapHorizontalInner = rangeMapHorizontalInner;\n        this.rangeMapHorizontalOuter = rangeMapHorizontalOuter;\n        this.rangeMapVerticalDown = rangeMapVerticalDown;\n        this.rangeMapVerticalUp = rangeMapVerticalUp;\n        this.faceFront = new THREE.Vector3(0.0, 0.0, 1.0);\n        // set rest quaternions\n        this._restQuatLeftEye = new THREE.Quaternion();\n        this._restQuatRightEye = new THREE.Quaternion();\n        this._restLeftEyeParentWorldQuat = new THREE.Quaternion();\n        this._restRightEyeParentWorldQuat = new THREE.Quaternion();\n        const leftEye = this.humanoid.getRawBoneNode('leftEye');\n        const rightEye = this.humanoid.getRawBoneNode('rightEye');\n        if (leftEye) {\n            this._restQuatLeftEye.copy(leftEye.quaternion);\n            getWorldQuaternionLite(leftEye.parent, this._restLeftEyeParentWorldQuat);\n        }\n        if (rightEye) {\n            this._restQuatRightEye.copy(rightEye.quaternion);\n            getWorldQuaternionLite(rightEye.parent, this._restRightEyeParentWorldQuat);\n        }\n    }\n    /**\n     * Apply the input angle to its associated VRM model.\n     *\n     * @param yaw Rotation around Y axis, in degree\n     * @param pitch Rotation around X axis, in degree\n     */\n    applyYawPitch(yaw, pitch) {\n        const leftEye = this.humanoid.getRawBoneNode('leftEye');\n        const rightEye = this.humanoid.getRawBoneNode('rightEye');\n        const leftEyeNormalized = this.humanoid.getNormalizedBoneNode('leftEye');\n        const rightEyeNormalized = this.humanoid.getNormalizedBoneNode('rightEye');\n        // left\n        if (leftEye) {\n            if (pitch < 0.0) {\n                _eulerA.x = -THREE.MathUtils.DEG2RAD * this.rangeMapVerticalDown.map(-pitch);\n            }\n            else {\n                _eulerA.x = THREE.MathUtils.DEG2RAD * this.rangeMapVerticalUp.map(pitch);\n            }\n            if (yaw < 0.0) {\n                _eulerA.y = -THREE.MathUtils.DEG2RAD * this.rangeMapHorizontalInner.map(-yaw);\n            }\n            else {\n                _eulerA.y = THREE.MathUtils.DEG2RAD * this.rangeMapHorizontalOuter.map(yaw);\n            }\n            _quatA.setFromEuler(_eulerA);\n            this._getWorldFaceFrontQuat(_quatB);\n            // _quatB * _quatA * _quatB^-1\n            // where _quatA is LookAt rotation\n            // and _quatB is worldFaceFrontQuat\n            leftEyeNormalized.quaternion.copy(_quatB).multiply(_quatA).multiply(_quatB.invert());\n            _quatA.copy(this._restLeftEyeParentWorldQuat);\n            // _quatA^-1 * leftEyeNormalized.quaternion * _quatA * restQuatLeftEye\n            // where _quatA is restLeftEyeParentWorldQuat\n            leftEye.quaternion\n                .copy(leftEyeNormalized.quaternion)\n                .multiply(_quatA)\n                .premultiply(_quatA.invert())\n                .multiply(this._restQuatLeftEye);\n        }\n        // right\n        if (rightEye) {\n            if (pitch < 0.0) {\n                _eulerA.x = -THREE.MathUtils.DEG2RAD * this.rangeMapVerticalDown.map(-pitch);\n            }\n            else {\n                _eulerA.x = THREE.MathUtils.DEG2RAD * this.rangeMapVerticalUp.map(pitch);\n            }\n            if (yaw < 0.0) {\n                _eulerA.y = -THREE.MathUtils.DEG2RAD * this.rangeMapHorizontalOuter.map(-yaw);\n            }\n            else {\n                _eulerA.y = THREE.MathUtils.DEG2RAD * this.rangeMapHorizontalInner.map(yaw);\n            }\n            _quatA.setFromEuler(_eulerA);\n            this._getWorldFaceFrontQuat(_quatB);\n            // _quatB * _quatA * _quatB^-1\n            // where _quatA is LookAt rotation\n            // and _quatB is worldFaceFrontQuat\n            rightEyeNormalized.quaternion.copy(_quatB).multiply(_quatA).multiply(_quatB.invert());\n            _quatA.copy(this._restRightEyeParentWorldQuat);\n            // _quatA^-1 * rightEyeNormalized.quaternion * _quatA * restQuatRightEye\n            // where _quatA is restRightEyeParentWorldQuat\n            rightEye.quaternion\n                .copy(rightEyeNormalized.quaternion)\n                .multiply(_quatA)\n                .premultiply(_quatA.invert())\n                .multiply(this._restQuatRightEye);\n        }\n    }\n    /**\n     * @deprecated Use {@link applyYawPitch} instead.\n     */\n    lookAt(euler) {\n        console.warn('VRMLookAtBoneApplier: lookAt() is deprecated. use apply() instead.');\n        const yaw = THREE.MathUtils.RAD2DEG * euler.y;\n        const pitch = THREE.MathUtils.RAD2DEG * euler.x;\n        this.applyYawPitch(yaw, pitch);\n    }\n    /**\n     * Get a quaternion that rotates the world-space +Z unit vector to the {@link faceFront} direction.\n     *\n     * @param target A target `THREE.Quaternion`\n     */\n    _getWorldFaceFrontQuat(target) {\n        if (this.faceFront.distanceToSquared(VEC3_POSITIVE_Z) < 0.01) {\n            return target.identity();\n        }\n        const [faceFrontAzimuth, faceFrontAltitude] = calcAzimuthAltitude(this.faceFront);\n        _eulerA.set(0.0, 0.5 * Math.PI + faceFrontAzimuth, faceFrontAltitude, 'YZX');\n        return target.setFromEuler(_eulerA);\n    }\n}\n/**\n * Represent its type of applier.\n */\nVRMLookAtBoneApplier.type = 'bone';\n\n/**\n * A class that applies eye gaze directions to a VRM.\n * It will be used by {@link VRMLookAt}.\n */\nclass VRMLookAtExpressionApplier {\n    /**\n     * Create a new {@link VRMLookAtExpressionApplier}.\n     *\n     * @param expressions A {@link VRMExpressionManager}\n     * @param rangeMapHorizontalInner A {@link VRMLookAtRangeMap} used for inner transverse direction\n     * @param rangeMapHorizontalOuter A {@link VRMLookAtRangeMap} used for outer transverse direction\n     * @param rangeMapVerticalDown A {@link VRMLookAtRangeMap} used for down direction\n     * @param rangeMapVerticalUp A {@link VRMLookAtRangeMap} used for up direction\n     */\n    constructor(expressions, rangeMapHorizontalInner, rangeMapHorizontalOuter, rangeMapVerticalDown, rangeMapVerticalUp) {\n        this.expressions = expressions;\n        this.rangeMapHorizontalInner = rangeMapHorizontalInner;\n        this.rangeMapHorizontalOuter = rangeMapHorizontalOuter;\n        this.rangeMapVerticalDown = rangeMapVerticalDown;\n        this.rangeMapVerticalUp = rangeMapVerticalUp;\n    }\n    /**\n     * Apply the input angle to its associated VRM model.\n     *\n     * @param yaw Rotation around Y axis, in degree\n     * @param pitch Rotation around X axis, in degree\n     */\n    applyYawPitch(yaw, pitch) {\n        if (pitch < 0.0) {\n            this.expressions.setValue('lookDown', 0.0);\n            this.expressions.setValue('lookUp', this.rangeMapVerticalUp.map(-pitch));\n        }\n        else {\n            this.expressions.setValue('lookUp', 0.0);\n            this.expressions.setValue('lookDown', this.rangeMapVerticalDown.map(pitch));\n        }\n        if (yaw < 0.0) {\n            this.expressions.setValue('lookLeft', 0.0);\n            this.expressions.setValue('lookRight', this.rangeMapHorizontalOuter.map(-yaw));\n        }\n        else {\n            this.expressions.setValue('lookRight', 0.0);\n            this.expressions.setValue('lookLeft', this.rangeMapHorizontalOuter.map(yaw));\n        }\n    }\n    /**\n     * @deprecated Use {@link applyYawPitch} instead.\n     */\n    lookAt(euler) {\n        console.warn('VRMLookAtBoneApplier: lookAt() is deprecated. use apply() instead.');\n        const yaw = THREE.MathUtils.RAD2DEG * euler.y;\n        const pitch = THREE.MathUtils.RAD2DEG * euler.x;\n        this.applyYawPitch(yaw, pitch);\n    }\n}\n/**\n * Represent its type of applier.\n */\nVRMLookAtExpressionApplier.type = 'expression';\n\nclass VRMLookAtRangeMap {\n    /**\n     * Create a new {@link VRMLookAtRangeMap}.\n     *\n     * @param inputMaxValue The {@link inputMaxValue} of the map\n     * @param outputScale The {@link outputScale} of the map\n     */\n    constructor(inputMaxValue, outputScale) {\n        this.inputMaxValue = inputMaxValue;\n        this.outputScale = outputScale;\n    }\n    /**\n     * Evaluate an input value and output a mapped value.\n     * @param src The input value\n     */\n    map(src) {\n        return this.outputScale * saturate(src / this.inputMaxValue);\n    }\n}\n\n/**\n * Possible spec versions it recognizes.\n */\nconst POSSIBLE_SPEC_VERSIONS$1 = new Set(['1.0', '1.0-beta']);\n/**\n * The minimum permitted value for {@link V1VRMSchema.LookAtRangeMap.inputMaxValue}.\n * If the given value is smaller than this, the loader shows a warning and clamps up the value.\n */\nconst INPUT_MAX_VALUE_MINIMUM = 0.01;\n/**\n * A plugin of GLTFLoader that imports a {@link VRMLookAt} from a VRM extension of a GLTF.\n */\nclass VRMLookAtLoaderPlugin {\n    get name() {\n        // We should use the extension name instead but we have multiple plugins for an extension...\n        return 'VRMLookAtLoaderPlugin';\n    }\n    constructor(parser, options) {\n        this.parser = parser;\n        this.helperRoot = options === null || options === void 0 ? void 0 : options.helperRoot;\n    }\n    afterRoot(gltf) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const vrmHumanoid = gltf.userData.vrmHumanoid;\n            // explicitly distinguish null and undefined\n            // since vrmHumanoid might be null as a result\n            if (vrmHumanoid === null) {\n                return;\n            }\n            else if (vrmHumanoid === undefined) {\n                throw new Error('VRMLookAtLoaderPlugin: vrmHumanoid is undefined. VRMHumanoidLoaderPlugin have to be used first');\n            }\n            const vrmExpressionManager = gltf.userData.vrmExpressionManager;\n            if (vrmExpressionManager === null) {\n                return;\n            }\n            else if (vrmExpressionManager === undefined) {\n                throw new Error('VRMLookAtLoaderPlugin: vrmExpressionManager is undefined. VRMExpressionLoaderPlugin have to be used first');\n            }\n            gltf.userData.vrmLookAt = yield this._import(gltf, vrmHumanoid, vrmExpressionManager);\n        });\n    }\n    /**\n     * Import a {@link VRMLookAt} from a VRM.\n     *\n     * @param gltf A parsed result of GLTF taken from GLTFLoader\n     * @param humanoid A {@link VRMHumanoid} instance that represents the VRM\n     * @param expressions A {@link VRMExpressionManager} instance that represents the VRM\n     */\n    _import(gltf, humanoid, expressions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (humanoid == null || expressions == null) {\n                return null;\n            }\n            const v1Result = yield this._v1Import(gltf, humanoid, expressions);\n            if (v1Result) {\n                return v1Result;\n            }\n            const v0Result = yield this._v0Import(gltf, humanoid, expressions);\n            if (v0Result) {\n                return v0Result;\n            }\n            return null;\n        });\n    }\n    _v1Import(gltf, humanoid, expressions) {\n        var _a, _b, _c;\n        return __awaiter(this, void 0, void 0, function* () {\n            const json = this.parser.json;\n            // early abort if it doesn't use vrm\n            const isVRMUsed = ((_a = json.extensionsUsed) === null || _a === void 0 ? void 0 : _a.indexOf('VRMC_vrm')) !== -1;\n            if (!isVRMUsed) {\n                return null;\n            }\n            const extension = (_b = json.extensions) === null || _b === void 0 ? void 0 : _b['VRMC_vrm'];\n            if (!extension) {\n                return null;\n            }\n            const specVersion = extension.specVersion;\n            if (!POSSIBLE_SPEC_VERSIONS$1.has(specVersion)) {\n                console.warn(`VRMLookAtLoaderPlugin: Unknown VRMC_vrm specVersion \"${specVersion}\"`);\n                return null;\n            }\n            const schemaLookAt = extension.lookAt;\n            if (!schemaLookAt) {\n                return null;\n            }\n            const defaultOutputScale = schemaLookAt.type === 'expression' ? 1.0 : 10.0;\n            const mapHI = this._v1ImportRangeMap(schemaLookAt.rangeMapHorizontalInner, defaultOutputScale);\n            const mapHO = this._v1ImportRangeMap(schemaLookAt.rangeMapHorizontalOuter, defaultOutputScale);\n            const mapVD = this._v1ImportRangeMap(schemaLookAt.rangeMapVerticalDown, defaultOutputScale);\n            const mapVU = this._v1ImportRangeMap(schemaLookAt.rangeMapVerticalUp, defaultOutputScale);\n            let applier;\n            if (schemaLookAt.type === 'expression') {\n                applier = new VRMLookAtExpressionApplier(expressions, mapHI, mapHO, mapVD, mapVU);\n            }\n            else {\n                applier = new VRMLookAtBoneApplier(humanoid, mapHI, mapHO, mapVD, mapVU);\n            }\n            const lookAt = this._importLookAt(humanoid, applier);\n            lookAt.offsetFromHeadBone.fromArray((_c = schemaLookAt.offsetFromHeadBone) !== null && _c !== void 0 ? _c : [0.0, 0.06, 0.0]);\n            return lookAt;\n        });\n    }\n    _v1ImportRangeMap(schemaRangeMap, defaultOutputScale) {\n        var _a, _b;\n        let inputMaxValue = (_a = schemaRangeMap === null || schemaRangeMap === void 0 ? void 0 : schemaRangeMap.inputMaxValue) !== null && _a !== void 0 ? _a : 90.0;\n        const outputScale = (_b = schemaRangeMap === null || schemaRangeMap === void 0 ? void 0 : schemaRangeMap.outputScale) !== null && _b !== void 0 ? _b : defaultOutputScale;\n        // It might cause NaN when `inputMaxValue` is too small\n        // which makes the mesh of the head disappear\n        // See: https://github.com/pixiv/three-vrm/issues/1201\n        if (inputMaxValue < INPUT_MAX_VALUE_MINIMUM) {\n            console.warn('VRMLookAtLoaderPlugin: inputMaxValue of a range map is too small. Consider reviewing the range map!');\n            inputMaxValue = INPUT_MAX_VALUE_MINIMUM;\n        }\n        return new VRMLookAtRangeMap(inputMaxValue, outputScale);\n    }\n    _v0Import(gltf, humanoid, expressions) {\n        var _a, _b, _c, _d;\n        return __awaiter(this, void 0, void 0, function* () {\n            const json = this.parser.json;\n            // early abort if it doesn't use vrm\n            const vrmExt = (_a = json.extensions) === null || _a === void 0 ? void 0 : _a.VRM;\n            if (!vrmExt) {\n                return null;\n            }\n            const schemaFirstPerson = vrmExt.firstPerson;\n            if (!schemaFirstPerson) {\n                return null;\n            }\n            const defaultOutputScale = schemaFirstPerson.lookAtTypeName === 'BlendShape' ? 1.0 : 10.0;\n            const mapHI = this._v0ImportDegreeMap(schemaFirstPerson.lookAtHorizontalInner, defaultOutputScale);\n            const mapHO = this._v0ImportDegreeMap(schemaFirstPerson.lookAtHorizontalOuter, defaultOutputScale);\n            const mapVD = this._v0ImportDegreeMap(schemaFirstPerson.lookAtVerticalDown, defaultOutputScale);\n            const mapVU = this._v0ImportDegreeMap(schemaFirstPerson.lookAtVerticalUp, defaultOutputScale);\n            let applier;\n            if (schemaFirstPerson.lookAtTypeName === 'BlendShape') {\n                applier = new VRMLookAtExpressionApplier(expressions, mapHI, mapHO, mapVD, mapVU);\n            }\n            else {\n                applier = new VRMLookAtBoneApplier(humanoid, mapHI, mapHO, mapVD, mapVU);\n            }\n            const lookAt = this._importLookAt(humanoid, applier);\n            if (schemaFirstPerson.firstPersonBoneOffset) {\n                lookAt.offsetFromHeadBone.set((_b = schemaFirstPerson.firstPersonBoneOffset.x) !== null && _b !== void 0 ? _b : 0.0, (_c = schemaFirstPerson.firstPersonBoneOffset.y) !== null && _c !== void 0 ? _c : 0.06, -((_d = schemaFirstPerson.firstPersonBoneOffset.z) !== null && _d !== void 0 ? _d : 0.0));\n            }\n            else {\n                lookAt.offsetFromHeadBone.set(0.0, 0.06, 0.0);\n            }\n            // VRM 0.0 are facing Z- instead of Z+\n            lookAt.faceFront.set(0.0, 0.0, -1.0);\n            if (applier instanceof VRMLookAtBoneApplier) {\n                applier.faceFront.set(0.0, 0.0, -1.0);\n            }\n            return lookAt;\n        });\n    }\n    _v0ImportDegreeMap(schemaDegreeMap, defaultOutputScale) {\n        var _a, _b;\n        const curve = schemaDegreeMap === null || schemaDegreeMap === void 0 ? void 0 : schemaDegreeMap.curve;\n        if (JSON.stringify(curve) !== '[0,0,0,1,1,1,1,0]') {\n            console.warn('Curves of LookAtDegreeMap defined in VRM 0.0 are not supported');\n        }\n        let xRange = (_a = schemaDegreeMap === null || schemaDegreeMap === void 0 ? void 0 : schemaDegreeMap.xRange) !== null && _a !== void 0 ? _a : 90.0;\n        const yRange = (_b = schemaDegreeMap === null || schemaDegreeMap === void 0 ? void 0 : schemaDegreeMap.yRange) !== null && _b !== void 0 ? _b : defaultOutputScale;\n        // It might cause NaN when `xRange` is too small\n        // which makes the mesh of the head disappear\n        // See: https://github.com/pixiv/three-vrm/issues/1201\n        if (xRange < INPUT_MAX_VALUE_MINIMUM) {\n            console.warn('VRMLookAtLoaderPlugin: xRange of a degree map is too small. Consider reviewing the degree map!');\n            xRange = INPUT_MAX_VALUE_MINIMUM;\n        }\n        return new VRMLookAtRangeMap(xRange, yRange);\n    }\n    _importLookAt(humanoid, applier) {\n        const lookAt = new VRMLookAt(humanoid, applier);\n        if (this.helperRoot) {\n            const helper = new VRMLookAtHelper(lookAt);\n            this.helperRoot.add(helper);\n            helper.renderOrder = this.helperRoot.renderOrder;\n        }\n        return lookAt;\n    }\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * Represents a type of applier.\n */\nconst VRMLookAtTypeName = {\n    Bone: 'bone',\n    Expression: 'expression',\n};\n\n/**\n * Yoinked from https://github.com/mrdoob/three.js/blob/master/examples/jsm/loaders/GLTFLoader.js\n */\nfunction resolveURL(url, path) {\n    // Invalid URL\n    if (typeof url !== 'string' || url === '')\n        return '';\n    // Host Relative URL\n    if (/^https?:\\/\\//i.test(path) && /^\\//.test(url)) {\n        path = path.replace(/(^https?:\\/\\/[^/]+).*/i, '$1');\n    }\n    // Absolute URL http://,https://,//\n    if (/^(https?:)?\\/\\//i.test(url))\n        return url;\n    // Data URI\n    if (/^data:.*,.*$/i.test(url))\n        return url;\n    // Blob URL\n    if (/^blob:.*$/i.test(url))\n        return url;\n    // Relative URL\n    return path + url;\n}\n\n/**\n * Possible spec versions it recognizes.\n */\nconst POSSIBLE_SPEC_VERSIONS = new Set(['1.0', '1.0-beta']);\n/**\n * A plugin of GLTFLoader that imports a {@link VRM1Meta} from a VRM extension of a GLTF.\n */\nclass VRMMetaLoaderPlugin {\n    get name() {\n        // We should use the extension name instead but we have multiple plugins for an extension...\n        return 'VRMMetaLoaderPlugin';\n    }\n    constructor(parser, options) {\n        var _a, _b, _c;\n        this.parser = parser;\n        this.needThumbnailImage = (_a = options === null || options === void 0 ? void 0 : options.needThumbnailImage) !== null && _a !== void 0 ? _a : true;\n        this.acceptLicenseUrls = (_b = options === null || options === void 0 ? void 0 : options.acceptLicenseUrls) !== null && _b !== void 0 ? _b : ['https://vrm.dev/licenses/1.0/'];\n        this.acceptV0Meta = (_c = options === null || options === void 0 ? void 0 : options.acceptV0Meta) !== null && _c !== void 0 ? _c : true;\n    }\n    afterRoot(gltf) {\n        return __awaiter(this, void 0, void 0, function* () {\n            gltf.userData.vrmMeta = yield this._import(gltf);\n        });\n    }\n    _import(gltf) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const v1Result = yield this._v1Import(gltf);\n            if (v1Result != null) {\n                return v1Result;\n            }\n            const v0Result = yield this._v0Import(gltf);\n            if (v0Result != null) {\n                return v0Result;\n            }\n            return null;\n        });\n    }\n    _v1Import(gltf) {\n        var _a, _b, _c;\n        return __awaiter(this, void 0, void 0, function* () {\n            const json = this.parser.json;\n            // early abort if it doesn't use vrm\n            const isVRMUsed = ((_a = json.extensionsUsed) === null || _a === void 0 ? void 0 : _a.indexOf('VRMC_vrm')) !== -1;\n            if (!isVRMUsed) {\n                return null;\n            }\n            const extension = (_b = json.extensions) === null || _b === void 0 ? void 0 : _b['VRMC_vrm'];\n            if (extension == null) {\n                return null;\n            }\n            const specVersion = extension.specVersion;\n            if (!POSSIBLE_SPEC_VERSIONS.has(specVersion)) {\n                console.warn(`VRMMetaLoaderPlugin: Unknown VRMC_vrm specVersion \"${specVersion}\"`);\n                return null;\n            }\n            const schemaMeta = extension.meta;\n            if (!schemaMeta) {\n                return null;\n            }\n            // throw an error if acceptV0Meta is false\n            const licenseUrl = schemaMeta.licenseUrl;\n            const acceptLicenseUrlsSet = new Set(this.acceptLicenseUrls);\n            if (!acceptLicenseUrlsSet.has(licenseUrl)) {\n                throw new Error(`VRMMetaLoaderPlugin: The license url \"${licenseUrl}\" is not accepted`);\n            }\n            let thumbnailImage = undefined;\n            if (this.needThumbnailImage && schemaMeta.thumbnailImage != null) {\n                thumbnailImage = (_c = (yield this._extractGLTFImage(schemaMeta.thumbnailImage))) !== null && _c !== void 0 ? _c : undefined;\n            }\n            return {\n                metaVersion: '1',\n                name: schemaMeta.name,\n                version: schemaMeta.version,\n                authors: schemaMeta.authors,\n                copyrightInformation: schemaMeta.copyrightInformation,\n                contactInformation: schemaMeta.contactInformation,\n                references: schemaMeta.references,\n                thirdPartyLicenses: schemaMeta.thirdPartyLicenses,\n                thumbnailImage,\n                licenseUrl: schemaMeta.licenseUrl,\n                avatarPermission: schemaMeta.avatarPermission,\n                allowExcessivelyViolentUsage: schemaMeta.allowExcessivelyViolentUsage,\n                allowExcessivelySexualUsage: schemaMeta.allowExcessivelySexualUsage,\n                commercialUsage: schemaMeta.commercialUsage,\n                allowPoliticalOrReligiousUsage: schemaMeta.allowPoliticalOrReligiousUsage,\n                allowAntisocialOrHateUsage: schemaMeta.allowAntisocialOrHateUsage,\n                creditNotation: schemaMeta.creditNotation,\n                allowRedistribution: schemaMeta.allowRedistribution,\n                modification: schemaMeta.modification,\n                otherLicenseUrl: schemaMeta.otherLicenseUrl,\n            };\n        });\n    }\n    _v0Import(gltf) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const json = this.parser.json;\n            // early abort if it doesn't use vrm\n            const vrmExt = (_a = json.extensions) === null || _a === void 0 ? void 0 : _a.VRM;\n            if (!vrmExt) {\n                return null;\n            }\n            const schemaMeta = vrmExt.meta;\n            if (!schemaMeta) {\n                return null;\n            }\n            // throw an error if acceptV0Meta is false\n            if (!this.acceptV0Meta) {\n                throw new Error('VRMMetaLoaderPlugin: Attempted to load VRM0.0 meta but acceptV0Meta is false');\n            }\n            // load thumbnail texture\n            let texture;\n            if (this.needThumbnailImage && schemaMeta.texture != null && schemaMeta.texture !== -1) {\n                texture = yield this.parser.getDependency('texture', schemaMeta.texture);\n            }\n            return {\n                metaVersion: '0',\n                allowedUserName: schemaMeta.allowedUserName,\n                author: schemaMeta.author,\n                commercialUssageName: schemaMeta.commercialUssageName,\n                contactInformation: schemaMeta.contactInformation,\n                licenseName: schemaMeta.licenseName,\n                otherLicenseUrl: schemaMeta.otherLicenseUrl,\n                otherPermissionUrl: schemaMeta.otherPermissionUrl,\n                reference: schemaMeta.reference,\n                sexualUssageName: schemaMeta.sexualUssageName,\n                texture: texture !== null && texture !== void 0 ? texture : undefined,\n                title: schemaMeta.title,\n                version: schemaMeta.version,\n                violentUssageName: schemaMeta.violentUssageName,\n            };\n        });\n    }\n    _extractGLTFImage(index) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const json = this.parser.json;\n            const source = (_a = json.images) === null || _a === void 0 ? void 0 : _a[index];\n            if (source == null) {\n                console.warn(`VRMMetaLoaderPlugin: Attempt to use images[${index}] of glTF as a thumbnail but the image doesn't exist`);\n                return null;\n            }\n            // Ref: https://github.com/mrdoob/three.js/blob/r124/examples/jsm/loaders/GLTFLoader.js#L2467\n            // `source.uri` might be a reference to a file\n            let sourceURI = source.uri;\n            // Load the binary as a blob\n            if (source.bufferView != null) {\n                const bufferView = yield this.parser.getDependency('bufferView', source.bufferView);\n                const blob = new Blob([bufferView], { type: source.mimeType });\n                sourceURI = URL.createObjectURL(blob);\n            }\n            if (sourceURI == null) {\n                console.warn(`VRMMetaLoaderPlugin: Attempt to use images[${index}] of glTF as a thumbnail but the image couldn't load properly`);\n                return null;\n            }\n            const loader = new THREE.ImageLoader();\n            return yield loader.loadAsync(resolveURL(sourceURI, this.parser.options.path)).catch((error) => {\n                console.error(error);\n                console.warn('VRMMetaLoaderPlugin: Failed to load a thumbnail image');\n                return null;\n            });\n        });\n    }\n}\n\n/**\n * A class that represents a single VRM model.\n * This class only includes core spec of the VRM (`VRMC_vrm`).\n */\nclass VRMCore {\n    /**\n     * Create a new VRM instance.\n     *\n     * @param params [[VRMParameters]] that represents components of the VRM\n     */\n    constructor(params) {\n        this.scene = params.scene;\n        this.meta = params.meta;\n        this.humanoid = params.humanoid;\n        this.expressionManager = params.expressionManager;\n        this.firstPerson = params.firstPerson;\n        this.lookAt = params.lookAt;\n    }\n    /**\n     * **You need to call this on your update loop.**\n     *\n     * This function updates every VRM components.\n     *\n     * @param delta deltaTime\n     */\n    update(delta) {\n        this.humanoid.update();\n        if (this.lookAt) {\n            this.lookAt.update(delta);\n        }\n        if (this.expressionManager) {\n            this.expressionManager.update();\n        }\n    }\n}\n\nclass VRMCoreLoaderPlugin {\n    get name() {\n        // We should use the extension name instead but we have multiple plugins for an extension...\n        return 'VRMC_vrm';\n    }\n    constructor(parser, options) {\n        var _a, _b, _c, _d, _e;\n        this.parser = parser;\n        const helperRoot = options === null || options === void 0 ? void 0 : options.helperRoot;\n        const autoUpdateHumanBones = options === null || options === void 0 ? void 0 : options.autoUpdateHumanBones;\n        this.expressionPlugin = (_a = options === null || options === void 0 ? void 0 : options.expressionPlugin) !== null && _a !== void 0 ? _a : new VRMExpressionLoaderPlugin(parser);\n        this.firstPersonPlugin = (_b = options === null || options === void 0 ? void 0 : options.firstPersonPlugin) !== null && _b !== void 0 ? _b : new VRMFirstPersonLoaderPlugin(parser);\n        this.humanoidPlugin =\n            (_c = options === null || options === void 0 ? void 0 : options.humanoidPlugin) !== null && _c !== void 0 ? _c : new VRMHumanoidLoaderPlugin(parser, { helperRoot, autoUpdateHumanBones });\n        this.lookAtPlugin = (_d = options === null || options === void 0 ? void 0 : options.lookAtPlugin) !== null && _d !== void 0 ? _d : new VRMLookAtLoaderPlugin(parser, { helperRoot });\n        this.metaPlugin = (_e = options === null || options === void 0 ? void 0 : options.metaPlugin) !== null && _e !== void 0 ? _e : new VRMMetaLoaderPlugin(parser);\n    }\n    afterRoot(gltf) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.metaPlugin.afterRoot(gltf);\n            yield this.humanoidPlugin.afterRoot(gltf);\n            yield this.expressionPlugin.afterRoot(gltf);\n            yield this.lookAtPlugin.afterRoot(gltf);\n            yield this.firstPersonPlugin.afterRoot(gltf);\n            const meta = gltf.userData.vrmMeta;\n            const humanoid = gltf.userData.vrmHumanoid;\n            // meta and humanoid are required to be a VRM.\n            // Don't create VRM if they are null\n            if (meta && humanoid) {\n                const vrmCore = new VRMCore({\n                    scene: gltf.scene,\n                    expressionManager: gltf.userData.vrmExpressionManager,\n                    firstPerson: gltf.userData.vrmFirstPerson,\n                    humanoid,\n                    lookAt: gltf.userData.vrmLookAt,\n                    meta,\n                });\n                gltf.userData.vrmCore = vrmCore;\n            }\n        });\n    }\n}\n\nexport { VRMCore, VRMCoreLoaderPlugin, VRMExpression, VRMExpressionLoaderPlugin, VRMExpressionManager, VRMExpressionMaterialColorBind, VRMExpressionMaterialColorType, VRMExpressionMorphTargetBind, VRMExpressionOverrideType, VRMExpressionPresetName, VRMExpressionTextureTransformBind, VRMFirstPerson, VRMFirstPersonLoaderPlugin, VRMFirstPersonMeshAnnotationType, VRMHumanBoneList, VRMHumanBoneName, VRMHumanBoneParentMap, VRMHumanoid, VRMHumanoidHelper, VRMHumanoidLoaderPlugin, VRMLookAt, VRMLookAtBoneApplier, VRMLookAtExpressionApplier, VRMLookAtHelper, VRMLookAtLoaderPlugin, VRMLookAtRangeMap, VRMLookAtTypeName, VRMMetaLoaderPlugin, VRMRequiredHumanBoneName };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n", "import * as THREE from 'three';\nimport { VRMCore } from '@pixiv/three-vrm-core';\nimport { VRMNodeConstraintManager } from '@pixiv/three-vrm-node-constraint';\nimport { VRMSpringBoneManager } from '@pixiv/three-vrm-springbone';\nimport { VRMParameters } from './VRMParameters';\n\n/**\n * A class that represents a single VRM model.\n */\nexport class VRM extends VRMCore {\n  /**\n   * Contains materials of the VRM.\n   * `update` method of these materials will be called via its {@link VRM.update} method.\n   */\n  public readonly materials?: THREE.Material[];\n\n  /**\n   * A {@link VRMSpringBoneManager} manipulates all spring bones attached on the VRM.\n   * Usually you don't have to care about this property.\n   */\n  public readonly springBoneManager?: VRMSpringBoneManager;\n\n  /**\n   * A {@link VRMNodeConstraintManager} manipulates all constraints attached on the VRM.\n   * Usually you don't have to care about this property.\n   */\n  public readonly nodeConstraintManager?: VRMNodeConstraintManager;\n\n  /**\n   * Create a new VRM instance.\n   *\n   * @param params [[VRMParameters]] that represents components of the VRM\n   */\n  public constructor(params: VRMParameters) {\n    super(params);\n\n    this.materials = params.materials;\n    this.springBoneManager = params.springBoneManager;\n    this.nodeConstraintManager = params.nodeConstraintManager;\n  }\n\n  /**\n   * **You need to call this on your update loop.**\n   *\n   * This function updates every VRM components.\n   *\n   * @param delta deltaTime\n   */\n  public update(delta: number): void {\n    super.update(delta);\n\n    if (this.nodeConstraintManager) {\n      this.nodeConstraintManager.update();\n    }\n\n    if (this.springBoneManager) {\n      this.springBoneManager.update(delta);\n    }\n\n    if (this.materials) {\n      this.materials.forEach((material: any) => {\n        if (material.update) {\n          material.update(delta);\n        }\n      });\n    }\n  }\n}\n", "/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    function next() {\r\n        while (env.stack.length) {\r\n            var rec = env.stack.pop();\r\n            try {\r\n                var result = rec.dispose && rec.dispose.call(rec.value);\r\n                if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n};\r\n", "/*!\n * @pixiv/three-vrm-materials-mtoon v2.1.3\n * MToon (toon material) module for @pixiv/three-vrm\n *\n * Copyright (c) 2020-2024 pixiv Inc.\n * @pixiv/three-vrm-materials-mtoon is distributed under MIT License\n * https://github.com/pixiv/three-vrm/blob/release/LICENSE\n */\nimport * as THREE from 'three';\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nvar vertexShader = \"// #define PHONG\\n\\nvarying vec3 vViewPosition;\\n\\n#ifndef FLAT_SHADED\\n  varying vec3 vNormal;\\n#endif\\n\\n#include <common>\\n\\n// #include <uv_pars_vertex>\\n#ifdef MTOON_USE_UV\\n  varying vec2 vUv;\\n\\n  // COMPAT: pre-r151 uses a common uvTransform\\n  #if THREE_VRM_THREE_REVISION < 151\\n    uniform mat3 uvTransform;\\n  #endif\\n#endif\\n\\n// #include <uv2_pars_vertex>\\n// COMAPT: pre-r151 uses uv2 for lightMap and aoMap\\n#if THREE_VRM_THREE_REVISION < 151\\n  #if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n    attribute vec2 uv2;\\n    varying vec2 vUv2;\\n    uniform mat3 uv2Transform;\\n  #endif\\n#endif\\n\\n// #include <displacementmap_pars_vertex>\\n// #include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\n#ifdef USE_OUTLINEWIDTHMULTIPLYTEXTURE\\n  uniform sampler2D outlineWidthMultiplyTexture;\\n  uniform mat3 outlineWidthMultiplyTextureUvTransform;\\n#endif\\n\\nuniform float outlineWidthFactor;\\n\\nvoid main() {\\n\\n  // #include <uv_vertex>\\n  #ifdef MTOON_USE_UV\\n    // COMPAT: pre-r151 uses a common uvTransform\\n    #if THREE_VRM_THREE_REVISION >= 151\\n      vUv = uv;\\n    #else\\n      vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n    #endif\\n  #endif\\n\\n  // #include <uv2_vertex>\\n  // COMAPT: pre-r151 uses uv2 for lightMap and aoMap\\n  #if THREE_VRM_THREE_REVISION < 151\\n    #if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n      vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n    #endif\\n  #endif\\n\\n  #include <color_vertex>\\n\\n  #include <beginnormal_vertex>\\n  #include <morphnormal_vertex>\\n  #include <skinbase_vertex>\\n  #include <skinnormal_vertex>\\n\\n  // we need this to compute the outline properly\\n  objectNormal = normalize( objectNormal );\\n\\n  #include <defaultnormal_vertex>\\n\\n  #ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\\n    vNormal = normalize( transformedNormal );\\n  #endif\\n\\n  #include <begin_vertex>\\n\\n  #include <morphtarget_vertex>\\n  #include <skinning_vertex>\\n  // #include <displacementmap_vertex>\\n  #include <project_vertex>\\n  #include <logdepthbuf_vertex>\\n  #include <clipping_planes_vertex>\\n\\n  vViewPosition = - mvPosition.xyz;\\n\\n  float outlineTex = 1.0;\\n\\n  #ifdef OUTLINE\\n    #ifdef USE_OUTLINEWIDTHMULTIPLYTEXTURE\\n      vec2 outlineWidthMultiplyTextureUv = ( outlineWidthMultiplyTextureUvTransform * vec3( vUv, 1 ) ).xy;\\n      outlineTex = texture2D( outlineWidthMultiplyTexture, outlineWidthMultiplyTextureUv ).g;\\n    #endif\\n\\n    #ifdef OUTLINE_WIDTH_WORLD\\n      float worldNormalLength = length( transformedNormal );\\n      vec3 outlineOffset = outlineWidthFactor * outlineTex * worldNormalLength * objectNormal;\\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( outlineOffset + transformed, 1.0 );\\n    #endif\\n\\n    #ifdef OUTLINE_WIDTH_SCREEN\\n      vec3 clipNormal = ( projectionMatrix * modelViewMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n      vec2 projectedNormal = normalize( clipNormal.xy );\\n      projectedNormal.x *= projectionMatrix[ 0 ].x / projectionMatrix[ 1 ].y;\\n      gl_Position.xy += 2.0 * outlineWidthFactor * outlineTex * projectedNormal.xy;\\n    #endif\\n\\n    gl_Position.z += 1E-6 * gl_Position.w; // anti-artifact magic\\n  #endif\\n\\n  #include <worldpos_vertex>\\n  // #include <envmap_vertex>\\n  #include <shadowmap_vertex>\\n  #include <fog_vertex>\\n\\n}\";\n\nvar fragmentShader = \"// #define PHONG\\n\\nuniform vec3 litFactor;\\n\\nuniform float opacity;\\n\\nuniform vec3 shadeColorFactor;\\n#ifdef USE_SHADEMULTIPLYTEXTURE\\n  uniform sampler2D shadeMultiplyTexture;\\n  uniform mat3 shadeMultiplyTextureUvTransform;\\n#endif\\n\\nuniform float shadingShiftFactor;\\nuniform float shadingToonyFactor;\\n\\n#ifdef USE_SHADINGSHIFTTEXTURE\\n  uniform sampler2D shadingShiftTexture;\\n  uniform mat3 shadingShiftTextureUvTransform;\\n  uniform float shadingShiftTextureScale;\\n#endif\\n\\nuniform float giEqualizationFactor;\\n\\nuniform vec3 parametricRimColorFactor;\\n#ifdef USE_RIMMULTIPLYTEXTURE\\n  uniform sampler2D rimMultiplyTexture;\\n  uniform mat3 rimMultiplyTextureUvTransform;\\n#endif\\nuniform float rimLightingMixFactor;\\nuniform float parametricRimFresnelPowerFactor;\\nuniform float parametricRimLiftFactor;\\n\\n#ifdef USE_MATCAPTEXTURE\\n  uniform vec3 matcapFactor;\\n  uniform sampler2D matcapTexture;\\n  uniform mat3 matcapTextureUvTransform;\\n#endif\\n\\nuniform vec3 emissive;\\nuniform float emissiveIntensity;\\n\\nuniform vec3 outlineColorFactor;\\nuniform float outlineLightingMixFactor;\\n\\n#ifdef USE_UVANIMATIONMASKTEXTURE\\n  uniform sampler2D uvAnimationMaskTexture;\\n  uniform mat3 uvAnimationMaskTextureUvTransform;\\n#endif\\n\\nuniform float uvAnimationScrollXOffset;\\nuniform float uvAnimationScrollYOffset;\\nuniform float uvAnimationRotationPhase;\\n\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n\\n// #include <uv_pars_fragment>\\n#if ( defined( MTOON_USE_UV ) && !defined( MTOON_UVS_VERTEX_ONLY ) )\\n  varying vec2 vUv;\\n#endif\\n\\n// #include <uv2_pars_fragment>\\n// COMAPT: pre-r151 uses uv2 for lightMap and aoMap\\n#if THREE_VRM_THREE_REVISION < 151\\n  #if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n    varying vec2 vUv2;\\n  #endif\\n#endif\\n\\n#include <map_pars_fragment>\\n\\n#ifdef USE_MAP\\n  uniform mat3 mapUvTransform;\\n#endif\\n\\n// #include <alphamap_pars_fragment>\\n\\n#if THREE_VRM_THREE_REVISION >= 132\\n  #include <alphatest_pars_fragment>\\n#endif\\n\\n#include <aomap_pars_fragment>\\n// #include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n\\n#ifdef USE_EMISSIVEMAP\\n  uniform mat3 emissiveMapUvTransform;\\n#endif\\n\\n// #include <envmap_common_pars_fragment>\\n// #include <envmap_pars_fragment>\\n// #include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n\\n// #include <bsdfs>\\n// COMPAT: pre-r151 doesn't have BRDF_Lambert in <common>\\n#if THREE_VRM_THREE_REVISION < 151\\n  vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\\n    return RECIPROCAL_PI * diffuseColor;\\n  }\\n#endif\\n\\n#include <lights_pars_begin>\\n\\n#if THREE_VRM_THREE_REVISION >= 132\\n  #include <normal_pars_fragment>\\n#endif\\n\\n// #include <lights_phong_pars_fragment>\\nvarying vec3 vViewPosition;\\n\\n#if THREE_VRM_THREE_REVISION < 132\\n  #ifndef FLAT_SHADED\\n    varying vec3 vNormal;\\n  #endif\\n#endif\\n\\nstruct MToonMaterial {\\n  vec3 diffuseColor;\\n  vec3 shadeColor;\\n  float shadingShift;\\n};\\n\\nfloat linearstep( float a, float b, float t ) {\\n  return clamp( ( t - a ) / ( b - a ), 0.0, 1.0 );\\n}\\n\\n/**\\n * Convert NdotL into toon shading factor using shadingShift and shadingToony\\n */\\nfloat getShading(\\n  const in float dotNL,\\n  const in float shadow,\\n  const in float shadingShift\\n) {\\n  float shading = dotNL;\\n  shading = shading + shadingShift;\\n  shading = linearstep( -1.0 + shadingToonyFactor, 1.0 - shadingToonyFactor, shading );\\n  shading *= shadow;\\n  return shading;\\n}\\n\\n/**\\n * Mix diffuseColor and shadeColor using shading factor and light color\\n */\\nvec3 getDiffuse(\\n  const in MToonMaterial material,\\n  const in float shading,\\n  in vec3 lightColor\\n) {\\n  #ifdef DEBUG_LITSHADERATE\\n    return vec3( BRDF_Lambert( shading * lightColor ) );\\n  #endif\\n\\n  #if THREE_VRM_THREE_REVISION < 132\\n    #ifndef PHYSICALLY_CORRECT_LIGHTS\\n      lightColor *= PI;\\n    #endif\\n  #endif\\n\\n  vec3 col = lightColor * BRDF_Lambert( mix( material.shadeColor, material.diffuseColor, shading ) );\\n\\n  // The \\\"comment out if you want to PBR absolutely\\\" line\\n  #ifdef V0_COMPAT_SHADE\\n    col = min( col, material.diffuseColor );\\n  #endif\\n\\n  return col;\\n}\\n\\n// COMPAT: pre-r156 uses a struct GeometricContext\\n#if THREE_VRM_THREE_REVISION >= 157\\n  void RE_Direct_MToon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in MToonMaterial material, const in float shadow, inout ReflectedLight reflectedLight ) {\\n    float dotNL = clamp( dot( geometryNormal, directLight.direction ), -1.0, 1.0 );\\n    vec3 irradiance = directLight.color;\\n\\n    // directSpecular will be used for rim lighting, not an actual specular\\n    reflectedLight.directSpecular += irradiance;\\n\\n    irradiance *= dotNL;\\n\\n    float shading = getShading( dotNL, shadow, material.shadingShift );\\n\\n    // toon shaded diffuse\\n    reflectedLight.directDiffuse += getDiffuse( material, shading, directLight.color );\\n  }\\n\\n  void RE_IndirectDiffuse_MToon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in MToonMaterial material, inout ReflectedLight reflectedLight ) {\\n    // indirect diffuse will use diffuseColor, no shadeColor involved\\n    reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n\\n    // directSpecular will be used for rim lighting, not an actual specular\\n    reflectedLight.directSpecular += irradiance;\\n  }\\n#else\\n  void RE_Direct_MToon( const in IncidentLight directLight, const in GeometricContext geometry, const in MToonMaterial material, const in float shadow, inout ReflectedLight reflectedLight ) {\\n    float dotNL = clamp( dot( geometry.normal, directLight.direction ), -1.0, 1.0 );\\n    vec3 irradiance = directLight.color;\\n\\n    #if THREE_VRM_THREE_REVISION < 132\\n      #ifndef PHYSICALLY_CORRECT_LIGHTS\\n        irradiance *= PI;\\n      #endif\\n    #endif\\n\\n    // directSpecular will be used for rim lighting, not an actual specular\\n    reflectedLight.directSpecular += irradiance;\\n\\n    irradiance *= dotNL;\\n\\n    float shading = getShading( dotNL, shadow, material.shadingShift );\\n\\n    // toon shaded diffuse\\n    reflectedLight.directDiffuse += getDiffuse( material, shading, directLight.color );\\n  }\\n\\n  void RE_IndirectDiffuse_MToon( const in vec3 irradiance, const in GeometricContext geometry, const in MToonMaterial material, inout ReflectedLight reflectedLight ) {\\n    // indirect diffuse will use diffuseColor, no shadeColor involved\\n    reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n\\n    // directSpecular will be used for rim lighting, not an actual specular\\n    reflectedLight.directSpecular += irradiance;\\n  }\\n#endif\\n\\n#define RE_Direct RE_Direct_MToon\\n#define RE_IndirectDiffuse RE_IndirectDiffuse_MToon\\n#define Material_LightProbeLOD( material ) (0)\\n\\n#include <shadowmap_pars_fragment>\\n// #include <bumpmap_pars_fragment>\\n\\n// #include <normalmap_pars_fragment>\\n#ifdef USE_NORMALMAP\\n\\n  uniform sampler2D normalMap;\\n  uniform mat3 normalMapUvTransform;\\n  uniform vec2 normalScale;\\n\\n#endif\\n\\n// COMPAT: USE_NORMALMAP_OBJECTSPACE used to be OBJECTSPACE_NORMALMAP in pre-r151\\n#if defined( USE_NORMALMAP_OBJECTSPACE ) || defined( OBJECTSPACE_NORMALMAP )\\n\\n  uniform mat3 normalMatrix;\\n\\n#endif\\n\\n// COMPAT: USE_NORMALMAP_TANGENTSPACE used to be TANGENTSPACE_NORMALMAP in pre-r151\\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( TANGENTSPACE_NORMALMAP ) )\\n\\n  // Per-Pixel Tangent Space Normal Mapping\\n  // http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\\n\\n  // three-vrm specific change: it requires `uv` as an input in order to support uv scrolls\\n\\n  // Temporary compat against shader change @ Three.js r126, r151\\n  #if THREE_VRM_THREE_REVISION >= 151\\n\\n    mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\\n\\n      vec3 q0 = dFdx( eye_pos.xyz );\\n      vec3 q1 = dFdy( eye_pos.xyz );\\n      vec2 st0 = dFdx( uv.st );\\n      vec2 st1 = dFdy( uv.st );\\n\\n      vec3 N = surf_norm;\\n\\n      vec3 q1perp = cross( q1, N );\\n      vec3 q0perp = cross( N, q0 );\\n\\n      vec3 T = q1perp * st0.x + q0perp * st1.x;\\n      vec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\n      float det = max( dot( T, T ), dot( B, B ) );\\n      float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\\n\\n      return mat3( T * scale, B * scale, N );\\n\\n    }\\n\\n  #elif THREE_VRM_THREE_REVISION >= 126\\n\\n    vec3 perturbNormal2Arb( vec2 uv, vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\\n\\n      vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n      vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n      vec2 st0 = dFdx( uv.st );\\n      vec2 st1 = dFdy( uv.st );\\n\\n      vec3 N = normalize( surf_norm );\\n\\n      vec3 q1perp = cross( q1, N );\\n      vec3 q0perp = cross( N, q0 );\\n\\n      vec3 T = q1perp * st0.x + q0perp * st1.x;\\n      vec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\n      // three-vrm specific change: Workaround for the issue that happens when delta of uv = 0.0\\n      // TODO: Is this still required? Or shall I make a PR about it?\\n      if ( length( T ) == 0.0 || length( B ) == 0.0 ) {\\n        return surf_norm;\\n      }\\n\\n      float det = max( dot( T, T ), dot( B, B ) );\\n      float scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\\n\\n      return normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\\n\\n    }\\n\\n  #else\\n\\n    vec3 perturbNormal2Arb( vec2 uv, vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\\n\\n      // Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\\n\\n      vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n      vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n      vec2 st0 = dFdx( uv.st );\\n      vec2 st1 = dFdy( uv.st );\\n\\n      float scale = sign( st1.t * st0.s - st0.t * st1.s ); // we do not care about the magnitude\\n\\n      vec3 S = ( q0 * st1.t - q1 * st0.t ) * scale;\\n      vec3 T = ( - q0 * st1.s + q1 * st0.s ) * scale;\\n\\n      // three-vrm specific change: Workaround for the issue that happens when delta of uv = 0.0\\n      // TODO: Is this still required? Or shall I make a PR about it?\\n\\n      if ( length( S ) == 0.0 || length( T ) == 0.0 ) {\\n        return surf_norm;\\n      }\\n\\n      S = normalize( S );\\n      T = normalize( T );\\n      vec3 N = normalize( surf_norm );\\n\\n      #ifdef DOUBLE_SIDED\\n\\n        // Workaround for Adreno GPUs gl_FrontFacing bug. See #15850 and #10331\\n\\n        bool frontFacing = dot( cross( S, T ), N ) > 0.0;\\n\\n        mapN.xy *= ( float( frontFacing ) * 2.0 - 1.0 );\\n\\n      #else\\n\\n        mapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\n      #endif\\n\\n      mat3 tsn = mat3( S, T, N );\\n      return normalize( tsn * mapN );\\n\\n    }\\n\\n  #endif\\n\\n#endif\\n\\n// #include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\n\\n// == post correction ==========================================================\\nvoid postCorrection() {\\n  #include <tonemapping_fragment>\\n  #include <colorspace_fragment>\\n  #include <fog_fragment>\\n  #include <premultiplied_alpha_fragment>\\n  #include <dithering_fragment>\\n}\\n\\n// == main procedure ===========================================================\\nvoid main() {\\n  #include <clipping_planes_fragment>\\n\\n  vec2 uv = vec2(0.5, 0.5);\\n\\n  #if ( defined( MTOON_USE_UV ) && !defined( MTOON_UVS_VERTEX_ONLY ) )\\n    uv = vUv;\\n\\n    float uvAnimMask = 1.0;\\n    #ifdef USE_UVANIMATIONMASKTEXTURE\\n      vec2 uvAnimationMaskTextureUv = ( uvAnimationMaskTextureUvTransform * vec3( uv, 1 ) ).xy;\\n      uvAnimMask = texture2D( uvAnimationMaskTexture, uvAnimationMaskTextureUv ).b;\\n    #endif\\n\\n    float uvRotCos = cos( uvAnimationRotationPhase * uvAnimMask );\\n    float uvRotSin = sin( uvAnimationRotationPhase * uvAnimMask );\\n    uv = mat2( uvRotCos, -uvRotSin, uvRotSin, uvRotCos ) * ( uv - 0.5 ) + 0.5;\\n    uv = uv + vec2( uvAnimationScrollXOffset, uvAnimationScrollYOffset ) * uvAnimMask;\\n  #endif\\n\\n  #ifdef DEBUG_UV\\n    gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n    #if ( defined( MTOON_USE_UV ) && !defined( MTOON_UVS_VERTEX_ONLY ) )\\n      gl_FragColor = vec4( uv, 0.0, 1.0 );\\n    #endif\\n    return;\\n  #endif\\n\\n  vec4 diffuseColor = vec4( litFactor, opacity );\\n  ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n  vec3 totalEmissiveRadiance = emissive * emissiveIntensity;\\n\\n  #include <logdepthbuf_fragment>\\n\\n  // #include <map_fragment>\\n  #ifdef USE_MAP\\n    vec2 mapUv = ( mapUvTransform * vec3( uv, 1 ) ).xy;\\n    vec4 sampledDiffuseColor = texture2D( map, mapUv );\\n    #ifdef DECODE_VIDEO_TEXTURE\\n      sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\\n    #endif\\n    diffuseColor *= sampledDiffuseColor;\\n  #endif\\n\\n  // #include <color_fragment>\\n  #if ( defined( USE_COLOR ) && !defined( IGNORE_VERTEX_COLOR ) )\\n    diffuseColor.rgb *= vColor;\\n  #endif\\n\\n  // #include <alphamap_fragment>\\n\\n  #include <alphatest_fragment>\\n\\n  // #include <specularmap_fragment>\\n\\n  // #include <normal_fragment_begin>\\n  float faceDirection = gl_FrontFacing ? 1.0 : -1.0;\\n\\n  #ifdef FLAT_SHADED\\n\\n    vec3 fdx = dFdx( vViewPosition );\\n    vec3 fdy = dFdy( vViewPosition );\\n    vec3 normal = normalize( cross( fdx, fdy ) );\\n\\n  #else\\n\\n    vec3 normal = normalize( vNormal );\\n\\n    #ifdef DOUBLE_SIDED\\n\\n      normal *= faceDirection;\\n\\n    #endif\\n\\n  #endif\\n\\n  #ifdef USE_NORMALMAP\\n\\n    vec2 normalMapUv = ( normalMapUvTransform * vec3( uv, 1 ) ).xy;\\n\\n  #endif\\n\\n  #ifdef USE_NORMALMAP_TANGENTSPACE\\n\\n    #ifdef USE_TANGENT\\n\\n      mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\\n\\n    #else\\n\\n      mat3 tbn = getTangentFrame( - vViewPosition, normal, normalMapUv );\\n\\n    #endif\\n\\n    #if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\\n\\n      tbn[0] *= faceDirection;\\n      tbn[1] *= faceDirection;\\n\\n    #endif\\n\\n  #endif\\n\\n  #ifdef USE_CLEARCOAT_NORMALMAP\\n\\n    #ifdef USE_TANGENT\\n\\n      mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\\n\\n    #else\\n\\n      mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\\n\\n    #endif\\n\\n    #if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\\n\\n      tbn2[0] *= faceDirection;\\n      tbn2[1] *= faceDirection;\\n\\n    #endif\\n\\n  #endif\\n\\n  // non perturbed normal for clearcoat among others\\n\\n  vec3 nonPerturbedNormal = normal;\\n\\n  #ifdef OUTLINE\\n    normal *= -1.0;\\n  #endif\\n\\n  // #include <normal_fragment_maps>\\n\\n  // COMPAT: USE_NORMALMAP_OBJECTSPACE used to be OBJECTSPACE_NORMALMAP in pre-r151\\n  #if defined( USE_NORMALMAP_OBJECTSPACE ) || defined( OBJECTSPACE_NORMALMAP )\\n\\n    normal = texture2D( normalMap, normalMapUv ).xyz * 2.0 - 1.0; // overrides both flatShading and attribute normals\\n\\n    #ifdef FLIP_SIDED\\n\\n      normal = - normal;\\n\\n    #endif\\n\\n    #ifdef DOUBLE_SIDED\\n\\n      // Temporary compat against shader change @ Three.js r126\\n      // See: #21205, #21307, #21299\\n      #if THREE_VRM_THREE_REVISION >= 126\\n\\n        normal = normal * faceDirection;\\n\\n      #else\\n\\n        normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\n      #endif\\n\\n    #endif\\n\\n    normal = normalize( normalMatrix * normal );\\n\\n  // COMPAT: USE_NORMALMAP_TANGENTSPACE used to be TANGENTSPACE_NORMALMAP in pre-r151\\n  #elif defined( USE_NORMALMAP_TANGENTSPACE ) || defined( TANGENTSPACE_NORMALMAP )\\n\\n    vec3 mapN = texture2D( normalMap, normalMapUv ).xyz * 2.0 - 1.0;\\n    mapN.xy *= normalScale;\\n\\n    // COMPAT: pre-r151\\n    #if THREE_VRM_THREE_REVISION >= 151 || defined( USE_TANGENT )\\n\\n      normal = normalize( tbn * mapN );\\n\\n    #else\\n\\n      // pre-r126\\n      #if THREE_VRM_THREE_REVISION >= 126\\n\\n        normal = perturbNormal2Arb( uv, -vViewPosition, normal, mapN, faceDirection );\\n\\n      #else\\n\\n        normal = perturbNormal2Arb( uv, -vViewPosition, normal, mapN );\\n\\n      #endif\\n\\n    #endif\\n\\n  #endif\\n\\n  // #include <emissivemap_fragment>\\n  #ifdef USE_EMISSIVEMAP\\n    vec2 emissiveMapUv = ( emissiveMapUvTransform * vec3( uv, 1 ) ).xy;\\n    totalEmissiveRadiance *= texture2D( emissiveMap, emissiveMapUv ).rgb;\\n  #endif\\n\\n  #ifdef DEBUG_NORMAL\\n    gl_FragColor = vec4( 0.5 + 0.5 * normal, 1.0 );\\n    return;\\n  #endif\\n\\n  // -- MToon: lighting --------------------------------------------------------\\n  // accumulation\\n  // #include <lights_phong_fragment>\\n  MToonMaterial material;\\n\\n  material.diffuseColor = diffuseColor.rgb;\\n\\n  material.shadeColor = shadeColorFactor;\\n  #ifdef USE_SHADEMULTIPLYTEXTURE\\n    vec2 shadeMultiplyTextureUv = ( shadeMultiplyTextureUvTransform * vec3( uv, 1 ) ).xy;\\n    material.shadeColor *= texture2D( shadeMultiplyTexture, shadeMultiplyTextureUv ).rgb;\\n  #endif\\n\\n  #if ( defined( USE_COLOR ) && !defined( IGNORE_VERTEX_COLOR ) )\\n    material.shadeColor.rgb *= vColor;\\n  #endif\\n\\n  material.shadingShift = shadingShiftFactor;\\n  #ifdef USE_SHADINGSHIFTTEXTURE\\n    vec2 shadingShiftTextureUv = ( shadingShiftTextureUvTransform * vec3( uv, 1 ) ).xy;\\n    material.shadingShift += texture2D( shadingShiftTexture, shadingShiftTextureUv ).r * shadingShiftTextureScale;\\n  #endif\\n\\n  // #include <lights_fragment_begin>\\n\\n  // MToon Specific changes:\\n  // Since we want to take shadows into account of shading instead of irradiance,\\n  // we had to modify the codes that multiplies the results of shadowmap into color of direct lights.\\n\\n  // COMPAT: pre-r156 uses a struct GeometricContext\\n  #if THREE_VRM_THREE_REVISION >= 157\\n    vec3 geometryPosition = - vViewPosition;\\n    vec3 geometryNormal = normal;\\n    vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n\\n    vec3 geometryClearcoatNormal;\\n\\n    #ifdef USE_CLEARCOAT\\n\\n      geometryClearcoatNormal = clearcoatNormal;\\n\\n    #endif\\n  #else\\n    GeometricContext geometry;\\n\\n    geometry.position = - vViewPosition;\\n    geometry.normal = normal;\\n    geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n\\n    #ifdef USE_CLEARCOAT\\n\\n      geometry.clearcoatNormal = clearcoatNormal;\\n\\n    #endif\\n  #endif\\n\\n  IncidentLight directLight;\\n\\n  // since these variables will be used in unrolled loop, we have to define in prior\\n  float shadow;\\n\\n  #if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\n    PointLight pointLight;\\n    #if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n    PointLightShadow pointLightShadow;\\n    #endif\\n\\n    #pragma unroll_loop_start\\n    for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\n      pointLight = pointLights[ i ];\\n\\n      // COMPAT: pre-r156 uses a struct GeometricContext\\n      #if THREE_VRM_THREE_REVISION >= 157\\n        getPointLightInfo( pointLight, geometryPosition, directLight );\\n      #elif THREE_VRM_THREE_REVISION >= 132\\n        getPointLightInfo( pointLight, geometry, directLight );\\n      #else\\n        getPointDirectLightIrradiance( pointLight, geometry, directLight );\\n      #endif\\n\\n      shadow = 1.0;\\n      #if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n      pointLightShadow = pointLightShadows[ i ];\\n      // COMPAT: pre-r166\\n      // r166 introduced shadowIntensity\\n      #if THREE_VRM_THREE_REVISION >= 166\\n        shadow = all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n      #else\\n        shadow = all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n      #endif\\n      #endif\\n\\n      // COMPAT: pre-r156 uses a struct GeometricContext\\n      #if THREE_VRM_THREE_REVISION >= 157\\n        RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, shadow, reflectedLight );\\n      #else\\n        RE_Direct( directLight, geometry, material, shadow, reflectedLight );\\n      #endif\\n\\n    }\\n    #pragma unroll_loop_end\\n\\n  #endif\\n\\n  #if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\n    SpotLight spotLight;\\n    #if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n    SpotLightShadow spotLightShadow;\\n    #endif\\n\\n    #pragma unroll_loop_start\\n    for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\n      spotLight = spotLights[ i ];\\n\\n      // COMPAT: pre-r156 uses a struct GeometricContext\\n      #if THREE_VRM_THREE_REVISION >= 157\\n        getSpotLightInfo( spotLight, geometryPosition, directLight );\\n      #elif THREE_VRM_THREE_REVISION >= 132\\n        getSpotLightInfo( spotLight, geometry, directLight );\\n      #else\\n        getSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n      #endif\\n\\n      shadow = 1.0;\\n      #if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n      spotLightShadow = spotLightShadows[ i ];\\n      // COMPAT: pre-r166\\n      // r166 introduced shadowIntensity\\n      #if THREE_VRM_THREE_REVISION >= 166\\n        shadow = all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n      #else\\n        shadow = all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n      #endif\\n      #endif\\n\\n      // COMPAT: pre-r156 uses a struct GeometricContext\\n      #if THREE_VRM_THREE_REVISION >= 157\\n        RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, shadow, reflectedLight );\\n      #else\\n        RE_Direct( directLight, geometry, material, shadow, reflectedLight );\\n      #endif\\n\\n    }\\n    #pragma unroll_loop_end\\n\\n  #endif\\n\\n  #if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\n    DirectionalLight directionalLight;\\n    #if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n    DirectionalLightShadow directionalLightShadow;\\n    #endif\\n\\n    #pragma unroll_loop_start\\n    for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\n      directionalLight = directionalLights[ i ];\\n\\n      // COMPAT: pre-r156 uses a struct GeometricContext\\n      #if THREE_VRM_THREE_REVISION >= 157\\n        getDirectionalLightInfo( directionalLight, directLight );\\n      #elif THREE_VRM_THREE_REVISION >= 132\\n        getDirectionalLightInfo( directionalLight, geometry, directLight );\\n      #else\\n        getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n      #endif\\n\\n      shadow = 1.0;\\n      #if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n      directionalLightShadow = directionalLightShadows[ i ];\\n      // COMPAT: pre-r166\\n      // r166 introduced shadowIntensity\\n      #if THREE_VRM_THREE_REVISION >= 166\\n        shadow = all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n      #else\\n        shadow = all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n      #endif\\n      #endif\\n\\n      // COMPAT: pre-r156 uses a struct GeometricContext\\n      #if THREE_VRM_THREE_REVISION >= 157\\n        RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, shadow, reflectedLight );\\n      #else\\n        RE_Direct( directLight, geometry, material, shadow, reflectedLight );\\n      #endif\\n\\n    }\\n    #pragma unroll_loop_end\\n\\n  #endif\\n\\n  // #if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\n  //   RectAreaLight rectAreaLight;\\n\\n  //   #pragma unroll_loop_start\\n  //   for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\n  //     rectAreaLight = rectAreaLights[ i ];\\n  //     RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\n  //   }\\n  //   #pragma unroll_loop_end\\n\\n  // #endif\\n\\n  #if defined( RE_IndirectDiffuse )\\n\\n    vec3 iblIrradiance = vec3( 0.0 );\\n\\n    vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\n    // COMPAT: pre-r156 uses a struct GeometricContext\\n    // COMPAT: pre-r156 doesn't have a define USE_LIGHT_PROBES\\n    #if THREE_VRM_THREE_REVISION >= 157\\n      #if defined( USE_LIGHT_PROBES )\\n        irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\\n      #endif\\n    #elif THREE_VRM_THREE_REVISION >= 133\\n      irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\\n    #else\\n      irradiance += getLightProbeIrradiance( lightProbe, geometry );\\n    #endif\\n\\n    #if ( NUM_HEMI_LIGHTS > 0 )\\n\\n      #pragma unroll_loop_start\\n      for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\n        // COMPAT: pre-r156 uses a struct GeometricContext\\n        #if THREE_VRM_THREE_REVISION >= 157\\n          irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\\n        #elif THREE_VRM_THREE_REVISION >= 133\\n          irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\\n        #else\\n          irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n        #endif\\n\\n      }\\n      #pragma unroll_loop_end\\n\\n    #endif\\n\\n  #endif\\n\\n  // #if defined( RE_IndirectSpecular )\\n\\n  //   vec3 radiance = vec3( 0.0 );\\n  //   vec3 clearcoatRadiance = vec3( 0.0 );\\n\\n  // #endif\\n\\n  #include <lights_fragment_maps>\\n  #include <lights_fragment_end>\\n\\n  // modulation\\n  #include <aomap_fragment>\\n\\n  vec3 col = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\\n\\n  #ifdef DEBUG_LITSHADERATE\\n    gl_FragColor = vec4( col, diffuseColor.a );\\n    postCorrection();\\n    return;\\n  #endif\\n\\n  // -- MToon: rim lighting -----------------------------------------\\n  vec3 viewDir = normalize( vViewPosition );\\n\\n  #ifndef PHYSICALLY_CORRECT_LIGHTS\\n    reflectedLight.directSpecular /= PI;\\n  #endif\\n  vec3 rimMix = mix( vec3( 1.0 ), reflectedLight.directSpecular, 1.0 );\\n\\n  vec3 rim = parametricRimColorFactor * pow( saturate( 1.0 - dot( viewDir, normal ) + parametricRimLiftFactor ), parametricRimFresnelPowerFactor );\\n\\n  #ifdef USE_MATCAPTEXTURE\\n    {\\n      vec3 x = normalize( vec3( viewDir.z, 0.0, -viewDir.x ) );\\n      vec3 y = cross( viewDir, x ); // guaranteed to be normalized\\n      vec2 sphereUv = 0.5 + 0.5 * vec2( dot( x, normal ), -dot( y, normal ) );\\n      sphereUv = ( matcapTextureUvTransform * vec3( sphereUv, 1 ) ).xy;\\n      vec3 matcap = texture2D( matcapTexture, sphereUv ).rgb;\\n      rim += matcapFactor * matcap;\\n    }\\n  #endif\\n\\n  #ifdef USE_RIMMULTIPLYTEXTURE\\n    vec2 rimMultiplyTextureUv = ( rimMultiplyTextureUvTransform * vec3( uv, 1 ) ).xy;\\n    rim *= texture2D( rimMultiplyTexture, rimMultiplyTextureUv ).rgb;\\n  #endif\\n\\n  col += rimMix * rim;\\n\\n  // -- MToon: Emission --------------------------------------------------------\\n  col += totalEmissiveRadiance;\\n\\n  // #include <envmap_fragment>\\n\\n  // -- Almost done! -----------------------------------------------------------\\n  #if defined( OUTLINE )\\n    col = outlineColorFactor.rgb * mix( vec3( 1.0 ), col, outlineLightingMixFactor );\\n  #endif\\n\\n  #ifdef OPAQUE\\n    diffuseColor.a = 1.0;\\n  #endif\\n\\n  gl_FragColor = vec4( col, diffuseColor.a );\\n  postCorrection();\\n}\\n\";\n\n/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * Specifiers of debug mode of {@link MToonMaterial}.\n *\n * See: {@link MToonMaterial.debugMode}\n */\nconst MToonMaterialDebugMode = {\n    /**\n     * Render normally.\n     */\n    None: 'none',\n    /**\n     * Visualize normals of the surface.\n     */\n    Normal: 'normal',\n    /**\n     * Visualize lit/shade of the surface.\n     */\n    LitShadeRate: 'litShadeRate',\n    /**\n     * Visualize UV of the surface.\n     */\n    UV: 'uv',\n};\n\n/* eslint-disable @typescript-eslint/naming-convention */\nconst MToonMaterialOutlineWidthMode = {\n    None: 'none',\n    WorldCoordinates: 'worldCoordinates',\n    ScreenCoordinates: 'screenCoordinates',\n};\n\nconst encodingColorSpaceMap = {\n    3000: '',\n    3001: 'srgb',\n};\n/**\n * A compat function to get texture color space.\n *\n * COMPAT: pre-r152\n * Starting from Three.js r152, `texture.encoding` is renamed to `texture.colorSpace`.\n * This function will handle the comapt.\n *\n * @param texture The texture you want to get the color space from\n */\nfunction getTextureColorSpace(texture) {\n    if (parseInt(THREE.REVISION, 10) >= 152) {\n        return texture.colorSpace;\n    }\n    else {\n        return encodingColorSpaceMap[texture.encoding];\n    }\n}\n\n/* tslint:disable:member-ordering */\n/**\n * MToon is a material specification that has various features.\n * The spec and implementation are originally founded for Unity engine and this is a port of the material.\n *\n * See: https://github.com/Santarh/MToon\n */\nclass MToonMaterial extends THREE.ShaderMaterial {\n    get color() {\n        return this.uniforms.litFactor.value;\n    }\n    set color(value) {\n        this.uniforms.litFactor.value = value;\n    }\n    get map() {\n        return this.uniforms.map.value;\n    }\n    set map(value) {\n        this.uniforms.map.value = value;\n    }\n    get normalMap() {\n        return this.uniforms.normalMap.value;\n    }\n    set normalMap(value) {\n        this.uniforms.normalMap.value = value;\n    }\n    get normalScale() {\n        return this.uniforms.normalScale.value;\n    }\n    set normalScale(value) {\n        this.uniforms.normalScale.value = value;\n    }\n    get emissive() {\n        return this.uniforms.emissive.value;\n    }\n    set emissive(value) {\n        this.uniforms.emissive.value = value;\n    }\n    get emissiveIntensity() {\n        return this.uniforms.emissiveIntensity.value;\n    }\n    set emissiveIntensity(value) {\n        this.uniforms.emissiveIntensity.value = value;\n    }\n    get emissiveMap() {\n        return this.uniforms.emissiveMap.value;\n    }\n    set emissiveMap(value) {\n        this.uniforms.emissiveMap.value = value;\n    }\n    get shadeColorFactor() {\n        return this.uniforms.shadeColorFactor.value;\n    }\n    set shadeColorFactor(value) {\n        this.uniforms.shadeColorFactor.value = value;\n    }\n    get shadeMultiplyTexture() {\n        return this.uniforms.shadeMultiplyTexture.value;\n    }\n    set shadeMultiplyTexture(value) {\n        this.uniforms.shadeMultiplyTexture.value = value;\n    }\n    get shadingShiftFactor() {\n        return this.uniforms.shadingShiftFactor.value;\n    }\n    set shadingShiftFactor(value) {\n        this.uniforms.shadingShiftFactor.value = value;\n    }\n    get shadingShiftTexture() {\n        return this.uniforms.shadingShiftTexture.value;\n    }\n    set shadingShiftTexture(value) {\n        this.uniforms.shadingShiftTexture.value = value;\n    }\n    get shadingShiftTextureScale() {\n        return this.uniforms.shadingShiftTextureScale.value;\n    }\n    set shadingShiftTextureScale(value) {\n        this.uniforms.shadingShiftTextureScale.value = value;\n    }\n    get shadingToonyFactor() {\n        return this.uniforms.shadingToonyFactor.value;\n    }\n    set shadingToonyFactor(value) {\n        this.uniforms.shadingToonyFactor.value = value;\n    }\n    get giEqualizationFactor() {\n        return this.uniforms.giEqualizationFactor.value;\n    }\n    set giEqualizationFactor(value) {\n        this.uniforms.giEqualizationFactor.value = value;\n    }\n    get matcapFactor() {\n        return this.uniforms.matcapFactor.value;\n    }\n    set matcapFactor(value) {\n        this.uniforms.matcapFactor.value = value;\n    }\n    get matcapTexture() {\n        return this.uniforms.matcapTexture.value;\n    }\n    set matcapTexture(value) {\n        this.uniforms.matcapTexture.value = value;\n    }\n    get parametricRimColorFactor() {\n        return this.uniforms.parametricRimColorFactor.value;\n    }\n    set parametricRimColorFactor(value) {\n        this.uniforms.parametricRimColorFactor.value = value;\n    }\n    get rimMultiplyTexture() {\n        return this.uniforms.rimMultiplyTexture.value;\n    }\n    set rimMultiplyTexture(value) {\n        this.uniforms.rimMultiplyTexture.value = value;\n    }\n    get rimLightingMixFactor() {\n        return this.uniforms.rimLightingMixFactor.value;\n    }\n    set rimLightingMixFactor(value) {\n        this.uniforms.rimLightingMixFactor.value = value;\n    }\n    get parametricRimFresnelPowerFactor() {\n        return this.uniforms.parametricRimFresnelPowerFactor.value;\n    }\n    set parametricRimFresnelPowerFactor(value) {\n        this.uniforms.parametricRimFresnelPowerFactor.value = value;\n    }\n    get parametricRimLiftFactor() {\n        return this.uniforms.parametricRimLiftFactor.value;\n    }\n    set parametricRimLiftFactor(value) {\n        this.uniforms.parametricRimLiftFactor.value = value;\n    }\n    get outlineWidthMultiplyTexture() {\n        return this.uniforms.outlineWidthMultiplyTexture.value;\n    }\n    set outlineWidthMultiplyTexture(value) {\n        this.uniforms.outlineWidthMultiplyTexture.value = value;\n    }\n    get outlineWidthFactor() {\n        return this.uniforms.outlineWidthFactor.value;\n    }\n    set outlineWidthFactor(value) {\n        this.uniforms.outlineWidthFactor.value = value;\n    }\n    get outlineColorFactor() {\n        return this.uniforms.outlineColorFactor.value;\n    }\n    set outlineColorFactor(value) {\n        this.uniforms.outlineColorFactor.value = value;\n    }\n    get outlineLightingMixFactor() {\n        return this.uniforms.outlineLightingMixFactor.value;\n    }\n    set outlineLightingMixFactor(value) {\n        this.uniforms.outlineLightingMixFactor.value = value;\n    }\n    get uvAnimationMaskTexture() {\n        return this.uniforms.uvAnimationMaskTexture.value;\n    }\n    set uvAnimationMaskTexture(value) {\n        this.uniforms.uvAnimationMaskTexture.value = value;\n    }\n    get uvAnimationScrollXOffset() {\n        return this.uniforms.uvAnimationScrollXOffset.value;\n    }\n    set uvAnimationScrollXOffset(value) {\n        this.uniforms.uvAnimationScrollXOffset.value = value;\n    }\n    get uvAnimationScrollYOffset() {\n        return this.uniforms.uvAnimationScrollYOffset.value;\n    }\n    set uvAnimationScrollYOffset(value) {\n        this.uniforms.uvAnimationScrollYOffset.value = value;\n    }\n    get uvAnimationRotationPhase() {\n        return this.uniforms.uvAnimationRotationPhase.value;\n    }\n    set uvAnimationRotationPhase(value) {\n        this.uniforms.uvAnimationRotationPhase.value = value;\n    }\n    /**\n     * When this is `true`, vertex colors will be ignored.\n     * `true` by default.\n     */\n    get ignoreVertexColor() {\n        return this._ignoreVertexColor;\n    }\n    set ignoreVertexColor(value) {\n        this._ignoreVertexColor = value;\n        this.needsUpdate = true;\n    }\n    /**\n     * There is a line of the shader called \"comment out if you want to PBR absolutely\" in VRM0.0 MToon.\n     * When this is true, the material enables the line to make it compatible with the legacy rendering of VRM.\n     * Usually not recommended to turn this on.\n     * `false` by default.\n     */\n    get v0CompatShade() {\n        return this._v0CompatShade;\n    }\n    /**\n     * There is a line of the shader called \"comment out if you want to PBR absolutely\" in VRM0.0 MToon.\n     * When this is true, the material enables the line to make it compatible with the legacy rendering of VRM.\n     * Usually not recommended to turn this on.\n     * `false` by default.\n     */\n    set v0CompatShade(v) {\n        this._v0CompatShade = v;\n        this.needsUpdate = true;\n    }\n    /**\n     * Debug mode for the material.\n     * You can visualize several components for diagnosis using debug mode.\n     *\n     * See: {@link MToonMaterialDebugMode}\n     */\n    get debugMode() {\n        return this._debugMode;\n    }\n    /**\n     * Debug mode for the material.\n     * You can visualize several components for diagnosis using debug mode.\n     *\n     * See: {@link MToonMaterialDebugMode}\n     */\n    set debugMode(m) {\n        this._debugMode = m;\n        this.needsUpdate = true;\n    }\n    get outlineWidthMode() {\n        return this._outlineWidthMode;\n    }\n    set outlineWidthMode(m) {\n        this._outlineWidthMode = m;\n        this.needsUpdate = true;\n    }\n    get isOutline() {\n        return this._isOutline;\n    }\n    set isOutline(b) {\n        this._isOutline = b;\n        this.needsUpdate = true;\n    }\n    /**\n     * Readonly boolean that indicates this is a [[MToonMaterial]].\n     */\n    get isMToonMaterial() {\n        return true;\n    }\n    constructor(parameters = {}) {\n        var _a;\n        super({ vertexShader, fragmentShader });\n        this.uvAnimationScrollXSpeedFactor = 0.0;\n        this.uvAnimationScrollYSpeedFactor = 0.0;\n        this.uvAnimationRotationSpeedFactor = 0.0;\n        /**\n         * Whether the material is affected by fog.\n         * `true` by default.\n         */\n        this.fog = true;\n        /**\n         * Will be read in WebGLPrograms\n         *\n         * See: https://github.com/mrdoob/three.js/blob/4f5236ac3d6f41d904aa58401b40554e8fbdcb15/src/renderers/webgl/WebGLPrograms.js#L190-L191\n         */\n        this.normalMapType = THREE.TangentSpaceNormalMap;\n        /**\n         * When this is `true`, vertex colors will be ignored.\n         * `true` by default.\n         */\n        this._ignoreVertexColor = true;\n        this._v0CompatShade = false;\n        this._debugMode = MToonMaterialDebugMode.None;\n        this._outlineWidthMode = MToonMaterialOutlineWidthMode.None;\n        this._isOutline = false;\n        // override depthWrite with transparentWithZWrite\n        if (parameters.transparentWithZWrite) {\n            parameters.depthWrite = true;\n        }\n        delete parameters.transparentWithZWrite;\n        // == enabling bunch of stuff ==================================================================\n        parameters.fog = true;\n        parameters.lights = true;\n        parameters.clipping = true;\n        // COMPAT: pre-r129\n        // See: https://github.com/mrdoob/three.js/pull/21788\n        if (parseInt(THREE.REVISION, 10) < 129) {\n            parameters.skinning = parameters.skinning || false;\n        }\n        // COMPAT: pre-r131\n        // See: https://github.com/mrdoob/three.js/pull/22169\n        if (parseInt(THREE.REVISION, 10) < 131) {\n            parameters.morphTargets = parameters.morphTargets || false;\n            parameters.morphNormals = parameters.morphNormals || false;\n        }\n        // == uniforms =================================================================================\n        this.uniforms = THREE.UniformsUtils.merge([\n            THREE.UniformsLib.common,\n            THREE.UniformsLib.normalmap,\n            THREE.UniformsLib.emissivemap,\n            THREE.UniformsLib.fog,\n            THREE.UniformsLib.lights,\n            {\n                litFactor: { value: new THREE.Color(1.0, 1.0, 1.0) },\n                mapUvTransform: { value: new THREE.Matrix3() },\n                colorAlpha: { value: 1.0 },\n                normalMapUvTransform: { value: new THREE.Matrix3() },\n                shadeColorFactor: { value: new THREE.Color(0.0, 0.0, 0.0) },\n                shadeMultiplyTexture: { value: null },\n                shadeMultiplyTextureUvTransform: { value: new THREE.Matrix3() },\n                shadingShiftFactor: { value: 0.0 },\n                shadingShiftTexture: { value: null },\n                shadingShiftTextureUvTransform: { value: new THREE.Matrix3() },\n                shadingShiftTextureScale: { value: 1.0 },\n                shadingToonyFactor: { value: 0.9 },\n                giEqualizationFactor: { value: 0.9 },\n                matcapFactor: { value: new THREE.Color(1.0, 1.0, 1.0) },\n                matcapTexture: { value: null },\n                matcapTextureUvTransform: { value: new THREE.Matrix3() },\n                parametricRimColorFactor: { value: new THREE.Color(0.0, 0.0, 0.0) },\n                rimMultiplyTexture: { value: null },\n                rimMultiplyTextureUvTransform: { value: new THREE.Matrix3() },\n                rimLightingMixFactor: { value: 1.0 },\n                parametricRimFresnelPowerFactor: { value: 5.0 },\n                parametricRimLiftFactor: { value: 0.0 },\n                emissive: { value: new THREE.Color(0.0, 0.0, 0.0) },\n                emissiveIntensity: { value: 1.0 },\n                emissiveMapUvTransform: { value: new THREE.Matrix3() },\n                outlineWidthMultiplyTexture: { value: null },\n                outlineWidthMultiplyTextureUvTransform: { value: new THREE.Matrix3() },\n                outlineWidthFactor: { value: 0.0 },\n                outlineColorFactor: { value: new THREE.Color(0.0, 0.0, 0.0) },\n                outlineLightingMixFactor: { value: 1.0 },\n                uvAnimationMaskTexture: { value: null },\n                uvAnimationMaskTextureUvTransform: { value: new THREE.Matrix3() },\n                uvAnimationScrollXOffset: { value: 0.0 },\n                uvAnimationScrollYOffset: { value: 0.0 },\n                uvAnimationRotationPhase: { value: 0.0 },\n            },\n            (_a = parameters.uniforms) !== null && _a !== void 0 ? _a : {},\n        ]);\n        // == finally compile the shader program =======================================================\n        this.setValues(parameters);\n        // == upload uniforms that need to upload ======================================================\n        this._uploadUniformsWorkaround();\n        // == update shader stuff ======================================================================\n        this.customProgramCacheKey = () => [\n            ...Object.entries(this._generateDefines()).map(([token, macro]) => `${token}:${macro}`),\n            this.matcapTexture ? `matcapTextureColorSpace:${getTextureColorSpace(this.matcapTexture)}` : '',\n            this.shadeMultiplyTexture\n                ? `shadeMultiplyTextureColorSpace:${getTextureColorSpace(this.shadeMultiplyTexture)}`\n                : '',\n            this.rimMultiplyTexture ? `rimMultiplyTextureColorSpace:${getTextureColorSpace(this.rimMultiplyTexture)}` : '',\n        ].join(',');\n        this.onBeforeCompile = (shader) => {\n            const threeRevision = parseInt(THREE.REVISION, 10);\n            const defines = Object.entries(Object.assign(Object.assign({}, this._generateDefines()), this.defines))\n                .filter(([token, macro]) => !!macro)\n                .map(([token, macro]) => `#define ${token} ${macro}`)\n                .join('\\n') + '\\n';\n            // -- generate shader code -------------------------------------------------------------------\n            shader.vertexShader = defines + shader.vertexShader;\n            shader.fragmentShader = defines + shader.fragmentShader;\n            // -- compat ---------------------------------------------------------------------------------\n            // COMPAT: pre-r154\n            // Three.js r154 renames the shader chunk <colorspace_fragment> to <encodings_fragment>\n            if (threeRevision < 154) {\n                shader.fragmentShader = shader.fragmentShader.replace('#include <colorspace_fragment>', '#include <encodings_fragment>');\n            }\n            // COMPAT: pre-r132\n            // Three.js r132 introduces new shader chunks <normal_pars_fragment> and <alphatest_pars_fragment>\n            if (threeRevision < 132) {\n                shader.fragmentShader = shader.fragmentShader.replace('#include <normal_pars_fragment>', '');\n                shader.fragmentShader = shader.fragmentShader.replace('#include <alphatest_pars_fragment>', '');\n            }\n        };\n    }\n    /**\n     * Update this material.\n     *\n     * @param delta deltaTime since last update\n     */\n    update(delta) {\n        this._uploadUniformsWorkaround();\n        this._updateUVAnimation(delta);\n    }\n    copy(source) {\n        super.copy(source);\n        // uniforms are already copied at this moment\n        // Beginning from r133, uniform textures will be cloned instead of reference\n        // See: https://github.com/mrdoob/three.js/blob/a8813be04a849bd155f7cf6f1b23d8ee2e0fb48b/examples/jsm/loaders/GLTFLoader.js#L3047\n        // See: https://github.com/mrdoob/three.js/blob/a8813be04a849bd155f7cf6f1b23d8ee2e0fb48b/src/renderers/shaders/UniformsUtils.js#L22\n        // This will leave their `.version` to be `0`\n        // and these textures won't be uploaded to GPU\n        // We are going to workaround this in here\n        // I've opened an issue for this: https://github.com/mrdoob/three.js/issues/22718\n        this.map = source.map;\n        this.normalMap = source.normalMap;\n        this.emissiveMap = source.emissiveMap;\n        this.shadeMultiplyTexture = source.shadeMultiplyTexture;\n        this.shadingShiftTexture = source.shadingShiftTexture;\n        this.matcapTexture = source.matcapTexture;\n        this.rimMultiplyTexture = source.rimMultiplyTexture;\n        this.outlineWidthMultiplyTexture = source.outlineWidthMultiplyTexture;\n        this.uvAnimationMaskTexture = source.uvAnimationMaskTexture;\n        // == copy members =============================================================================\n        this.normalMapType = source.normalMapType;\n        this.uvAnimationScrollXSpeedFactor = source.uvAnimationScrollXSpeedFactor;\n        this.uvAnimationScrollYSpeedFactor = source.uvAnimationScrollYSpeedFactor;\n        this.uvAnimationRotationSpeedFactor = source.uvAnimationRotationSpeedFactor;\n        this.ignoreVertexColor = source.ignoreVertexColor;\n        this.v0CompatShade = source.v0CompatShade;\n        this.debugMode = source.debugMode;\n        this.outlineWidthMode = source.outlineWidthMode;\n        this.isOutline = source.isOutline;\n        // == update shader stuff ======================================================================\n        this.needsUpdate = true;\n        return this;\n    }\n    /**\n     * Update UV animation state.\n     * Intended to be called via {@link update}.\n     * @param delta deltaTime\n     */\n    _updateUVAnimation(delta) {\n        this.uniforms.uvAnimationScrollXOffset.value += delta * this.uvAnimationScrollXSpeedFactor;\n        this.uniforms.uvAnimationScrollYOffset.value += delta * this.uvAnimationScrollYSpeedFactor;\n        this.uniforms.uvAnimationRotationPhase.value += delta * this.uvAnimationRotationSpeedFactor;\n        this.uniformsNeedUpdate = true;\n    }\n    /**\n     * Upload uniforms that need to upload but doesn't automatically because of reasons.\n     * Intended to be called via {@link constructor} and {@link update}.\n     */\n    _uploadUniformsWorkaround() {\n        // workaround: since opacity is defined as a property in THREE.Material\n        // and cannot be overridden as an accessor,\n        // We are going to update opacity here\n        this.uniforms.opacity.value = this.opacity;\n        // workaround: texture transforms are not updated automatically\n        this._updateTextureMatrix(this.uniforms.map, this.uniforms.mapUvTransform);\n        this._updateTextureMatrix(this.uniforms.normalMap, this.uniforms.normalMapUvTransform);\n        this._updateTextureMatrix(this.uniforms.emissiveMap, this.uniforms.emissiveMapUvTransform);\n        this._updateTextureMatrix(this.uniforms.shadeMultiplyTexture, this.uniforms.shadeMultiplyTextureUvTransform);\n        this._updateTextureMatrix(this.uniforms.shadingShiftTexture, this.uniforms.shadingShiftTextureUvTransform);\n        this._updateTextureMatrix(this.uniforms.matcapTexture, this.uniforms.matcapTextureUvTransform);\n        this._updateTextureMatrix(this.uniforms.rimMultiplyTexture, this.uniforms.rimMultiplyTextureUvTransform);\n        this._updateTextureMatrix(this.uniforms.outlineWidthMultiplyTexture, this.uniforms.outlineWidthMultiplyTextureUvTransform);\n        this._updateTextureMatrix(this.uniforms.uvAnimationMaskTexture, this.uniforms.uvAnimationMaskTextureUvTransform);\n        // COMPAT workaround: starting from r132, alphaTest becomes a uniform instead of preprocessor value\n        const threeRevision = parseInt(THREE.REVISION, 10);\n        if (threeRevision >= 132) {\n            this.uniforms.alphaTest.value = this.alphaTest;\n        }\n        this.uniformsNeedUpdate = true;\n    }\n    /**\n     * Returns a map object of preprocessor token and macro of the shader program.\n     */\n    _generateDefines() {\n        const threeRevision = parseInt(THREE.REVISION, 10);\n        const useUvInVert = this.outlineWidthMultiplyTexture !== null;\n        const useUvInFrag = this.map !== null ||\n            this.normalMap !== null ||\n            this.emissiveMap !== null ||\n            this.shadeMultiplyTexture !== null ||\n            this.shadingShiftTexture !== null ||\n            this.rimMultiplyTexture !== null ||\n            this.uvAnimationMaskTexture !== null;\n        return {\n            // Temporary compat against shader change @ Three.js r126\n            // See: #21205, #21307, #21299\n            THREE_VRM_THREE_REVISION: threeRevision,\n            OUTLINE: this._isOutline,\n            MTOON_USE_UV: useUvInVert || useUvInFrag,\n            MTOON_UVS_VERTEX_ONLY: useUvInVert && !useUvInFrag,\n            V0_COMPAT_SHADE: this._v0CompatShade,\n            USE_SHADEMULTIPLYTEXTURE: this.shadeMultiplyTexture !== null,\n            USE_SHADINGSHIFTTEXTURE: this.shadingShiftTexture !== null,\n            USE_MATCAPTEXTURE: this.matcapTexture !== null,\n            USE_RIMMULTIPLYTEXTURE: this.rimMultiplyTexture !== null,\n            USE_OUTLINEWIDTHMULTIPLYTEXTURE: this._isOutline && this.outlineWidthMultiplyTexture !== null,\n            USE_UVANIMATIONMASKTEXTURE: this.uvAnimationMaskTexture !== null,\n            IGNORE_VERTEX_COLOR: this._ignoreVertexColor === true,\n            DEBUG_NORMAL: this._debugMode === 'normal',\n            DEBUG_LITSHADERATE: this._debugMode === 'litShadeRate',\n            DEBUG_UV: this._debugMode === 'uv',\n            OUTLINE_WIDTH_WORLD: this._isOutline && this._outlineWidthMode === MToonMaterialOutlineWidthMode.WorldCoordinates,\n            OUTLINE_WIDTH_SCREEN: this._isOutline && this._outlineWidthMode === MToonMaterialOutlineWidthMode.ScreenCoordinates,\n        };\n    }\n    _updateTextureMatrix(src, dst) {\n        if (src.value) {\n            if (src.value.matrixAutoUpdate) {\n                src.value.updateMatrix();\n            }\n            dst.value.copy(src.value.matrix);\n        }\n    }\n}\n\nconst colorSpaceEncodingMap = {\n    '': 3000,\n    srgb: 3001,\n};\n/**\n * A compat function to set texture color space.\n *\n * COMPAT: pre-r152\n * Starting from Three.js r152, `texture.encoding` is renamed to `texture.colorSpace`.\n * This function will handle the comapt.\n *\n * @param texture The texture you want to set the color space to\n * @param colorSpace The color space you want to set to the texture\n */\nfunction setTextureColorSpace(texture, colorSpace) {\n    if (parseInt(THREE.REVISION, 10) >= 152) {\n        texture.colorSpace = colorSpace;\n    }\n    else {\n        texture.encoding = colorSpaceEncodingMap[colorSpace];\n    }\n}\n\n/**\n * MaterialParameters hates `undefined`. This helper automatically rejects assign of these `undefined`.\n * It also handles asynchronous process of textures.\n * Make sure await for {@link GLTFMToonMaterialParamsAssignHelper.pending}.\n */\nclass GLTFMToonMaterialParamsAssignHelper {\n    get pending() {\n        return Promise.all(this._pendings);\n    }\n    constructor(parser, materialParams) {\n        this._parser = parser;\n        this._materialParams = materialParams;\n        this._pendings = [];\n    }\n    assignPrimitive(key, value) {\n        if (value != null) {\n            this._materialParams[key] = value;\n        }\n    }\n    assignColor(key, value, convertSRGBToLinear) {\n        if (value != null) {\n            this._materialParams[key] = new THREE.Color().fromArray(value);\n            if (convertSRGBToLinear) {\n                this._materialParams[key].convertSRGBToLinear();\n            }\n        }\n    }\n    assignTexture(key, texture, isColorTexture) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const promise = (() => __awaiter(this, void 0, void 0, function* () {\n                if (texture != null) {\n                    yield this._parser.assignTexture(this._materialParams, key, texture);\n                    if (isColorTexture) {\n                        setTextureColorSpace(this._materialParams[key], 'srgb');\n                    }\n                }\n            }))();\n            this._pendings.push(promise);\n            return promise;\n        });\n    }\n    assignTextureByIndex(key, textureIndex, isColorTexture) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.assignTexture(key, textureIndex != null ? { index: textureIndex } : undefined, isColorTexture);\n        });\n    }\n}\n\n/**\n * Possible spec versions it recognizes.\n */\nconst POSSIBLE_SPEC_VERSIONS = new Set(['1.0', '1.0-beta']);\nclass MToonMaterialLoaderPlugin {\n    get name() {\n        return MToonMaterialLoaderPlugin.EXTENSION_NAME;\n    }\n    constructor(parser, options = {}) {\n        var _a, _b, _c;\n        this.parser = parser;\n        this.renderOrderOffset = (_a = options.renderOrderOffset) !== null && _a !== void 0 ? _a : 0;\n        this.v0CompatShade = (_b = options.v0CompatShade) !== null && _b !== void 0 ? _b : false;\n        this.debugMode = (_c = options.debugMode) !== null && _c !== void 0 ? _c : 'none';\n        this._mToonMaterialSet = new Set();\n    }\n    beforeRoot() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._removeUnlitExtensionIfMToonExists();\n        });\n    }\n    afterRoot(gltf) {\n        return __awaiter(this, void 0, void 0, function* () {\n            gltf.userData.vrmMToonMaterials = Array.from(this._mToonMaterialSet);\n        });\n    }\n    getMaterialType(materialIndex) {\n        const v1Extension = this._getMToonExtension(materialIndex);\n        if (v1Extension) {\n            return MToonMaterial;\n        }\n        return null;\n    }\n    extendMaterialParams(materialIndex, materialParams) {\n        const extension = this._getMToonExtension(materialIndex);\n        if (extension) {\n            return this._extendMaterialParams(extension, materialParams);\n        }\n        return null;\n    }\n    loadMesh(meshIndex) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const parser = this.parser;\n            const json = parser.json;\n            const meshDef = (_a = json.meshes) === null || _a === void 0 ? void 0 : _a[meshIndex];\n            if (meshDef == null) {\n                throw new Error(`MToonMaterialLoaderPlugin: Attempt to use meshes[${meshIndex}] of glTF but the mesh doesn't exist`);\n            }\n            const primitivesDef = meshDef.primitives;\n            const meshOrGroup = yield parser.loadMesh(meshIndex);\n            if (primitivesDef.length === 1) {\n                const mesh = meshOrGroup;\n                const materialIndex = primitivesDef[0].material;\n                if (materialIndex != null) {\n                    this._setupPrimitive(mesh, materialIndex);\n                }\n            }\n            else {\n                const group = meshOrGroup;\n                for (let i = 0; i < primitivesDef.length; i++) {\n                    const mesh = group.children[i];\n                    const materialIndex = primitivesDef[i].material;\n                    if (materialIndex != null) {\n                        this._setupPrimitive(mesh, materialIndex);\n                    }\n                }\n            }\n            return meshOrGroup;\n        });\n    }\n    /**\n     * Delete use of `KHR_materials_unlit` from its `materials` if the material is using MToon.\n     *\n     * Since GLTFLoader have so many hardcoded procedure related to `KHR_materials_unlit`\n     * we have to delete the extension before we start to parse the glTF.\n     */\n    _removeUnlitExtensionIfMToonExists() {\n        const parser = this.parser;\n        const json = parser.json;\n        const materialDefs = json.materials;\n        materialDefs === null || materialDefs === void 0 ? void 0 : materialDefs.map((materialDef, iMaterial) => {\n            var _a;\n            const extension = this._getMToonExtension(iMaterial);\n            if (extension && ((_a = materialDef.extensions) === null || _a === void 0 ? void 0 : _a['KHR_materials_unlit'])) {\n                delete materialDef.extensions['KHR_materials_unlit'];\n            }\n        });\n    }\n    _getMToonExtension(materialIndex) {\n        var _a, _b;\n        const parser = this.parser;\n        const json = parser.json;\n        const materialDef = (_a = json.materials) === null || _a === void 0 ? void 0 : _a[materialIndex];\n        if (materialDef == null) {\n            console.warn(`MToonMaterialLoaderPlugin: Attempt to use materials[${materialIndex}] of glTF but the material doesn't exist`);\n            return undefined;\n        }\n        const extension = (_b = materialDef.extensions) === null || _b === void 0 ? void 0 : _b[MToonMaterialLoaderPlugin.EXTENSION_NAME];\n        if (extension == null) {\n            return undefined;\n        }\n        const specVersion = extension.specVersion;\n        if (!POSSIBLE_SPEC_VERSIONS.has(specVersion)) {\n            console.warn(`MToonMaterialLoaderPlugin: Unknown ${MToonMaterialLoaderPlugin.EXTENSION_NAME} specVersion \"${specVersion}\"`);\n            return undefined;\n        }\n        return extension;\n    }\n    _extendMaterialParams(extension, materialParams) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            // Removing material params that is not required to supress warnings.\n            delete materialParams.metalness;\n            delete materialParams.roughness;\n            const assignHelper = new GLTFMToonMaterialParamsAssignHelper(this.parser, materialParams);\n            assignHelper.assignPrimitive('transparentWithZWrite', extension.transparentWithZWrite);\n            assignHelper.assignColor('shadeColorFactor', extension.shadeColorFactor);\n            assignHelper.assignTexture('shadeMultiplyTexture', extension.shadeMultiplyTexture, true);\n            assignHelper.assignPrimitive('shadingShiftFactor', extension.shadingShiftFactor);\n            assignHelper.assignTexture('shadingShiftTexture', extension.shadingShiftTexture, true);\n            assignHelper.assignPrimitive('shadingShiftTextureScale', (_a = extension.shadingShiftTexture) === null || _a === void 0 ? void 0 : _a.scale);\n            assignHelper.assignPrimitive('shadingToonyFactor', extension.shadingToonyFactor);\n            assignHelper.assignPrimitive('giEqualizationFactor', extension.giEqualizationFactor);\n            assignHelper.assignColor('matcapFactor', extension.matcapFactor);\n            assignHelper.assignTexture('matcapTexture', extension.matcapTexture, true);\n            assignHelper.assignColor('parametricRimColorFactor', extension.parametricRimColorFactor);\n            assignHelper.assignTexture('rimMultiplyTexture', extension.rimMultiplyTexture, true);\n            assignHelper.assignPrimitive('rimLightingMixFactor', extension.rimLightingMixFactor);\n            assignHelper.assignPrimitive('parametricRimFresnelPowerFactor', extension.parametricRimFresnelPowerFactor);\n            assignHelper.assignPrimitive('parametricRimLiftFactor', extension.parametricRimLiftFactor);\n            assignHelper.assignPrimitive('outlineWidthMode', extension.outlineWidthMode);\n            assignHelper.assignPrimitive('outlineWidthFactor', extension.outlineWidthFactor);\n            assignHelper.assignTexture('outlineWidthMultiplyTexture', extension.outlineWidthMultiplyTexture, false);\n            assignHelper.assignColor('outlineColorFactor', extension.outlineColorFactor);\n            assignHelper.assignPrimitive('outlineLightingMixFactor', extension.outlineLightingMixFactor);\n            assignHelper.assignTexture('uvAnimationMaskTexture', extension.uvAnimationMaskTexture, false);\n            assignHelper.assignPrimitive('uvAnimationScrollXSpeedFactor', extension.uvAnimationScrollXSpeedFactor);\n            assignHelper.assignPrimitive('uvAnimationScrollYSpeedFactor', extension.uvAnimationScrollYSpeedFactor);\n            assignHelper.assignPrimitive('uvAnimationRotationSpeedFactor', extension.uvAnimationRotationSpeedFactor);\n            assignHelper.assignPrimitive('v0CompatShade', this.v0CompatShade);\n            assignHelper.assignPrimitive('debugMode', this.debugMode);\n            yield assignHelper.pending;\n        });\n    }\n    /**\n     * This will do two processes that is required to render MToon properly.\n     *\n     * - Set render order\n     * - Generate outline\n     *\n     * @param mesh A target GLTF primitive\n     * @param materialIndex The material index of the primitive\n     */\n    _setupPrimitive(mesh, materialIndex) {\n        const extension = this._getMToonExtension(materialIndex);\n        if (extension) {\n            const renderOrder = this._parseRenderOrder(extension);\n            mesh.renderOrder = renderOrder + this.renderOrderOffset;\n            this._generateOutline(mesh);\n            this._addToMaterialSet(mesh);\n            return;\n        }\n    }\n    /**\n     * Generate outline for the given mesh, if it needs.\n     *\n     * @param mesh The target mesh\n     */\n    _generateOutline(mesh) {\n        // OK, it's the hacky part.\n        // We are going to duplicate the MToonMaterial for outline use.\n        // Then we are going to create two geometry groups and refer same buffer but different material.\n        // It's how we draw two materials at once using a single mesh.\n        // make sure the material is mtoon\n        const surfaceMaterial = mesh.material;\n        if (!(surfaceMaterial instanceof MToonMaterial)) {\n            return;\n        }\n        // check whether we really have to prepare outline or not\n        if (surfaceMaterial.outlineWidthMode === 'none' || surfaceMaterial.outlineWidthFactor <= 0.0) {\n            return;\n        }\n        // make its material an array\n        mesh.material = [surfaceMaterial]; // mesh.material is guaranteed to be a Material in GLTFLoader\n        // duplicate the material for outline use\n        const outlineMaterial = surfaceMaterial.clone();\n        outlineMaterial.name += ' (Outline)';\n        outlineMaterial.isOutline = true;\n        outlineMaterial.side = THREE.BackSide;\n        mesh.material.push(outlineMaterial);\n        // make two geometry groups out of a same buffer\n        const geometry = mesh.geometry; // mesh.geometry is guaranteed to be a BufferGeometry in GLTFLoader\n        const primitiveVertices = geometry.index ? geometry.index.count : geometry.attributes.position.count / 3;\n        geometry.addGroup(0, primitiveVertices, 0);\n        geometry.addGroup(0, primitiveVertices, 1);\n    }\n    _addToMaterialSet(mesh) {\n        const materialOrMaterials = mesh.material;\n        const materialSet = new Set();\n        if (Array.isArray(materialOrMaterials)) {\n            materialOrMaterials.forEach((material) => materialSet.add(material));\n        }\n        else {\n            materialSet.add(materialOrMaterials);\n        }\n        for (const material of materialSet) {\n            if (material instanceof MToonMaterial) {\n                this._mToonMaterialSet.add(material);\n            }\n        }\n    }\n    _parseRenderOrder(extension) {\n        var _a;\n        // transparentWithZWrite ranges from 0 to +9\n        // mere transparent ranges from -9 to 0\n        const enabledZWrite = extension.transparentWithZWrite;\n        return (enabledZWrite ? 0 : 19) + ((_a = extension.renderQueueOffsetNumber) !== null && _a !== void 0 ? _a : 0);\n    }\n}\nMToonMaterialLoaderPlugin.EXTENSION_NAME = 'VRMC_materials_mtoon';\n\nexport { MToonMaterial, MToonMaterialDebugMode, MToonMaterialLoaderPlugin, MToonMaterialOutlineWidthMode };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n", "/*!\n * @pixiv/three-vrm-materials-hdr-emissive-multiplier v2.1.3\n * Support VRMC_hdr_emissiveMultiplier for @pixiv/three-vrm\n *\n * Copyright (c) 2020-2024 pixiv Inc.\n * @pixiv/three-vrm-materials-hdr-emissive-multiplier is distributed under MIT License\n * https://github.com/pixiv/three-vrm/blob/release/LICENSE\n */\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nclass VRMMaterialsHDREmissiveMultiplierLoaderPlugin {\n    get name() {\n        return VRMMaterialsHDREmissiveMultiplierLoaderPlugin.EXTENSION_NAME;\n    }\n    constructor(parser) {\n        this.parser = parser;\n    }\n    extendMaterialParams(materialIndex, materialParams) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const extension = this._getHDREmissiveMultiplierExtension(materialIndex);\n            if (extension == null) {\n                return;\n            }\n            // This extension is archived. Emit warning\n            // See: https://github.com/vrm-c/vrm-specification/pull/375\n            console.warn('VRMMaterialsHDREmissiveMultiplierLoaderPlugin: `VRMC_materials_hdr_emissiveMultiplier` is archived. Use `KHR_materials_emissive_strength` instead.');\n            const emissiveMultiplier = extension.emissiveMultiplier;\n            materialParams.emissiveIntensity = emissiveMultiplier;\n        });\n    }\n    _getHDREmissiveMultiplierExtension(materialIndex) {\n        var _a, _b;\n        const parser = this.parser;\n        const json = parser.json;\n        const materialDef = (_a = json.materials) === null || _a === void 0 ? void 0 : _a[materialIndex];\n        if (materialDef == null) {\n            console.warn(`VRMMaterialsHDREmissiveMultiplierLoaderPlugin: Attempt to use materials[${materialIndex}] of glTF but the material doesn't exist`);\n            return undefined;\n        }\n        const extension = (_b = materialDef.extensions) === null || _b === void 0 ? void 0 : _b[VRMMaterialsHDREmissiveMultiplierLoaderPlugin.EXTENSION_NAME];\n        if (extension == null) {\n            return undefined;\n        }\n        return extension;\n    }\n}\nVRMMaterialsHDREmissiveMultiplierLoaderPlugin.EXTENSION_NAME = 'VRMC_materials_hdr_emissiveMultiplier';\n\nexport { VRMMaterialsHDREmissiveMultiplierLoaderPlugin };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n", "/*!\n * @pixiv/three-vrm-materials-v0compat v2.1.3\n * VRM0.0 materials compatibility layer plugin for @pixiv/three-vrm\n *\n * Copyright (c) 2020-2024 pixiv Inc.\n * @pixiv/three-vrm-materials-v0compat is distributed under MIT License\n * https://github.com/pixiv/three-vrm/blob/release/LICENSE\n */\nimport * as THREE from 'three';\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nfunction gammaEOTF(e) {\n    return Math.pow(e, 2.2);\n}\n\nclass VRMMaterialsV0CompatPlugin {\n    get name() {\n        return 'VRMMaterialsV0CompatPlugin';\n    }\n    constructor(parser) {\n        var _a;\n        this.parser = parser;\n        this._renderQueueMapTransparent = new Map();\n        this._renderQueueMapTransparentZWrite = new Map();\n        // WORKAROUND: Add KHR_texture_transform to extensionsUsed\n        // It is too late to add this in beforeRoot\n        const json = this.parser.json;\n        json.extensionsUsed = (_a = json.extensionsUsed) !== null && _a !== void 0 ? _a : [];\n        if (json.extensionsUsed.indexOf('KHR_texture_transform') === -1) {\n            json.extensionsUsed.push('KHR_texture_transform');\n        }\n    }\n    beforeRoot() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const json = this.parser.json;\n            // early abort if it doesn't use V0VRM\n            const v0VRMExtension = (_a = json.extensions) === null || _a === void 0 ? void 0 : _a['VRM'];\n            const v0MaterialProperties = v0VRMExtension === null || v0VRMExtension === void 0 ? void 0 : v0VRMExtension.materialProperties;\n            if (!v0MaterialProperties) {\n                return;\n            }\n            // populate render queue map\n            this._populateRenderQueueMap(v0MaterialProperties);\n            // convert V0 material properties into V1 compatible format\n            v0MaterialProperties.forEach((materialProperties, materialIndex) => {\n                var _a, _b;\n                const materialDef = (_a = json.materials) === null || _a === void 0 ? void 0 : _a[materialIndex];\n                if (materialDef == null) {\n                    console.warn(`VRMMaterialsV0CompatPlugin: Attempt to use materials[${materialIndex}] of glTF but the material doesn't exist`);\n                    return;\n                }\n                if (materialProperties.shader === 'VRM/MToon') {\n                    const material = this._parseV0MToonProperties(materialProperties, materialDef);\n                    json.materials[materialIndex] = material;\n                }\n                else if ((_b = materialProperties.shader) === null || _b === void 0 ? void 0 : _b.startsWith('VRM/Unlit')) {\n                    const material = this._parseV0UnlitProperties(materialProperties, materialDef);\n                    json.materials[materialIndex] = material;\n                }\n                else if (materialProperties.shader === 'VRM_USE_GLTFSHADER') ;\n                else {\n                    console.warn(`VRMMaterialsV0CompatPlugin: Unknown shader: ${materialProperties.shader}`);\n                }\n            });\n        });\n    }\n    _parseV0MToonProperties(materialProperties, schemaMaterial) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30;\n        const isTransparent = (_b = (_a = materialProperties.keywordMap) === null || _a === void 0 ? void 0 : _a['_ALPHABLEND_ON']) !== null && _b !== void 0 ? _b : false;\n        const enabledZWrite = ((_c = materialProperties.floatProperties) === null || _c === void 0 ? void 0 : _c['_ZWrite']) === 1;\n        const transparentWithZWrite = enabledZWrite && isTransparent;\n        const renderQueueOffsetNumber = this._v0ParseRenderQueue(materialProperties);\n        const isCutoff = (_e = (_d = materialProperties.keywordMap) === null || _d === void 0 ? void 0 : _d['_ALPHATEST_ON']) !== null && _e !== void 0 ? _e : false;\n        const alphaMode = isTransparent ? 'BLEND' : isCutoff ? 'MASK' : 'OPAQUE';\n        const alphaCutoff = isCutoff ? (_g = (_f = materialProperties.floatProperties) === null || _f === void 0 ? void 0 : _f['_Cutoff']) !== null && _g !== void 0 ? _g : 0.5 : undefined;\n        const cullMode = (_j = (_h = materialProperties.floatProperties) === null || _h === void 0 ? void 0 : _h['_CullMode']) !== null && _j !== void 0 ? _j : 2; // enum, { Off, Front, Back }\n        const doubleSided = cullMode === 0;\n        const textureTransformExt = this._portTextureTransform(materialProperties);\n        const baseColorFactor = ((_l = (_k = materialProperties.vectorProperties) === null || _k === void 0 ? void 0 : _k['_Color']) !== null && _l !== void 0 ? _l : [1.0, 1.0, 1.0, 1.0]).map((v, i) => (i === 3 ? v : gammaEOTF(v)));\n        const baseColorTextureIndex = (_m = materialProperties.textureProperties) === null || _m === void 0 ? void 0 : _m['_MainTex'];\n        const baseColorTexture = baseColorTextureIndex != null\n            ? {\n                index: baseColorTextureIndex,\n                extensions: Object.assign({}, textureTransformExt),\n            }\n            : undefined;\n        const normalTextureScale = (_p = (_o = materialProperties.floatProperties) === null || _o === void 0 ? void 0 : _o['_BumpScale']) !== null && _p !== void 0 ? _p : 1.0;\n        const normalTextureIndex = (_q = materialProperties.textureProperties) === null || _q === void 0 ? void 0 : _q['_BumpMap'];\n        const normalTexture = normalTextureIndex != null\n            ? {\n                index: normalTextureIndex,\n                scale: normalTextureScale,\n                extensions: Object.assign({}, textureTransformExt),\n            }\n            : undefined;\n        const emissiveFactor = ((_s = (_r = materialProperties.vectorProperties) === null || _r === void 0 ? void 0 : _r['_EmissionColor']) !== null && _s !== void 0 ? _s : [0.0, 0.0, 0.0, 1.0]).map(gammaEOTF);\n        const emissiveTextureIndex = (_t = materialProperties.textureProperties) === null || _t === void 0 ? void 0 : _t['_EmissionMap'];\n        const emissiveTexture = emissiveTextureIndex != null\n            ? {\n                index: emissiveTextureIndex,\n                extensions: Object.assign({}, textureTransformExt),\n            }\n            : undefined;\n        const shadeColorFactor = ((_v = (_u = materialProperties.vectorProperties) === null || _u === void 0 ? void 0 : _u['_ShadeColor']) !== null && _v !== void 0 ? _v : [0.97, 0.81, 0.86, 1.0]).map(gammaEOTF);\n        const shadeMultiplyTextureIndex = (_w = materialProperties.textureProperties) === null || _w === void 0 ? void 0 : _w['_ShadeTexture'];\n        const shadeMultiplyTexture = shadeMultiplyTextureIndex != null\n            ? {\n                index: shadeMultiplyTextureIndex,\n                extensions: Object.assign({}, textureTransformExt),\n            }\n            : undefined;\n        // // convert v0 shade shift / shade toony\n        let shadingShiftFactor = (_y = (_x = materialProperties.floatProperties) === null || _x === void 0 ? void 0 : _x['_ShadeShift']) !== null && _y !== void 0 ? _y : 0.0;\n        let shadingToonyFactor = (_0 = (_z = materialProperties.floatProperties) === null || _z === void 0 ? void 0 : _z['_ShadeToony']) !== null && _0 !== void 0 ? _0 : 0.9;\n        shadingToonyFactor = THREE.MathUtils.lerp(shadingToonyFactor, 1.0, 0.5 + 0.5 * shadingShiftFactor);\n        shadingShiftFactor = -shadingShiftFactor - (1.0 - shadingToonyFactor);\n        const giIntensityFactor = (_2 = (_1 = materialProperties.floatProperties) === null || _1 === void 0 ? void 0 : _1['_IndirectLightIntensity']) !== null && _2 !== void 0 ? _2 : 0.1;\n        const giEqualizationFactor = giIntensityFactor ? 1.0 - giIntensityFactor : undefined;\n        const matcapTextureIndex = (_3 = materialProperties.textureProperties) === null || _3 === void 0 ? void 0 : _3['_SphereAdd'];\n        const matcapFactor = matcapTextureIndex != null ? [1.0, 1.0, 1.0] : undefined;\n        const matcapTexture = matcapTextureIndex != null\n            ? {\n                index: matcapTextureIndex,\n            }\n            : undefined;\n        const rimLightingMixFactor = (_5 = (_4 = materialProperties.floatProperties) === null || _4 === void 0 ? void 0 : _4['_RimLightingMix']) !== null && _5 !== void 0 ? _5 : 0.0;\n        const rimMultiplyTextureIndex = (_6 = materialProperties.textureProperties) === null || _6 === void 0 ? void 0 : _6['_RimTexture'];\n        const rimMultiplyTexture = rimMultiplyTextureIndex != null\n            ? {\n                index: rimMultiplyTextureIndex,\n                extensions: Object.assign({}, textureTransformExt),\n            }\n            : undefined;\n        const parametricRimColorFactor = ((_8 = (_7 = materialProperties.vectorProperties) === null || _7 === void 0 ? void 0 : _7['_RimColor']) !== null && _8 !== void 0 ? _8 : [0.0, 0.0, 0.0, 1.0]).map(gammaEOTF);\n        const parametricRimFresnelPowerFactor = (_10 = (_9 = materialProperties.floatProperties) === null || _9 === void 0 ? void 0 : _9['_RimFresnelPower']) !== null && _10 !== void 0 ? _10 : 1.0;\n        const parametricRimLiftFactor = (_12 = (_11 = materialProperties.floatProperties) === null || _11 === void 0 ? void 0 : _11['_RimLift']) !== null && _12 !== void 0 ? _12 : 0.0;\n        const outlineWidthMode = ['none', 'worldCoordinates', 'screenCoordinates'][(_14 = (_13 = materialProperties.floatProperties) === null || _13 === void 0 ? void 0 : _13['_OutlineWidthMode']) !== null && _14 !== void 0 ? _14 : 0];\n        // // v0 outlineWidthFactor is in centimeter\n        let outlineWidthFactor = (_16 = (_15 = materialProperties.floatProperties) === null || _15 === void 0 ? void 0 : _15['_OutlineWidth']) !== null && _16 !== void 0 ? _16 : 0.0;\n        outlineWidthFactor = 0.01 * outlineWidthFactor;\n        const outlineWidthMultiplyTextureIndex = (_17 = materialProperties.textureProperties) === null || _17 === void 0 ? void 0 : _17['_OutlineWidthTexture'];\n        const outlineWidthMultiplyTexture = outlineWidthMultiplyTextureIndex != null\n            ? {\n                index: outlineWidthMultiplyTextureIndex,\n                extensions: Object.assign({}, textureTransformExt),\n            }\n            : undefined;\n        const outlineColorFactor = ((_19 = (_18 = materialProperties.vectorProperties) === null || _18 === void 0 ? void 0 : _18['_OutlineColor']) !== null && _19 !== void 0 ? _19 : [0.0, 0.0, 0.0]).map(gammaEOTF);\n        const outlineColorMode = (_21 = (_20 = materialProperties.floatProperties) === null || _20 === void 0 ? void 0 : _20['_OutlineColorMode']) !== null && _21 !== void 0 ? _21 : 0; // enum, { Fixed, Mixed }\n        const outlineLightingMixFactor = outlineColorMode === 1 ? (_23 = (_22 = materialProperties.floatProperties) === null || _22 === void 0 ? void 0 : _22['_OutlineLightingMix']) !== null && _23 !== void 0 ? _23 : 1.0 : 0.0;\n        const uvAnimationMaskTextureIndex = (_24 = materialProperties.textureProperties) === null || _24 === void 0 ? void 0 : _24['_UvAnimMaskTexture'];\n        const uvAnimationMaskTexture = uvAnimationMaskTextureIndex != null\n            ? {\n                index: uvAnimationMaskTextureIndex,\n                extensions: Object.assign({}, textureTransformExt),\n            }\n            : undefined;\n        const uvAnimationScrollXSpeedFactor = (_26 = (_25 = materialProperties.floatProperties) === null || _25 === void 0 ? void 0 : _25['_UvAnimScrollX']) !== null && _26 !== void 0 ? _26 : 0.0;\n        // uvAnimationScrollYSpeedFactor will be opposite between V0 and V1\n        let uvAnimationScrollYSpeedFactor = (_28 = (_27 = materialProperties.floatProperties) === null || _27 === void 0 ? void 0 : _27['_UvAnimScrollY']) !== null && _28 !== void 0 ? _28 : 0.0;\n        if (uvAnimationScrollYSpeedFactor != null) {\n            uvAnimationScrollYSpeedFactor = -uvAnimationScrollYSpeedFactor;\n        }\n        const uvAnimationRotationSpeedFactor = (_30 = (_29 = materialProperties.floatProperties) === null || _29 === void 0 ? void 0 : _29['_UvAnimRotation']) !== null && _30 !== void 0 ? _30 : 0.0;\n        const mtoonExtension = {\n            specVersion: '1.0',\n            transparentWithZWrite,\n            renderQueueOffsetNumber,\n            shadeColorFactor,\n            shadeMultiplyTexture,\n            shadingShiftFactor,\n            shadingToonyFactor,\n            giEqualizationFactor,\n            matcapFactor,\n            matcapTexture,\n            rimLightingMixFactor,\n            rimMultiplyTexture,\n            parametricRimColorFactor,\n            parametricRimFresnelPowerFactor,\n            parametricRimLiftFactor,\n            outlineWidthMode,\n            outlineWidthFactor,\n            outlineWidthMultiplyTexture,\n            outlineColorFactor,\n            outlineLightingMixFactor,\n            uvAnimationMaskTexture,\n            uvAnimationScrollXSpeedFactor,\n            uvAnimationScrollYSpeedFactor,\n            uvAnimationRotationSpeedFactor,\n        };\n        return Object.assign(Object.assign({}, schemaMaterial), { pbrMetallicRoughness: {\n                baseColorFactor,\n                baseColorTexture,\n            }, normalTexture,\n            emissiveTexture,\n            emissiveFactor,\n            alphaMode,\n            alphaCutoff,\n            doubleSided, extensions: {\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                VRMC_materials_mtoon: mtoonExtension,\n            } });\n    }\n    _parseV0UnlitProperties(materialProperties, schemaMaterial) {\n        var _a, _b, _c, _d, _e;\n        const isTransparentZWrite = materialProperties.shader === 'VRM/UnlitTransparentZWrite';\n        const isTransparent = materialProperties.shader === 'VRM/UnlitTransparent' || isTransparentZWrite;\n        const renderQueueOffsetNumber = this._v0ParseRenderQueue(materialProperties);\n        const isCutoff = materialProperties.shader === 'VRM/UnlitCutout';\n        const alphaMode = isTransparent ? 'BLEND' : isCutoff ? 'MASK' : 'OPAQUE';\n        const alphaCutoff = isCutoff ? (_b = (_a = materialProperties.floatProperties) === null || _a === void 0 ? void 0 : _a['_Cutoff']) !== null && _b !== void 0 ? _b : 0.5 : undefined;\n        const textureTransformExt = this._portTextureTransform(materialProperties);\n        const baseColorFactor = ((_d = (_c = materialProperties.vectorProperties) === null || _c === void 0 ? void 0 : _c['_Color']) !== null && _d !== void 0 ? _d : [1.0, 1.0, 1.0, 1.0]).map(gammaEOTF);\n        const baseColorTextureIndex = (_e = materialProperties.textureProperties) === null || _e === void 0 ? void 0 : _e['_MainTex'];\n        const baseColorTexture = baseColorTextureIndex != null\n            ? {\n                index: baseColorTextureIndex,\n                extensions: Object.assign({}, textureTransformExt),\n            }\n            : undefined;\n        // use mtoon instead of unlit, since there might be VRM0.0 specific features that are not supported by gltf\n        const mtoonExtension = {\n            specVersion: '1.0',\n            transparentWithZWrite: isTransparentZWrite,\n            renderQueueOffsetNumber,\n            shadeColorFactor: baseColorFactor,\n            shadeMultiplyTexture: baseColorTexture,\n        };\n        return Object.assign(Object.assign({}, schemaMaterial), { pbrMetallicRoughness: {\n                baseColorFactor,\n                baseColorTexture,\n            }, alphaMode,\n            alphaCutoff, extensions: {\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                VRMC_materials_mtoon: mtoonExtension,\n            } });\n    }\n    /**\n     * Create a glTF `KHR_texture_transform` extension from v0 texture transform info.\n     */\n    _portTextureTransform(materialProperties) {\n        var _a, _b, _c, _d, _e;\n        const textureTransform = (_a = materialProperties.vectorProperties) === null || _a === void 0 ? void 0 : _a['_MainTex'];\n        if (textureTransform == null) {\n            return {};\n        }\n        const offset = [(_b = textureTransform === null || textureTransform === void 0 ? void 0 : textureTransform[0]) !== null && _b !== void 0 ? _b : 0.0, (_c = textureTransform === null || textureTransform === void 0 ? void 0 : textureTransform[1]) !== null && _c !== void 0 ? _c : 0.0];\n        const scale = [(_d = textureTransform === null || textureTransform === void 0 ? void 0 : textureTransform[2]) !== null && _d !== void 0 ? _d : 1.0, (_e = textureTransform === null || textureTransform === void 0 ? void 0 : textureTransform[3]) !== null && _e !== void 0 ? _e : 1.0];\n        offset[1] = 1.0 - scale[1] - offset[1];\n        return {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            KHR_texture_transform: { offset, scale },\n        };\n    }\n    /**\n     * Convert v0 render order into v1 render order.\n     * This uses a map from v0 render queue to v1 compliant render queue offset which is generated in {@link _populateRenderQueueMap}.\n     */\n    _v0ParseRenderQueue(materialProperties) {\n        var _a, _b, _c;\n        const isTransparent = (_b = (_a = materialProperties.keywordMap) === null || _a === void 0 ? void 0 : _a['_ALPHABLEND_ON']) !== null && _b !== void 0 ? _b : false;\n        const enabledZWrite = ((_c = materialProperties.floatProperties) === null || _c === void 0 ? void 0 : _c['_ZWrite']) === 1;\n        let offset = 0;\n        if (isTransparent) {\n            const v0Queue = materialProperties.renderQueue;\n            if (v0Queue != null) {\n                if (enabledZWrite) {\n                    offset = this._renderQueueMapTransparentZWrite.get(v0Queue);\n                }\n                else {\n                    offset = this._renderQueueMapTransparent.get(v0Queue);\n                }\n            }\n        }\n        return offset;\n    }\n    /**\n     * Create a map which maps v0 render queue to v1 compliant render queue offset.\n     * This lists up all render queues the model use and creates a map to new render queue offsets in the same order.\n     */\n    _populateRenderQueueMap(materialPropertiesList) {\n        /**\n         * A set of used render queues in Transparent materials.\n         */\n        const renderQueuesTransparent = new Set();\n        /**\n         * A set of used render queues in TransparentZWrite materials.\n         */\n        const renderQueuesTransparentZWrite = new Set();\n        // populate the render queue set\n        materialPropertiesList.forEach((materialProperties) => {\n            var _a, _b, _c;\n            const isTransparent = (_b = (_a = materialProperties.keywordMap) === null || _a === void 0 ? void 0 : _a['_ALPHABLEND_ON']) !== null && _b !== void 0 ? _b : false;\n            const enabledZWrite = ((_c = materialProperties.floatProperties) === null || _c === void 0 ? void 0 : _c['_ZWrite']) === 1;\n            if (isTransparent) {\n                const v0Queue = materialProperties.renderQueue;\n                if (v0Queue != null) {\n                    if (enabledZWrite) {\n                        renderQueuesTransparentZWrite.add(v0Queue);\n                    }\n                    else {\n                        renderQueuesTransparent.add(v0Queue);\n                    }\n                }\n            }\n        });\n        // show a warning if the model uses v1 incompatible number of render queues\n        if (renderQueuesTransparent.size > 10) {\n            console.warn(`VRMMaterialsV0CompatPlugin: This VRM uses ${renderQueuesTransparent.size} render queues for Transparent materials while VRM 1.0 only supports up to 10 render queues. The model might not be rendered correctly.`);\n        }\n        if (renderQueuesTransparentZWrite.size > 10) {\n            console.warn(`VRMMaterialsV0CompatPlugin: This VRM uses ${renderQueuesTransparentZWrite.size} render queues for TransparentZWrite materials while VRM 1.0 only supports up to 10 render queues. The model might not be rendered correctly.`);\n        }\n        // create a map from v0 render queue to v1 render queue offset\n        Array.from(renderQueuesTransparent)\n            .sort()\n            .forEach((queue, i) => {\n            const newQueueOffset = Math.min(Math.max(i - renderQueuesTransparent.size + 1, -9), 0);\n            this._renderQueueMapTransparent.set(queue, newQueueOffset);\n        });\n        Array.from(renderQueuesTransparentZWrite)\n            .sort()\n            .forEach((queue, i) => {\n            const newQueueOffset = Math.min(Math.max(i, 0), 9);\n            this._renderQueueMapTransparentZWrite.set(queue, newQueueOffset);\n        });\n    }\n}\n\nexport { VRMMaterialsV0CompatPlugin };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n", "/*!\n * @pixiv/three-vrm-node-constraint v2.1.3\n * Node constraint module for @pixiv/three-vrm\n *\n * Copyright (c) 2020-2024 pixiv Inc.\n * @pixiv/three-vrm-node-constraint is distributed under MIT License\n * https://github.com/pixiv/three-vrm/blob/release/LICENSE\n */\nimport * as THREE from 'three';\n\nconst _v3A$3 = new THREE.Vector3();\nclass VRMNodeConstraintHelper extends THREE.Group {\n    constructor(constraint) {\n        super();\n        this._attrPosition = new THREE.BufferAttribute(new Float32Array([0, 0, 0, 0, 0, 0]), 3);\n        this._attrPosition.setUsage(THREE.DynamicDrawUsage);\n        const geometry = new THREE.BufferGeometry();\n        geometry.setAttribute('position', this._attrPosition);\n        const material = new THREE.LineBasicMaterial({\n            color: 0xff00ff,\n            depthTest: false,\n            depthWrite: false,\n        });\n        this._line = new THREE.Line(geometry, material);\n        this.add(this._line);\n        this.constraint = constraint;\n    }\n    updateMatrixWorld(force) {\n        _v3A$3.setFromMatrixPosition(this.constraint.destination.matrixWorld);\n        this._attrPosition.setXYZ(0, _v3A$3.x, _v3A$3.y, _v3A$3.z);\n        if (this.constraint.source) {\n            _v3A$3.setFromMatrixPosition(this.constraint.source.matrixWorld);\n        }\n        this._attrPosition.setXYZ(1, _v3A$3.x, _v3A$3.y, _v3A$3.z);\n        this._attrPosition.needsUpdate = true;\n        super.updateMatrixWorld(force);\n    }\n}\n\nfunction decomposePosition(matrix, target) {\n    return target.set(matrix.elements[12], matrix.elements[13], matrix.elements[14]);\n}\n\nconst _v3A$2 = new THREE.Vector3();\nconst _v3B$1 = new THREE.Vector3();\nfunction decomposeRotation(matrix, target) {\n    matrix.decompose(_v3A$2, target, _v3B$1);\n    return target;\n}\n\n/**\n * A compat function for `Quaternion.invert()` / `Quaternion.inverse()`.\n * `Quaternion.invert()` is introduced in r123 and `Quaternion.inverse()` emits a warning.\n * We are going to use this compat for a while.\n * @param target A target quaternion\n */\nfunction quatInvertCompat(target) {\n    if (target.invert) {\n        target.invert();\n    }\n    else {\n        target.inverse();\n    }\n    return target;\n}\n\n/**\n * A base class of VRM constraint classes.\n */\nclass VRMNodeConstraint {\n    /**\n     * @param destination The destination object\n     * @param source The source object\n     */\n    constructor(destination, source) {\n        this.destination = destination;\n        this.source = source;\n        this.weight = 1.0;\n    }\n}\n\nconst _v3A$1 = new THREE.Vector3();\nconst _v3B = new THREE.Vector3();\nconst _v3C = new THREE.Vector3();\nconst _quatA$2 = new THREE.Quaternion();\nconst _quatB$2 = new THREE.Quaternion();\nconst _quatC = new THREE.Quaternion();\n/**\n * A constraint that makes it look at a source object.\n *\n * See: https://github.com/vrm-c/vrm-specification/tree/master/specification/VRMC_node_constraint-1.0_beta#roll-constraint\n */\nclass VRMAimConstraint extends VRMNodeConstraint {\n    /**\n     * The aim axis of the constraint.\n     */\n    get aimAxis() {\n        return this._aimAxis;\n    }\n    /**\n     * The aim axis of the constraint.\n     */\n    set aimAxis(aimAxis) {\n        this._aimAxis = aimAxis;\n        this._v3AimAxis.set(aimAxis === 'PositiveX' ? 1.0 : aimAxis === 'NegativeX' ? -1.0 : 0.0, aimAxis === 'PositiveY' ? 1.0 : aimAxis === 'NegativeY' ? -1.0 : 0.0, aimAxis === 'PositiveZ' ? 1.0 : aimAxis === 'NegativeZ' ? -1.0 : 0.0);\n    }\n    get dependencies() {\n        const set = new Set([this.source]);\n        if (this.destination.parent) {\n            set.add(this.destination.parent);\n        }\n        return set;\n    }\n    constructor(destination, source) {\n        super(destination, source);\n        this._aimAxis = 'PositiveX';\n        this._v3AimAxis = new THREE.Vector3(1, 0, 0);\n        this._dstRestQuat = new THREE.Quaternion();\n    }\n    setInitState() {\n        this._dstRestQuat.copy(this.destination.quaternion);\n    }\n    update() {\n        // update world matrix of destination and source manually\n        this.destination.updateWorldMatrix(true, false);\n        this.source.updateWorldMatrix(true, false);\n        // get world quaternion of the parent of the destination\n        const dstParentWorldQuat = _quatA$2.identity();\n        const invDstParentWorldQuat = _quatB$2.identity();\n        if (this.destination.parent) {\n            decomposeRotation(this.destination.parent.matrixWorld, dstParentWorldQuat);\n            quatInvertCompat(invDstParentWorldQuat.copy(dstParentWorldQuat));\n        }\n        // calculate from-to vectors in world coord\n        const a0 = _v3A$1.copy(this._v3AimAxis).applyQuaternion(this._dstRestQuat).applyQuaternion(dstParentWorldQuat);\n        const a1 = decomposePosition(this.source.matrixWorld, _v3B)\n            .sub(decomposePosition(this.destination.matrixWorld, _v3C))\n            .normalize();\n        // create a from-to quaternion, convert to destination local coord, then multiply rest quaternion\n        const targetQuat = _quatC\n            .setFromUnitVectors(a0, a1)\n            .premultiply(invDstParentWorldQuat)\n            .multiply(dstParentWorldQuat)\n            .multiply(this._dstRestQuat);\n        // blend with the rest quaternion using weight\n        this.destination.quaternion.copy(this._dstRestQuat).slerp(targetQuat, this.weight);\n    }\n}\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\n/**\n * Traverse ancestors of given object and call given callback from root side.\n * It will include the given object itself.\n *\n * @param object The object you want to traverse\n * @param callback The call back function that will be called for each ancestors\n */\nfunction traverseAncestorsFromRoot(object, callback) {\n    const ancestors = [object];\n    let head = object.parent;\n    while (head !== null) {\n        ancestors.unshift(head);\n        head = head.parent;\n    }\n    ancestors.forEach((ancestor) => {\n        callback(ancestor);\n    });\n}\n\nclass VRMNodeConstraintManager {\n    constructor() {\n        this._constraints = new Set();\n        this._objectConstraintsMap = new Map();\n    }\n    get constraints() {\n        return this._constraints;\n    }\n    addConstraint(constraint) {\n        this._constraints.add(constraint);\n        let objectSet = this._objectConstraintsMap.get(constraint.destination);\n        if (objectSet == null) {\n            objectSet = new Set();\n            this._objectConstraintsMap.set(constraint.destination, objectSet);\n        }\n        objectSet.add(constraint);\n    }\n    deleteConstraint(constraint) {\n        this._constraints.delete(constraint);\n        const objectSet = this._objectConstraintsMap.get(constraint.destination);\n        objectSet.delete(constraint);\n    }\n    setInitState() {\n        const constraintsTried = new Set();\n        const constraintsDone = new Set();\n        for (const constraint of this._constraints) {\n            this._processConstraint(constraint, constraintsTried, constraintsDone, (constraint) => constraint.setInitState());\n        }\n    }\n    update() {\n        const constraintsTried = new Set();\n        const constraintsDone = new Set();\n        for (const constraint of this._constraints) {\n            this._processConstraint(constraint, constraintsTried, constraintsDone, (constraint) => constraint.update());\n        }\n    }\n    /**\n     * Update a constraint.\n     * If there are other constraints that are dependant, it will try to update them recursively.\n     * It might throw an error if there are circular dependencies.\n     *\n     * Intended to be used in {@link update} and {@link _processConstraint} itself recursively.\n     *\n     * @param constraint A constraint you want to update\n     * @param constraintsTried Set of constraints that are already tried to be updated\n     * @param constraintsDone Set of constraints that are already up to date\n     */\n    _processConstraint(constraint, constraintsTried, constraintsDone, callback) {\n        if (constraintsDone.has(constraint)) {\n            return;\n        }\n        if (constraintsTried.has(constraint)) {\n            throw new Error('VRMNodeConstraintManager: Circular dependency detected while updating constraints');\n        }\n        constraintsTried.add(constraint);\n        const depObjects = constraint.dependencies;\n        for (const depObject of depObjects) {\n            traverseAncestorsFromRoot(depObject, (depObjectAncestor) => {\n                const objectSet = this._objectConstraintsMap.get(depObjectAncestor);\n                if (objectSet) {\n                    for (const depConstraint of objectSet) {\n                        this._processConstraint(depConstraint, constraintsTried, constraintsDone, callback);\n                    }\n                }\n            });\n        }\n        callback(constraint);\n        constraintsDone.add(constraint);\n    }\n}\n\nconst _quatA$1 = new THREE.Quaternion();\nconst _quatB$1 = new THREE.Quaternion();\n/**\n * A constraint that transfers a rotation around one axis of a source.\n *\n * See: https://github.com/vrm-c/vrm-specification/tree/master/specification/VRMC_node_constraint-1.0_beta#roll-constraint\n */\nclass VRMRotationConstraint extends VRMNodeConstraint {\n    get dependencies() {\n        return new Set([this.source]);\n    }\n    constructor(destination, source) {\n        super(destination, source);\n        this._dstRestQuat = new THREE.Quaternion();\n        this._invSrcRestQuat = new THREE.Quaternion();\n    }\n    setInitState() {\n        this._dstRestQuat.copy(this.destination.quaternion);\n        quatInvertCompat(this._invSrcRestQuat.copy(this.source.quaternion));\n    }\n    update() {\n        // calculate the delta rotation from the rest about the source\n        const srcDeltaQuat = _quatA$1.copy(this._invSrcRestQuat).multiply(this.source.quaternion);\n        // multiply the delta to the rest of the destination\n        const targetQuat = _quatB$1.copy(this._dstRestQuat).multiply(srcDeltaQuat);\n        // blend with the rest quaternion using weight\n        this.destination.quaternion.copy(this._dstRestQuat).slerp(targetQuat, this.weight);\n    }\n}\n\nconst _v3A = new THREE.Vector3();\nconst _quatA = new THREE.Quaternion();\nconst _quatB = new THREE.Quaternion();\n/**\n * A constraint that transfers a rotation around one axis of a source.\n *\n * See: https://github.com/vrm-c/vrm-specification/tree/master/specification/VRMC_node_constraint-1.0_beta#roll-constraint\n */\nclass VRMRollConstraint extends VRMNodeConstraint {\n    /**\n     * The roll axis of the constraint.\n     */\n    get rollAxis() {\n        return this._rollAxis;\n    }\n    /**\n     * The roll axis of the constraint.\n     */\n    set rollAxis(rollAxis) {\n        this._rollAxis = rollAxis;\n        this._v3RollAxis.set(rollAxis === 'X' ? 1.0 : 0.0, rollAxis === 'Y' ? 1.0 : 0.0, rollAxis === 'Z' ? 1.0 : 0.0);\n    }\n    get dependencies() {\n        return new Set([this.source]);\n    }\n    constructor(destination, source) {\n        super(destination, source);\n        this._rollAxis = 'X';\n        this._v3RollAxis = new THREE.Vector3(1, 0, 0);\n        this._dstRestQuat = new THREE.Quaternion();\n        this._invDstRestQuat = new THREE.Quaternion();\n        this._invSrcRestQuatMulDstRestQuat = new THREE.Quaternion();\n    }\n    setInitState() {\n        this._dstRestQuat.copy(this.destination.quaternion);\n        quatInvertCompat(this._invDstRestQuat.copy(this._dstRestQuat));\n        quatInvertCompat(this._invSrcRestQuatMulDstRestQuat.copy(this.source.quaternion)).multiply(this._dstRestQuat);\n    }\n    update() {\n        // calculate the delta rotation from the rest about the source, then convert to the destination local coord\n        /**\n         * What the quatDelta is intended to be:\n         *\n         * ```ts\n         * const quatSrcDelta = _quatA\n         *   .copy( this._invSrcRestQuat )\n         *   .multiply( this.source.quaternion );\n         * const quatSrcDeltaInParent = _quatB\n         *   .copy( this._srcRestQuat )\n         *   .multiply( quatSrcDelta )\n         *   .multiply( this._invSrcRestQuat );\n         * const quatSrcDeltaInDst = _quatA\n         *   .copy( this._invDstRestQuat )\n         *   .multiply( quatSrcDeltaInParent )\n         *   .multiply( this._dstRestQuat );\n         * ```\n         */\n        const quatDelta = _quatA\n            .copy(this._invDstRestQuat)\n            .multiply(this.source.quaternion)\n            .multiply(this._invSrcRestQuatMulDstRestQuat);\n        // create a from-to quaternion\n        const n1 = _v3A.copy(this._v3RollAxis).applyQuaternion(quatDelta);\n        /**\n         * What the quatFromTo is intended to be:\n         *\n         * ```ts\n         * const quatFromTo = _quatB.setFromUnitVectors( this._v3RollAxis, n1 ).inverse();\n         * ```\n         */\n        const quatFromTo = _quatB.setFromUnitVectors(n1, this._v3RollAxis);\n        // quatFromTo * quatDelta == roll extracted from quatDelta\n        const targetQuat = quatFromTo.premultiply(this._dstRestQuat).multiply(quatDelta);\n        // blend with the rest quaternion using weight\n        this.destination.quaternion.copy(this._dstRestQuat).slerp(targetQuat, this.weight);\n    }\n}\n\n/**\n * Possible spec versions it recognizes.\n */\nconst POSSIBLE_SPEC_VERSIONS = new Set(['1.0', '1.0-beta']);\nclass VRMNodeConstraintLoaderPlugin {\n    get name() {\n        return VRMNodeConstraintLoaderPlugin.EXTENSION_NAME;\n    }\n    constructor(parser, options) {\n        this.parser = parser;\n        this.helperRoot = options === null || options === void 0 ? void 0 : options.helperRoot;\n    }\n    afterRoot(gltf) {\n        return __awaiter(this, void 0, void 0, function* () {\n            gltf.userData.vrmNodeConstraintManager = yield this._import(gltf);\n        });\n    }\n    /**\n     * Import constraints from a GLTF and returns a {@link VRMNodeConstraintManager}.\n     * It might return `null` instead when it does not need to be created or something go wrong.\n     *\n     * @param gltf A parsed result of GLTF taken from GLTFLoader\n     */\n    _import(gltf) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const json = this.parser.json;\n            // early abort if it doesn't use constraints\n            const isConstraintsUsed = ((_a = json.extensionsUsed) === null || _a === void 0 ? void 0 : _a.indexOf(VRMNodeConstraintLoaderPlugin.EXTENSION_NAME)) !== -1;\n            if (!isConstraintsUsed) {\n                return null;\n            }\n            const manager = new VRMNodeConstraintManager();\n            const threeNodes = yield this.parser.getDependencies('node');\n            // import constraints for each nodes\n            threeNodes.forEach((node, nodeIndex) => {\n                var _a;\n                const schemaNode = json.nodes[nodeIndex];\n                // check if the extension uses the extension\n                const extension = (_a = schemaNode === null || schemaNode === void 0 ? void 0 : schemaNode.extensions) === null || _a === void 0 ? void 0 : _a[VRMNodeConstraintLoaderPlugin.EXTENSION_NAME];\n                if (extension == null) {\n                    return;\n                }\n                const specVersion = extension.specVersion;\n                if (!POSSIBLE_SPEC_VERSIONS.has(specVersion)) {\n                    console.warn(`VRMNodeConstraintLoaderPlugin: Unknown ${VRMNodeConstraintLoaderPlugin.EXTENSION_NAME} specVersion \"${specVersion}\"`);\n                    return;\n                }\n                const constraintDef = extension.constraint;\n                // import constraints\n                if (constraintDef.roll != null) {\n                    const constraint = this._importRollConstraint(node, threeNodes, constraintDef.roll);\n                    manager.addConstraint(constraint);\n                }\n                else if (constraintDef.aim != null) {\n                    const constraint = this._importAimConstraint(node, threeNodes, constraintDef.aim);\n                    manager.addConstraint(constraint);\n                }\n                else if (constraintDef.rotation != null) {\n                    const constraint = this._importRotationConstraint(node, threeNodes, constraintDef.rotation);\n                    manager.addConstraint(constraint);\n                }\n            });\n            // init constraints\n            gltf.scene.updateMatrixWorld();\n            manager.setInitState();\n            return manager;\n        });\n    }\n    _importRollConstraint(destination, nodes, rollConstraintDef) {\n        const { source: sourceIndex, rollAxis, weight } = rollConstraintDef;\n        const source = nodes[sourceIndex];\n        const constraint = new VRMRollConstraint(destination, source);\n        if (rollAxis != null) {\n            constraint.rollAxis = rollAxis;\n        }\n        if (weight != null) {\n            constraint.weight = weight;\n        }\n        if (this.helperRoot) {\n            const helper = new VRMNodeConstraintHelper(constraint);\n            this.helperRoot.add(helper);\n        }\n        return constraint;\n    }\n    _importAimConstraint(destination, nodes, aimConstraintDef) {\n        const { source: sourceIndex, aimAxis, weight } = aimConstraintDef;\n        const source = nodes[sourceIndex];\n        const constraint = new VRMAimConstraint(destination, source);\n        if (aimAxis != null) {\n            constraint.aimAxis = aimAxis;\n        }\n        if (weight != null) {\n            constraint.weight = weight;\n        }\n        if (this.helperRoot) {\n            const helper = new VRMNodeConstraintHelper(constraint);\n            this.helperRoot.add(helper);\n        }\n        return constraint;\n    }\n    _importRotationConstraint(destination, nodes, rotationConstraintDef) {\n        const { source: sourceIndex, weight } = rotationConstraintDef;\n        const source = nodes[sourceIndex];\n        const constraint = new VRMRotationConstraint(destination, source);\n        if (weight != null) {\n            constraint.weight = weight;\n        }\n        if (this.helperRoot) {\n            const helper = new VRMNodeConstraintHelper(constraint);\n            this.helperRoot.add(helper);\n        }\n        return constraint;\n    }\n}\nVRMNodeConstraintLoaderPlugin.EXTENSION_NAME = 'VRMC_node_constraint';\n\nexport { VRMAimConstraint, VRMNodeConstraint, VRMNodeConstraintHelper, VRMNodeConstraintLoaderPlugin, VRMNodeConstraintManager, VRMRollConstraint, VRMRotationConstraint };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n", "/*!\n * @pixiv/three-vrm-springbone v2.1.3\n * Spring bone module for @pixiv/three-vrm\n *\n * Copyright (c) 2020-2024 pixiv Inc.\n * @pixiv/three-vrm-springbone is distributed under MIT License\n * https://github.com/pixiv/three-vrm/blob/release/LICENSE\n */\nimport * as THREE from 'three';\n\n/**\n * Represents a shape of a collider.\n */\nclass VRMSpringBoneColliderShape {\n}\n\nconst _v3A$4 = new THREE.Vector3();\nconst _v3B$1 = new THREE.Vector3();\nclass VRMSpringBoneColliderShapeCapsule extends VRMSpringBoneColliderShape {\n    get type() {\n        return 'capsule';\n    }\n    constructor(params) {\n        var _a, _b, _c;\n        super();\n        this.offset = (_a = params === null || params === void 0 ? void 0 : params.offset) !== null && _a !== void 0 ? _a : new THREE.Vector3(0.0, 0.0, 0.0);\n        this.tail = (_b = params === null || params === void 0 ? void 0 : params.tail) !== null && _b !== void 0 ? _b : new THREE.Vector3(0.0, 0.0, 0.0);\n        this.radius = (_c = params === null || params === void 0 ? void 0 : params.radius) !== null && _c !== void 0 ? _c : 0.0;\n    }\n    calculateCollision(colliderMatrix, objectPosition, objectRadius, target) {\n        _v3A$4.copy(this.offset).applyMatrix4(colliderMatrix); // transformed head\n        _v3B$1.copy(this.tail).applyMatrix4(colliderMatrix); // transformed tail\n        _v3B$1.sub(_v3A$4); // from head to tail\n        const lengthSqCapsule = _v3B$1.lengthSq();\n        target.copy(objectPosition).sub(_v3A$4); // from head to object\n        const dot = _v3B$1.dot(target); // dot product of offsetToTail and offsetToObject\n        if (dot <= 0.0) ;\n        else if (lengthSqCapsule <= dot) {\n            // if object is near from the tail\n            target.sub(_v3B$1); // from tail to object\n        }\n        else {\n            // if object is between two ends\n            _v3B$1.multiplyScalar(dot / lengthSqCapsule); // from head to the nearest point of the shaft\n            target.sub(_v3B$1); // from the shaft point to object\n        }\n        const radius = objectRadius + this.radius;\n        const distance = target.length() - radius;\n        target.normalize();\n        return distance;\n    }\n}\n\nclass VRMSpringBoneColliderShapeSphere extends VRMSpringBoneColliderShape {\n    get type() {\n        return 'sphere';\n    }\n    constructor(params) {\n        var _a, _b;\n        super();\n        this.offset = (_a = params === null || params === void 0 ? void 0 : params.offset) !== null && _a !== void 0 ? _a : new THREE.Vector3(0.0, 0.0, 0.0);\n        this.radius = (_b = params === null || params === void 0 ? void 0 : params.radius) !== null && _b !== void 0 ? _b : 0.0;\n    }\n    calculateCollision(colliderMatrix, objectPosition, objectRadius, target) {\n        target.copy(this.offset).applyMatrix4(colliderMatrix); // transformed offset\n        target.negate().add(objectPosition); // a vector from collider center to object position\n        const radius = objectRadius + this.radius;\n        const distance = target.length() - radius;\n        target.normalize();\n        return distance;\n    }\n}\n\nconst _v3A$3 = new THREE.Vector3();\nclass ColliderShapeCapsuleBufferGeometry extends THREE.BufferGeometry {\n    constructor(shape) {\n        super();\n        this.worldScale = 1.0;\n        this._currentRadius = 0;\n        this._currentOffset = new THREE.Vector3();\n        this._currentTail = new THREE.Vector3();\n        this._shape = shape;\n        this._attrPos = new THREE.BufferAttribute(new Float32Array(396), 3);\n        this.setAttribute('position', this._attrPos);\n        this._attrIndex = new THREE.BufferAttribute(new Uint16Array(264), 1);\n        this.setIndex(this._attrIndex);\n        this._buildIndex();\n        this.update();\n    }\n    update() {\n        let shouldUpdateGeometry = false;\n        const radius = this._shape.radius / this.worldScale;\n        if (this._currentRadius !== radius) {\n            this._currentRadius = radius;\n            shouldUpdateGeometry = true;\n        }\n        if (!this._currentOffset.equals(this._shape.offset)) {\n            this._currentOffset.copy(this._shape.offset);\n            shouldUpdateGeometry = true;\n        }\n        const tail = _v3A$3.copy(this._shape.tail).divideScalar(this.worldScale);\n        if (this._currentTail.distanceToSquared(tail) > 1e-10) {\n            this._currentTail.copy(tail);\n            shouldUpdateGeometry = true;\n        }\n        if (shouldUpdateGeometry) {\n            this._buildPosition();\n        }\n    }\n    _buildPosition() {\n        _v3A$3.copy(this._currentTail).sub(this._currentOffset);\n        const l = _v3A$3.length() / this._currentRadius;\n        for (let i = 0; i <= 16; i++) {\n            const t = (i / 16.0) * Math.PI;\n            this._attrPos.setXYZ(i, -Math.sin(t), -Math.cos(t), 0.0);\n            this._attrPos.setXYZ(17 + i, l + Math.sin(t), Math.cos(t), 0.0);\n            this._attrPos.setXYZ(34 + i, -Math.sin(t), 0.0, -Math.cos(t));\n            this._attrPos.setXYZ(51 + i, l + Math.sin(t), 0.0, Math.cos(t));\n        }\n        for (let i = 0; i < 32; i++) {\n            const t = (i / 16.0) * Math.PI;\n            this._attrPos.setXYZ(68 + i, 0.0, Math.sin(t), Math.cos(t));\n            this._attrPos.setXYZ(100 + i, l, Math.sin(t), Math.cos(t));\n        }\n        const theta = Math.atan2(_v3A$3.y, Math.sqrt(_v3A$3.x * _v3A$3.x + _v3A$3.z * _v3A$3.z));\n        const phi = -Math.atan2(_v3A$3.z, _v3A$3.x);\n        this.rotateZ(theta);\n        this.rotateY(phi);\n        this.scale(this._currentRadius, this._currentRadius, this._currentRadius);\n        this.translate(this._currentOffset.x, this._currentOffset.y, this._currentOffset.z);\n        this._attrPos.needsUpdate = true;\n    }\n    _buildIndex() {\n        for (let i = 0; i < 34; i++) {\n            const i1 = (i + 1) % 34;\n            this._attrIndex.setXY(i * 2, i, i1);\n            this._attrIndex.setXY(68 + i * 2, 34 + i, 34 + i1);\n        }\n        for (let i = 0; i < 32; i++) {\n            const i1 = (i + 1) % 32;\n            this._attrIndex.setXY(136 + i * 2, 68 + i, 68 + i1);\n            this._attrIndex.setXY(200 + i * 2, 100 + i, 100 + i1);\n        }\n        this._attrIndex.needsUpdate = true;\n    }\n}\n\nclass ColliderShapeSphereBufferGeometry extends THREE.BufferGeometry {\n    constructor(shape) {\n        super();\n        this.worldScale = 1.0;\n        this._currentRadius = 0;\n        this._currentOffset = new THREE.Vector3();\n        this._shape = shape;\n        this._attrPos = new THREE.BufferAttribute(new Float32Array(32 * 3 * 3), 3);\n        this.setAttribute('position', this._attrPos);\n        this._attrIndex = new THREE.BufferAttribute(new Uint16Array(64 * 3), 1);\n        this.setIndex(this._attrIndex);\n        this._buildIndex();\n        this.update();\n    }\n    update() {\n        let shouldUpdateGeometry = false;\n        const radius = this._shape.radius / this.worldScale;\n        if (this._currentRadius !== radius) {\n            this._currentRadius = radius;\n            shouldUpdateGeometry = true;\n        }\n        if (!this._currentOffset.equals(this._shape.offset)) {\n            this._currentOffset.copy(this._shape.offset);\n            shouldUpdateGeometry = true;\n        }\n        if (shouldUpdateGeometry) {\n            this._buildPosition();\n        }\n    }\n    _buildPosition() {\n        for (let i = 0; i < 32; i++) {\n            const t = (i / 16.0) * Math.PI;\n            this._attrPos.setXYZ(i, Math.cos(t), Math.sin(t), 0.0);\n            this._attrPos.setXYZ(32 + i, 0.0, Math.cos(t), Math.sin(t));\n            this._attrPos.setXYZ(64 + i, Math.sin(t), 0.0, Math.cos(t));\n        }\n        this.scale(this._currentRadius, this._currentRadius, this._currentRadius);\n        this.translate(this._currentOffset.x, this._currentOffset.y, this._currentOffset.z);\n        this._attrPos.needsUpdate = true;\n    }\n    _buildIndex() {\n        for (let i = 0; i < 32; i++) {\n            const i1 = (i + 1) % 32;\n            this._attrIndex.setXY(i * 2, i, i1);\n            this._attrIndex.setXY(64 + i * 2, 32 + i, 32 + i1);\n            this._attrIndex.setXY(128 + i * 2, 64 + i, 64 + i1);\n        }\n        this._attrIndex.needsUpdate = true;\n    }\n}\n\nconst _v3A$2 = new THREE.Vector3();\nclass VRMSpringBoneColliderHelper extends THREE.Group {\n    constructor(collider) {\n        super();\n        this.matrixAutoUpdate = false;\n        this.collider = collider;\n        if (this.collider.shape instanceof VRMSpringBoneColliderShapeSphere) {\n            this._geometry = new ColliderShapeSphereBufferGeometry(this.collider.shape);\n        }\n        else if (this.collider.shape instanceof VRMSpringBoneColliderShapeCapsule) {\n            this._geometry = new ColliderShapeCapsuleBufferGeometry(this.collider.shape);\n        }\n        else {\n            throw new Error('VRMSpringBoneColliderHelper: Unknown collider shape type detected');\n        }\n        const material = new THREE.LineBasicMaterial({\n            color: 0xff00ff,\n            depthTest: false,\n            depthWrite: false,\n        });\n        this._line = new THREE.LineSegments(this._geometry, material);\n        this.add(this._line);\n    }\n    dispose() {\n        this._geometry.dispose();\n    }\n    updateMatrixWorld(force) {\n        this.collider.updateWorldMatrix(true, false);\n        this.matrix.copy(this.collider.matrixWorld);\n        const matrixWorldElements = this.matrix.elements;\n        this._geometry.worldScale = _v3A$2\n            .set(matrixWorldElements[0], matrixWorldElements[1], matrixWorldElements[2])\n            .length(); // calculate scale of x component\n        this._geometry.update();\n        super.updateMatrixWorld(force);\n    }\n}\n\nclass SpringBoneBufferGeometry extends THREE.BufferGeometry {\n    constructor(springBone) {\n        super();\n        this.worldScale = 1.0;\n        this._currentRadius = 0;\n        this._currentTail = new THREE.Vector3();\n        this._springBone = springBone;\n        this._attrPos = new THREE.BufferAttribute(new Float32Array(294), 3);\n        this.setAttribute('position', this._attrPos);\n        this._attrIndex = new THREE.BufferAttribute(new Uint16Array(194), 1);\n        this.setIndex(this._attrIndex);\n        this._buildIndex();\n        this.update();\n    }\n    update() {\n        let shouldUpdateGeometry = false;\n        const radius = this._springBone.settings.hitRadius / this.worldScale;\n        if (this._currentRadius !== radius) {\n            this._currentRadius = radius;\n            shouldUpdateGeometry = true;\n        }\n        if (!this._currentTail.equals(this._springBone.initialLocalChildPosition)) {\n            this._currentTail.copy(this._springBone.initialLocalChildPosition);\n            shouldUpdateGeometry = true;\n        }\n        if (shouldUpdateGeometry) {\n            this._buildPosition();\n        }\n    }\n    _buildPosition() {\n        for (let i = 0; i < 32; i++) {\n            const t = (i / 16.0) * Math.PI;\n            this._attrPos.setXYZ(i, Math.cos(t), Math.sin(t), 0.0);\n            this._attrPos.setXYZ(32 + i, 0.0, Math.cos(t), Math.sin(t));\n            this._attrPos.setXYZ(64 + i, Math.sin(t), 0.0, Math.cos(t));\n        }\n        this.scale(this._currentRadius, this._currentRadius, this._currentRadius);\n        this.translate(this._currentTail.x, this._currentTail.y, this._currentTail.z);\n        this._attrPos.setXYZ(96, 0, 0, 0);\n        this._attrPos.setXYZ(97, this._currentTail.x, this._currentTail.y, this._currentTail.z);\n        this._attrPos.needsUpdate = true;\n    }\n    _buildIndex() {\n        for (let i = 0; i < 32; i++) {\n            const i1 = (i + 1) % 32;\n            this._attrIndex.setXY(i * 2, i, i1);\n            this._attrIndex.setXY(64 + i * 2, 32 + i, 32 + i1);\n            this._attrIndex.setXY(128 + i * 2, 64 + i, 64 + i1);\n        }\n        this._attrIndex.setXY(192, 96, 97);\n        this._attrIndex.needsUpdate = true;\n    }\n}\n\nconst _v3A$1 = new THREE.Vector3();\nclass VRMSpringBoneJointHelper extends THREE.Group {\n    constructor(springBone) {\n        super();\n        this.matrixAutoUpdate = false;\n        this.springBone = springBone;\n        this._geometry = new SpringBoneBufferGeometry(this.springBone);\n        const material = new THREE.LineBasicMaterial({\n            color: 0xffff00,\n            depthTest: false,\n            depthWrite: false,\n        });\n        this._line = new THREE.LineSegments(this._geometry, material);\n        this.add(this._line);\n    }\n    dispose() {\n        this._geometry.dispose();\n    }\n    updateMatrixWorld(force) {\n        this.springBone.bone.updateWorldMatrix(true, false);\n        this.matrix.copy(this.springBone.bone.matrixWorld);\n        const matrixWorldElements = this.matrix.elements;\n        this._geometry.worldScale = _v3A$1\n            .set(matrixWorldElements[0], matrixWorldElements[1], matrixWorldElements[2])\n            .length(); // calculate scale of x component\n        this._geometry.update();\n        super.updateMatrixWorld(force);\n    }\n}\n\n/**\n * Represents a collider of a VRM.\n */\nclass VRMSpringBoneCollider extends THREE.Object3D {\n    constructor(shape) {\n        super();\n        this.shape = shape;\n    }\n}\n\nconst _matA$1 = new THREE.Matrix4();\n/**\n * A compat function for `Matrix4.invert()` / `Matrix4.getInverse()`.\n * `Matrix4.invert()` is introduced in r123 and `Matrix4.getInverse()` emits a warning.\n * We are going to use this compat for a while.\n * @param target A target matrix\n */\nfunction mat4InvertCompat(target) {\n    if (target.invert) {\n        target.invert();\n    }\n    else {\n        target.getInverse(_matA$1.copy(target));\n    }\n    return target;\n}\n\nclass Matrix4InverseCache {\n    /**\n     * Inverse of given matrix.\n     * Note that it will return its internal private instance.\n     * Make sure copying this before mutate this.\n     */\n    get inverse() {\n        if (this._shouldUpdateInverse) {\n            this._inverseCache.copy(this.matrix);\n            mat4InvertCompat(this._inverseCache);\n            this._shouldUpdateInverse = false;\n        }\n        return this._inverseCache;\n    }\n    constructor(matrix) {\n        /**\n         * A cache of inverse of current matrix.\n         */\n        this._inverseCache = new THREE.Matrix4();\n        /**\n         * A flag that makes it want to recalculate its {@link _inverseCache}.\n         * Will be set `true` when `elements` are mutated and be used in `getInverse`.\n         */\n        this._shouldUpdateInverse = true;\n        this.matrix = matrix;\n        const handler = {\n            set: (obj, prop, newVal) => {\n                this._shouldUpdateInverse = true;\n                obj[prop] = newVal;\n                return true;\n            },\n        };\n        this._originalElements = matrix.elements;\n        matrix.elements = new Proxy(matrix.elements, handler);\n    }\n    revert() {\n        this.matrix.elements = this._originalElements;\n    }\n}\n\n// based on\n// http://rocketjump.skr.jp/unity3d/109/\n// https://github.com/dwango/UniVRM/blob/master/Scripts/SpringBone/VRMSpringBone.cs\nconst IDENTITY_MATRIX4 = new THREE.Matrix4();\n// 計算中の一時保存用変数（一度インスタンスを作ったらあとは使い回す）\nconst _v3A = new THREE.Vector3();\nconst _v3B = new THREE.Vector3();\nconst _v3C = new THREE.Vector3();\n/**\n * A temporary variable which is used in `update`\n */\nconst _worldSpacePosition = new THREE.Vector3();\n/**\n * A temporary variable which is used in `update`\n */\nconst _centerSpacePosition = new THREE.Vector3();\n/**\n * A temporary variable which is used in `update`\n */\nconst _nextTail = new THREE.Vector3();\nconst _quatA = new THREE.Quaternion();\nconst _matA = new THREE.Matrix4();\nconst _matB = new THREE.Matrix4();\n/**\n * A class represents a single joint of a spring bone.\n * It should be managed by a [[VRMSpringBoneManager]].\n */\nclass VRMSpringBoneJoint {\n    get center() {\n        return this._center;\n    }\n    set center(center) {\n        var _a;\n        // uninstall inverse cache\n        if ((_a = this._center) === null || _a === void 0 ? void 0 : _a.userData.inverseCacheProxy) {\n            this._center.userData.inverseCacheProxy.revert();\n            delete this._center.userData.inverseCacheProxy;\n        }\n        // change the center\n        this._center = center;\n        // install inverse cache\n        if (this._center) {\n            if (!this._center.userData.inverseCacheProxy) {\n                this._center.userData.inverseCacheProxy = new Matrix4InverseCache(this._center.matrixWorld);\n            }\n        }\n    }\n    get initialLocalChildPosition() {\n        return this._initialLocalChildPosition;\n    }\n    /**\n     * Returns the world matrix of its parent object.\n     * Note that it returns a reference to the matrix. Don't mutate this directly!\n     */\n    get _parentMatrixWorld() {\n        return this.bone.parent ? this.bone.parent.matrixWorld : IDENTITY_MATRIX4;\n    }\n    /**\n     * Create a new VRMSpringBone.\n     *\n     * @param bone An Object3D that will be attached to this bone\n     * @param child An Object3D that will be used as a tail of this spring bone. It can be null when the spring bone is imported from VRM 0.0\n     * @param settings Several parameters related to behavior of the spring bone\n     * @param colliderGroups Collider groups that will be collided with this spring bone\n     */\n    constructor(bone, child, settings = {}, colliderGroups = []) {\n        var _a, _b, _c, _d, _e, _f;\n        /**\n         * Current position of child tail, in center unit. Will be used for verlet integration.\n         */\n        this._currentTail = new THREE.Vector3();\n        /**\n         * Previous position of child tail, in center unit. Will be used for verlet integration.\n         */\n        this._prevTail = new THREE.Vector3();\n        /**\n         * Initial axis of the bone, in local unit.\n         */\n        this._boneAxis = new THREE.Vector3();\n        /**\n         * Length of the bone in world unit.\n         * Will be used for normalization in update loop, will be updated by {@link _calcWorldSpaceBoneLength}.\n         *\n         * It's same as local unit length unless there are scale transformations in the world space.\n         */\n        this._worldSpaceBoneLength = 0.0;\n        /**\n         * This springbone will be calculated based on the space relative from this object.\n         * If this is `null`, springbone will be calculated in world space.\n         */\n        this._center = null;\n        /**\n         * Initial state of the local matrix of the bone.\n         */\n        this._initialLocalMatrix = new THREE.Matrix4();\n        /**\n         * Initial state of the rotation of the bone.\n         */\n        this._initialLocalRotation = new THREE.Quaternion();\n        /**\n         * Initial state of the position of its child.\n         */\n        this._initialLocalChildPosition = new THREE.Vector3();\n        this.bone = bone; // uniVRMでの parent\n        this.bone.matrixAutoUpdate = false; // updateにより計算されるのでthree.js内での自動処理は不要\n        this.child = child;\n        this.settings = {\n            hitRadius: (_a = settings.hitRadius) !== null && _a !== void 0 ? _a : 0.0,\n            stiffness: (_b = settings.stiffness) !== null && _b !== void 0 ? _b : 1.0,\n            gravityPower: (_c = settings.gravityPower) !== null && _c !== void 0 ? _c : 0.0,\n            gravityDir: (_e = (_d = settings.gravityDir) === null || _d === void 0 ? void 0 : _d.clone()) !== null && _e !== void 0 ? _e : new THREE.Vector3(0.0, -1.0, 0.0),\n            dragForce: (_f = settings.dragForce) !== null && _f !== void 0 ? _f : 0.4,\n        };\n        this.colliderGroups = colliderGroups;\n    }\n    /**\n     * Set the initial state of this spring bone.\n     * You might want to call {@link VRMSpringBoneManager.setInitState} instead.\n     */\n    setInitState() {\n        // remember initial position of itself\n        this._initialLocalMatrix.copy(this.bone.matrix);\n        this._initialLocalRotation.copy(this.bone.quaternion);\n        // see initial position of its local child\n        if (this.child) {\n            this._initialLocalChildPosition.copy(this.child.position);\n        }\n        else {\n            // vrm0 requires a 7cm fixed bone length for the final node in a chain\n            // See: https://github.com/vrm-c/vrm-specification/tree/master/specification/VRMC_springBone-1.0#about-spring-configuration\n            this._initialLocalChildPosition.copy(this.bone.position).normalize().multiplyScalar(0.07);\n        }\n        // copy the child position to tails\n        const matrixWorldToCenter = this._getMatrixWorldToCenter(_matA);\n        this.bone.localToWorld(this._currentTail.copy(this._initialLocalChildPosition)).applyMatrix4(matrixWorldToCenter);\n        this._prevTail.copy(this._currentTail);\n        // set initial states that are related to local child position\n        this._boneAxis.copy(this._initialLocalChildPosition).normalize();\n    }\n    /**\n     * Reset the state of this bone.\n     * You might want to call [[VRMSpringBoneManager.reset]] instead.\n     */\n    reset() {\n        this.bone.quaternion.copy(this._initialLocalRotation);\n        // We need to update its matrixWorld manually, since we tweaked the bone by our hand\n        this.bone.updateMatrix();\n        this.bone.matrixWorld.multiplyMatrices(this._parentMatrixWorld, this.bone.matrix);\n        // Apply updated position to tail states\n        const matrixWorldToCenter = this._getMatrixWorldToCenter(_matA);\n        this.bone.localToWorld(this._currentTail.copy(this._initialLocalChildPosition)).applyMatrix4(matrixWorldToCenter);\n        this._prevTail.copy(this._currentTail);\n    }\n    /**\n     * Update the state of this bone.\n     * You might want to call [[VRMSpringBoneManager.update]] instead.\n     *\n     * @param delta deltaTime\n     */\n    update(delta) {\n        if (delta <= 0)\n            return;\n        // Update the _worldSpaceBoneLength\n        this._calcWorldSpaceBoneLength();\n        // Get bone position in center space\n        _worldSpacePosition.setFromMatrixPosition(this.bone.matrixWorld);\n        let matrixWorldToCenter = this._getMatrixWorldToCenter(_matA);\n        _centerSpacePosition.copy(_worldSpacePosition).applyMatrix4(matrixWorldToCenter);\n        const quatWorldToCenter = _quatA.setFromRotationMatrix(matrixWorldToCenter);\n        // Get parent matrix in center space\n        const centerSpaceParentMatrix = _matB.copy(matrixWorldToCenter).multiply(this._parentMatrixWorld);\n        // Get boneAxis in center space\n        const centerSpaceBoneAxis = _v3B\n            .copy(this._boneAxis)\n            .applyMatrix4(this._initialLocalMatrix)\n            .applyMatrix4(centerSpaceParentMatrix)\n            .sub(_centerSpacePosition)\n            .normalize();\n        // gravity in center space\n        const centerSpaceGravity = _v3C.copy(this.settings.gravityDir).applyQuaternion(quatWorldToCenter).normalize();\n        const matrixCenterToWorld = this._getMatrixCenterToWorld(_matA);\n        // verlet積分で次の位置を計算\n        _nextTail\n            .copy(this._currentTail)\n            .add(_v3A\n            .copy(this._currentTail)\n            .sub(this._prevTail)\n            .multiplyScalar(1 - this.settings.dragForce)) // 前フレームの移動を継続する(減衰もあるよ)\n            .add(_v3A.copy(centerSpaceBoneAxis).multiplyScalar(this.settings.stiffness * delta)) // 親の回転による子ボーンの移動目標\n            .add(_v3A.copy(centerSpaceGravity).multiplyScalar(this.settings.gravityPower * delta)) // 外力による移動量\n            .applyMatrix4(matrixCenterToWorld); // tailをworld spaceに戻す\n        // normalize bone length\n        _nextTail.sub(_worldSpacePosition).normalize().multiplyScalar(this._worldSpaceBoneLength).add(_worldSpacePosition);\n        // Collisionで移動\n        this._collision(_nextTail);\n        // update prevTail and currentTail\n        matrixWorldToCenter = this._getMatrixWorldToCenter(_matA);\n        this._prevTail.copy(this._currentTail);\n        this._currentTail.copy(_v3A.copy(_nextTail).applyMatrix4(matrixWorldToCenter));\n        // Apply rotation, convert vector3 thing into actual quaternion\n        // Original UniVRM is doing center unit calculus at here but we're gonna do this on local unit\n        const worldSpaceInitialMatrixInv = mat4InvertCompat(_matA.copy(this._parentMatrixWorld).multiply(this._initialLocalMatrix));\n        const applyRotation = _quatA.setFromUnitVectors(this._boneAxis, _v3A.copy(_nextTail).applyMatrix4(worldSpaceInitialMatrixInv).normalize());\n        this.bone.quaternion.copy(this._initialLocalRotation).multiply(applyRotation);\n        // We need to update its matrixWorld manually, since we tweaked the bone by our hand\n        this.bone.updateMatrix();\n        this.bone.matrixWorld.multiplyMatrices(this._parentMatrixWorld, this.bone.matrix);\n    }\n    /**\n     * Do collision math against every colliders attached to this bone.\n     *\n     * @param tail The tail you want to process\n     */\n    _collision(tail) {\n        this.colliderGroups.forEach((colliderGroup) => {\n            colliderGroup.colliders.forEach((collider) => {\n                const dist = collider.shape.calculateCollision(collider.matrixWorld, tail, this.settings.hitRadius, _v3A);\n                if (dist < 0.0) {\n                    // hit\n                    tail.add(_v3A.multiplyScalar(-dist));\n                    // normalize bone length\n                    tail.sub(_worldSpacePosition).normalize().multiplyScalar(this._worldSpaceBoneLength).add(_worldSpacePosition);\n                }\n            });\n        });\n    }\n    /**\n     * Calculate the {@link _worldSpaceBoneLength}.\n     * Intended to be used in {@link update}.\n     */\n    _calcWorldSpaceBoneLength() {\n        _v3A.setFromMatrixPosition(this.bone.matrixWorld); // get world position of this.bone\n        if (this.child) {\n            _v3B.setFromMatrixPosition(this.child.matrixWorld); // get world position of this.child\n        }\n        else {\n            _v3B.copy(this._initialLocalChildPosition);\n            _v3B.applyMatrix4(this.bone.matrixWorld);\n        }\n        this._worldSpaceBoneLength = _v3A.sub(_v3B).length();\n    }\n    /**\n     * Create a matrix that converts center space into world space.\n     * @param target Target matrix\n     */\n    _getMatrixCenterToWorld(target) {\n        if (this._center) {\n            target.copy(this._center.matrixWorld);\n        }\n        else {\n            target.identity();\n        }\n        return target;\n    }\n    /**\n     * Create a matrix that converts world space into center space.\n     * @param target Target matrix\n     */\n    _getMatrixWorldToCenter(target) {\n        if (this._center) {\n            target.copy(this._center.userData.inverseCacheProxy.inverse);\n        }\n        else {\n            target.identity();\n        }\n        return target;\n    }\n}\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nfunction traverseAncestorsFromRoot(object, callback) {\n    const ancestors = [];\n    let head = object;\n    while (head !== null) {\n        ancestors.unshift(head);\n        head = head.parent;\n    }\n    ancestors.forEach((ancestor) => {\n        callback(ancestor);\n    });\n}\n\n/**\n * Traverse children of given object and execute given callback.\n * The given object itself wont be given to the callback.\n * If the return value of the callback is `true`, it will halt the traversal of its children.\n * @param object A root object\n * @param callback A callback function called for each children\n */\nfunction traverseChildrenUntilConditionMet(object, callback) {\n    object.children.forEach((child) => {\n        const result = callback(child);\n        if (!result) {\n            traverseChildrenUntilConditionMet(child, callback);\n        }\n    });\n}\n\nclass VRMSpringBoneManager {\n    constructor() {\n        this._joints = new Set();\n        this._objectSpringBonesMap = new Map();\n    }\n    get joints() {\n        return this._joints;\n    }\n    /**\n     * @deprecated Use {@link joints} instead.\n     */\n    get springBones() {\n        console.warn('VRMSpringBoneManager: springBones is deprecated. use joints instead.');\n        return this._joints;\n    }\n    get colliderGroups() {\n        const set = new Set();\n        this._joints.forEach((springBone) => {\n            springBone.colliderGroups.forEach((colliderGroup) => {\n                set.add(colliderGroup);\n            });\n        });\n        return Array.from(set);\n    }\n    get colliders() {\n        const set = new Set();\n        this.colliderGroups.forEach((colliderGroup) => {\n            colliderGroup.colliders.forEach((collider) => {\n                set.add(collider);\n            });\n        });\n        return Array.from(set);\n    }\n    addJoint(joint) {\n        this._joints.add(joint);\n        let objectSet = this._objectSpringBonesMap.get(joint.bone);\n        if (objectSet == null) {\n            objectSet = new Set();\n            this._objectSpringBonesMap.set(joint.bone, objectSet);\n        }\n        objectSet.add(joint);\n    }\n    /**\n     * @deprecated Use {@link addJoint} instead.\n     */\n    addSpringBone(joint) {\n        console.warn('VRMSpringBoneManager: addSpringBone() is deprecated. use addJoint() instead.');\n        this.addJoint(joint);\n    }\n    deleteJoint(joint) {\n        this._joints.delete(joint);\n        const objectSet = this._objectSpringBonesMap.get(joint.bone);\n        objectSet.delete(joint);\n    }\n    /**\n     * @deprecated Use {@link deleteJoint} instead.\n     */\n    deleteSpringBone(joint) {\n        console.warn('VRMSpringBoneManager: deleteSpringBone() is deprecated. use deleteJoint() instead.');\n        this.deleteJoint(joint);\n    }\n    setInitState() {\n        const springBonesTried = new Set();\n        const springBonesDone = new Set();\n        const objectUpdated = new Set();\n        for (const springBone of this._joints) {\n            this._processSpringBone(springBone, springBonesTried, springBonesDone, objectUpdated, (springBone) => springBone.setInitState());\n        }\n    }\n    reset() {\n        const springBonesTried = new Set();\n        const springBonesDone = new Set();\n        const objectUpdated = new Set();\n        for (const springBone of this._joints) {\n            this._processSpringBone(springBone, springBonesTried, springBonesDone, objectUpdated, (springBone) => springBone.reset());\n        }\n    }\n    update(delta) {\n        const springBonesTried = new Set();\n        const springBonesDone = new Set();\n        const objectUpdated = new Set();\n        for (const springBone of this._joints) {\n            // update the springbone\n            this._processSpringBone(springBone, springBonesTried, springBonesDone, objectUpdated, (springBone) => springBone.update(delta));\n            // update children world matrices\n            // it is required when the spring bone chain is sparse\n            traverseChildrenUntilConditionMet(springBone.bone, (object) => {\n                var _a, _b;\n                // if the object has attached springbone, halt the traversal\n                if (((_b = (_a = this._objectSpringBonesMap.get(object)) === null || _a === void 0 ? void 0 : _a.size) !== null && _b !== void 0 ? _b : 0) > 0) {\n                    return true;\n                }\n                // otherwise update its world matrix\n                object.updateWorldMatrix(false, false);\n                return false;\n            });\n        }\n    }\n    /**\n     * Update a spring bone.\n     * If there are other spring bone that are dependant, it will try to update them recursively.\n     * It updates matrixWorld of all ancestors and myself.\n     * It might throw an error if there are circular dependencies.\n     *\n     * Intended to be used in {@link update} and {@link _processSpringBone} itself recursively.\n     *\n     * @param springBone A springBone you want to update\n     * @param springBonesTried Set of springBones that are already tried to be updated\n     * @param springBonesDone Set of springBones that are already up to date\n     * @param objectUpdated Set of object3D whose matrixWorld is updated\n     */\n    _processSpringBone(springBone, springBonesTried, springBonesDone, objectUpdated, callback) {\n        if (springBonesDone.has(springBone)) {\n            return;\n        }\n        if (springBonesTried.has(springBone)) {\n            throw new Error('VRMSpringBoneManager: Circular dependency detected while updating springbones');\n        }\n        springBonesTried.add(springBone);\n        const depObjects = this._getDependencies(springBone);\n        for (const depObject of depObjects) {\n            traverseAncestorsFromRoot(depObject, (depObjectAncestor) => {\n                const objectSet = this._objectSpringBonesMap.get(depObjectAncestor);\n                if (objectSet) {\n                    for (const depSpringBone of objectSet) {\n                        this._processSpringBone(depSpringBone, springBonesTried, springBonesDone, objectUpdated, callback);\n                    }\n                }\n                else if (!objectUpdated.has(depObjectAncestor)) {\n                    // update matrix of non-springbone\n                    depObjectAncestor.updateWorldMatrix(false, false);\n                    objectUpdated.add(depObjectAncestor);\n                }\n            });\n        }\n        // update my matrix\n        springBone.bone.updateMatrix();\n        springBone.bone.updateWorldMatrix(false, false);\n        callback(springBone);\n        objectUpdated.add(springBone.bone);\n        springBonesDone.add(springBone);\n    }\n    /**\n     * Return a set of objects that are dependant of given spring bone.\n     * @param springBone A spring bone\n     * @return A set of objects that are dependant of given spring bone\n     */\n    _getDependencies(springBone) {\n        const set = new Set();\n        const parent = springBone.bone.parent;\n        if (parent) {\n            set.add(parent);\n        }\n        springBone.colliderGroups.forEach((colliderGroup) => {\n            colliderGroup.colliders.forEach((collider) => {\n                set.add(collider);\n            });\n        });\n        return set;\n    }\n}\n\n/**\n * Possible spec versions it recognizes.\n */\nconst POSSIBLE_SPEC_VERSIONS = new Set(['1.0', '1.0-beta']);\nclass VRMSpringBoneLoaderPlugin {\n    get name() {\n        return VRMSpringBoneLoaderPlugin.EXTENSION_NAME;\n    }\n    constructor(parser, options) {\n        this.parser = parser;\n        this.jointHelperRoot = options === null || options === void 0 ? void 0 : options.jointHelperRoot;\n        this.colliderHelperRoot = options === null || options === void 0 ? void 0 : options.colliderHelperRoot;\n    }\n    afterRoot(gltf) {\n        return __awaiter(this, void 0, void 0, function* () {\n            gltf.userData.vrmSpringBoneManager = yield this._import(gltf);\n        });\n    }\n    /**\n     * Import spring bones from a GLTF and return a {@link VRMSpringBoneManager}.\n     * It might return `null` instead when it does not need to be created or something go wrong.\n     *\n     * @param gltf A parsed result of GLTF taken from GLTFLoader\n     */\n    _import(gltf) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const v1Result = yield this._v1Import(gltf);\n            if (v1Result != null) {\n                return v1Result;\n            }\n            const v0Result = yield this._v0Import(gltf);\n            if (v0Result != null) {\n                return v0Result;\n            }\n            return null;\n        });\n    }\n    _v1Import(gltf) {\n        var _a, _b, _c, _d, _e;\n        return __awaiter(this, void 0, void 0, function* () {\n            const json = gltf.parser.json;\n            // early abort if it doesn't use spring bones\n            const isSpringBoneUsed = ((_a = json.extensionsUsed) === null || _a === void 0 ? void 0 : _a.indexOf(VRMSpringBoneLoaderPlugin.EXTENSION_NAME)) !== -1;\n            if (!isSpringBoneUsed) {\n                return null;\n            }\n            const manager = new VRMSpringBoneManager();\n            const threeNodes = yield gltf.parser.getDependencies('node');\n            const extension = (_b = json.extensions) === null || _b === void 0 ? void 0 : _b[VRMSpringBoneLoaderPlugin.EXTENSION_NAME];\n            if (!extension) {\n                return null;\n            }\n            const specVersion = extension.specVersion;\n            if (!POSSIBLE_SPEC_VERSIONS.has(specVersion)) {\n                console.warn(`VRMSpringBoneLoaderPlugin: Unknown ${VRMSpringBoneLoaderPlugin.EXTENSION_NAME} specVersion \"${specVersion}\"`);\n                return null;\n            }\n            const colliders = (_c = extension.colliders) === null || _c === void 0 ? void 0 : _c.map((schemaCollider, iCollider) => {\n                var _a, _b, _c, _d, _e;\n                const node = threeNodes[schemaCollider.node];\n                const schemaShape = schemaCollider.shape;\n                if (schemaShape.sphere) {\n                    return this._importSphereCollider(node, {\n                        offset: new THREE.Vector3().fromArray((_a = schemaShape.sphere.offset) !== null && _a !== void 0 ? _a : [0.0, 0.0, 0.0]),\n                        radius: (_b = schemaShape.sphere.radius) !== null && _b !== void 0 ? _b : 0.0,\n                    });\n                }\n                else if (schemaShape.capsule) {\n                    return this._importCapsuleCollider(node, {\n                        offset: new THREE.Vector3().fromArray((_c = schemaShape.capsule.offset) !== null && _c !== void 0 ? _c : [0.0, 0.0, 0.0]),\n                        radius: (_d = schemaShape.capsule.radius) !== null && _d !== void 0 ? _d : 0.0,\n                        tail: new THREE.Vector3().fromArray((_e = schemaShape.capsule.tail) !== null && _e !== void 0 ? _e : [0.0, 0.0, 0.0]),\n                    });\n                }\n                throw new Error(`VRMSpringBoneLoaderPlugin: The collider #${iCollider} has no valid shape`);\n            });\n            const colliderGroups = (_d = extension.colliderGroups) === null || _d === void 0 ? void 0 : _d.map((schemaColliderGroup, iColliderGroup) => {\n                var _a;\n                const cols = ((_a = schemaColliderGroup.colliders) !== null && _a !== void 0 ? _a : []).map((iCollider) => {\n                    const col = colliders === null || colliders === void 0 ? void 0 : colliders[iCollider];\n                    if (col == null) {\n                        throw new Error(`VRMSpringBoneLoaderPlugin: The colliderGroup #${iColliderGroup} attempted to use a collider #${iCollider} but not found`);\n                    }\n                    return col;\n                });\n                return {\n                    colliders: cols,\n                    name: schemaColliderGroup.name,\n                };\n            });\n            (_e = extension.springs) === null || _e === void 0 ? void 0 : _e.forEach((schemaSpring, iSpring) => {\n                var _a;\n                const schemaJoints = schemaSpring.joints;\n                // prepare colliders\n                const colliderGroupsForSpring = (_a = schemaSpring.colliderGroups) === null || _a === void 0 ? void 0 : _a.map((iColliderGroup) => {\n                    const group = colliderGroups === null || colliderGroups === void 0 ? void 0 : colliderGroups[iColliderGroup];\n                    if (group == null) {\n                        throw new Error(`VRMSpringBoneLoaderPlugin: The spring #${iSpring} attempted to use a colliderGroup ${iColliderGroup} but not found`);\n                    }\n                    return group;\n                });\n                const center = schemaSpring.center != null ? threeNodes[schemaSpring.center] : undefined;\n                let prevSchemaJoint;\n                schemaJoints.forEach((schemaJoint) => {\n                    if (prevSchemaJoint) {\n                        // prepare node\n                        const nodeIndex = prevSchemaJoint.node;\n                        const node = threeNodes[nodeIndex];\n                        const childIndex = schemaJoint.node;\n                        const child = threeNodes[childIndex];\n                        // prepare setting\n                        const setting = {\n                            hitRadius: prevSchemaJoint.hitRadius,\n                            dragForce: prevSchemaJoint.dragForce,\n                            gravityPower: prevSchemaJoint.gravityPower,\n                            stiffness: prevSchemaJoint.stiffness,\n                            gravityDir: prevSchemaJoint.gravityDir != null\n                                ? new THREE.Vector3().fromArray(prevSchemaJoint.gravityDir)\n                                : undefined,\n                        };\n                        // create spring bones\n                        const joint = this._importJoint(node, child, setting, colliderGroupsForSpring);\n                        if (center) {\n                            joint.center = center;\n                        }\n                        manager.addJoint(joint);\n                    }\n                    prevSchemaJoint = schemaJoint;\n                });\n            });\n            // init spring bones\n            manager.setInitState();\n            return manager;\n        });\n    }\n    _v0Import(gltf) {\n        var _a, _b, _c;\n        return __awaiter(this, void 0, void 0, function* () {\n            const json = gltf.parser.json;\n            // early abort if it doesn't use vrm\n            const isVRMUsed = ((_a = json.extensionsUsed) === null || _a === void 0 ? void 0 : _a.indexOf('VRM')) !== -1;\n            if (!isVRMUsed) {\n                return null;\n            }\n            // early abort if it doesn't have bone groups\n            const extension = (_b = json.extensions) === null || _b === void 0 ? void 0 : _b['VRM'];\n            const schemaSecondaryAnimation = extension === null || extension === void 0 ? void 0 : extension.secondaryAnimation;\n            if (!schemaSecondaryAnimation) {\n                return null;\n            }\n            const schemaBoneGroups = schemaSecondaryAnimation === null || schemaSecondaryAnimation === void 0 ? void 0 : schemaSecondaryAnimation.boneGroups;\n            if (!schemaBoneGroups) {\n                return null;\n            }\n            const manager = new VRMSpringBoneManager();\n            const threeNodes = yield gltf.parser.getDependencies('node');\n            const colliderGroups = (_c = schemaSecondaryAnimation.colliderGroups) === null || _c === void 0 ? void 0 : _c.map((schemaColliderGroup) => {\n                var _a;\n                const node = threeNodes[schemaColliderGroup.node];\n                const colliders = ((_a = schemaColliderGroup.colliders) !== null && _a !== void 0 ? _a : []).map((schemaCollider, iCollider) => {\n                    var _a, _b, _c;\n                    const offset = new THREE.Vector3(0.0, 0.0, 0.0);\n                    if (schemaCollider.offset) {\n                        offset.set((_a = schemaCollider.offset.x) !== null && _a !== void 0 ? _a : 0.0, (_b = schemaCollider.offset.y) !== null && _b !== void 0 ? _b : 0.0, schemaCollider.offset.z ? -schemaCollider.offset.z : 0.0);\n                    }\n                    return this._importSphereCollider(node, {\n                        offset,\n                        radius: (_c = schemaCollider.radius) !== null && _c !== void 0 ? _c : 0.0,\n                    });\n                });\n                return { colliders };\n            });\n            // import spring bones for each spring bone groups\n            schemaBoneGroups === null || schemaBoneGroups === void 0 ? void 0 : schemaBoneGroups.forEach((schemaBoneGroup, iBoneGroup) => {\n                const rootIndices = schemaBoneGroup.bones;\n                if (!rootIndices) {\n                    return;\n                }\n                rootIndices.forEach((rootIndex) => {\n                    var _a, _b, _c, _d;\n                    const root = threeNodes[rootIndex];\n                    // prepare setting\n                    const gravityDir = new THREE.Vector3();\n                    if (schemaBoneGroup.gravityDir) {\n                        gravityDir.set((_a = schemaBoneGroup.gravityDir.x) !== null && _a !== void 0 ? _a : 0.0, (_b = schemaBoneGroup.gravityDir.y) !== null && _b !== void 0 ? _b : 0.0, (_c = schemaBoneGroup.gravityDir.z) !== null && _c !== void 0 ? _c : 0.0);\n                    }\n                    else {\n                        gravityDir.set(0.0, -1.0, 0.0);\n                    }\n                    const center = schemaBoneGroup.center != null ? threeNodes[schemaBoneGroup.center] : undefined;\n                    const setting = {\n                        hitRadius: schemaBoneGroup.hitRadius,\n                        dragForce: schemaBoneGroup.dragForce,\n                        gravityPower: schemaBoneGroup.gravityPower,\n                        stiffness: schemaBoneGroup.stiffiness,\n                        gravityDir,\n                    };\n                    // prepare colliders\n                    const colliderGroupsForSpring = (_d = schemaBoneGroup.colliderGroups) === null || _d === void 0 ? void 0 : _d.map((iColliderGroup) => {\n                        const group = colliderGroups === null || colliderGroups === void 0 ? void 0 : colliderGroups[iColliderGroup];\n                        if (group == null) {\n                            throw new Error(`VRMSpringBoneLoaderPlugin: The spring #${iBoneGroup} attempted to use a colliderGroup ${iColliderGroup} but not found`);\n                        }\n                        return group;\n                    });\n                    // create spring bones\n                    root.traverse((node) => {\n                        var _a;\n                        const child = (_a = node.children[0]) !== null && _a !== void 0 ? _a : null;\n                        const joint = this._importJoint(node, child, setting, colliderGroupsForSpring);\n                        if (center) {\n                            joint.center = center;\n                        }\n                        manager.addJoint(joint);\n                    });\n                });\n            });\n            // init spring bones\n            gltf.scene.updateMatrixWorld();\n            manager.setInitState();\n            return manager;\n        });\n    }\n    _importJoint(node, child, setting, colliderGroupsForSpring) {\n        const springBone = new VRMSpringBoneJoint(node, child, setting, colliderGroupsForSpring);\n        if (this.jointHelperRoot) {\n            const helper = new VRMSpringBoneJointHelper(springBone);\n            this.jointHelperRoot.add(helper);\n            helper.renderOrder = this.jointHelperRoot.renderOrder;\n        }\n        return springBone;\n    }\n    _importSphereCollider(destination, params) {\n        const { offset, radius } = params;\n        const shape = new VRMSpringBoneColliderShapeSphere({ offset, radius });\n        const collider = new VRMSpringBoneCollider(shape);\n        destination.add(collider);\n        if (this.colliderHelperRoot) {\n            const helper = new VRMSpringBoneColliderHelper(collider);\n            this.colliderHelperRoot.add(helper);\n            helper.renderOrder = this.colliderHelperRoot.renderOrder;\n        }\n        return collider;\n    }\n    _importCapsuleCollider(destination, params) {\n        const { offset, radius, tail } = params;\n        const shape = new VRMSpringBoneColliderShapeCapsule({ offset, radius, tail });\n        const collider = new VRMSpringBoneCollider(shape);\n        destination.add(collider);\n        if (this.colliderHelperRoot) {\n            const helper = new VRMSpringBoneColliderHelper(collider);\n            this.colliderHelperRoot.add(helper);\n            helper.renderOrder = this.colliderHelperRoot.renderOrder;\n        }\n        return collider;\n    }\n}\nVRMSpringBoneLoaderPlugin.EXTENSION_NAME = 'VRMC_springBone';\n\nexport { VRMSpringBoneCollider, VRMSpringBoneColliderHelper, VRMSpringBoneColliderShape, VRMSpringBoneColliderShapeCapsule, VRMSpringBoneColliderShapeSphere, VRMSpringBoneJoint, VRMSpringBoneJointHelper, VRMSpringBoneLoaderPlugin, VRMSpringBoneManager };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n", "import * as THREE from 'three';\nimport { GLTF, GLTFLoaderPlugin, GLTFParser } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport {\n  VRMExpressionLoaderPlugin,\n  VRMFirstPersonLoaderPlugin,\n  VRMHumanoid,\n  VRMHumanoidLoaderPlugin,\n  VRMLookAtLoaderPlugin,\n  VRMMeta,\n  VRMMetaLoaderPlugin,\n} from '@pixiv/three-vrm-core';\nimport { MToonMaterialLoaderPlugin } from '@pixiv/three-vrm-materials-mtoon';\nimport { VRMMaterialsHDREmissiveMultiplierLoaderPlugin } from '@pixiv/three-vrm-materials-hdr-emissive-multiplier';\nimport { VRMMaterialsV0CompatPlugin } from '@pixiv/three-vrm-materials-v0compat';\nimport { VRMNodeConstraintLoaderPlugin } from '@pixiv/three-vrm-node-constraint';\nimport { VRMSpringBoneLoaderPlugin } from '@pixiv/three-vrm-springbone';\nimport { VRMLoaderPluginOptions } from './VRMLoaderPluginOptions';\nimport { VRM } from './VRM';\n\nexport class VRMLoaderPlugin implements GLTFLoaderPlugin {\n  public readonly parser: GLTFParser;\n\n  public readonly expressionPlugin: VRMExpressionLoaderPlugin;\n  public readonly firstPersonPlugin: VRMFirstPersonLoaderPlugin;\n  public readonly humanoidPlugin: VRMHumanoidLoaderPlugin;\n  public readonly lookAtPlugin: VRMLookAtLoaderPlugin;\n  public readonly metaPlugin: VRMMetaLoaderPlugin;\n  public readonly mtoonMaterialPlugin: MToonMaterialLoaderPlugin;\n  public readonly materialsHDREmissiveMultiplierPlugin: VRMMaterialsHDREmissiveMultiplierLoaderPlugin;\n  public readonly materialsV0CompatPlugin: VRMMaterialsV0CompatPlugin;\n  public readonly springBonePlugin: VRMSpringBoneLoaderPlugin;\n  public readonly nodeConstraintPlugin: VRMNodeConstraintLoaderPlugin;\n\n  public get name(): string {\n    return 'VRMLoaderPlugin';\n  }\n\n  public constructor(parser: GLTFParser, options?: VRMLoaderPluginOptions) {\n    this.parser = parser;\n\n    const helperRoot = options?.helperRoot;\n    const autoUpdateHumanBones = options?.autoUpdateHumanBones;\n\n    this.expressionPlugin = options?.expressionPlugin ?? new VRMExpressionLoaderPlugin(parser);\n    this.firstPersonPlugin = options?.firstPersonPlugin ?? new VRMFirstPersonLoaderPlugin(parser);\n    this.humanoidPlugin =\n      options?.humanoidPlugin ??\n      new VRMHumanoidLoaderPlugin(parser, {\n        helperRoot,\n        autoUpdateHumanBones,\n      });\n    this.lookAtPlugin = options?.lookAtPlugin ?? new VRMLookAtLoaderPlugin(parser, { helperRoot });\n    this.metaPlugin = options?.metaPlugin ?? new VRMMetaLoaderPlugin(parser);\n    this.mtoonMaterialPlugin = options?.mtoonMaterialPlugin ?? new MToonMaterialLoaderPlugin(parser);\n    this.materialsHDREmissiveMultiplierPlugin =\n      options?.materialsHDREmissiveMultiplierPlugin ?? new VRMMaterialsHDREmissiveMultiplierLoaderPlugin(parser);\n    this.materialsV0CompatPlugin = options?.materialsV0CompatPlugin ?? new VRMMaterialsV0CompatPlugin(parser);\n\n    this.springBonePlugin =\n      options?.springBonePlugin ??\n      new VRMSpringBoneLoaderPlugin(parser, {\n        colliderHelperRoot: helperRoot,\n        jointHelperRoot: helperRoot,\n      });\n\n    this.nodeConstraintPlugin =\n      options?.nodeConstraintPlugin ?? new VRMNodeConstraintLoaderPlugin(parser, { helperRoot });\n  }\n\n  public async beforeRoot(): Promise<void> {\n    await this.materialsV0CompatPlugin.beforeRoot();\n    await this.mtoonMaterialPlugin.beforeRoot();\n  }\n\n  public async loadMesh(meshIndex: number): Promise<THREE.Group | THREE.Mesh | THREE.SkinnedMesh> {\n    return await this.mtoonMaterialPlugin.loadMesh(meshIndex);\n  }\n\n  public getMaterialType(materialIndex: number): typeof THREE.Material | null {\n    const mtoonType = this.mtoonMaterialPlugin.getMaterialType(materialIndex);\n    if (mtoonType != null) {\n      return mtoonType;\n    }\n\n    return null;\n  }\n\n  public async extendMaterialParams(materialIndex: number, materialParams: { [key: string]: any }): Promise<any> {\n    await this.materialsHDREmissiveMultiplierPlugin.extendMaterialParams(materialIndex, materialParams);\n    await this.mtoonMaterialPlugin.extendMaterialParams(materialIndex, materialParams);\n  }\n\n  public async afterRoot(gltf: GLTF): Promise<void> {\n    await this.metaPlugin.afterRoot(gltf);\n    await this.humanoidPlugin.afterRoot(gltf);\n    await this.expressionPlugin.afterRoot(gltf);\n    await this.lookAtPlugin.afterRoot(gltf);\n    await this.firstPersonPlugin.afterRoot(gltf);\n    await this.springBonePlugin.afterRoot(gltf);\n    await this.nodeConstraintPlugin.afterRoot(gltf);\n    await this.mtoonMaterialPlugin.afterRoot(gltf);\n\n    const meta = gltf.userData.vrmMeta as VRMMeta | null;\n    const humanoid = gltf.userData.vrmHumanoid as VRMHumanoid | null;\n\n    // meta and humanoid are required to be a VRM.\n    // Don't create VRM if they are null\n    if (meta && humanoid) {\n      const vrm = new VRM({\n        scene: gltf.scene,\n        expressionManager: gltf.userData.vrmExpressionManager,\n        firstPerson: gltf.userData.vrmFirstPerson,\n        humanoid,\n        lookAt: gltf.userData.vrmLookAt,\n        meta,\n        materials: gltf.userData.vrmMToonMaterials,\n        springBoneManager: gltf.userData.vrmSpringBoneManager,\n        nodeConstraintManager: gltf.userData.vrmNodeConstraintManager,\n      });\n\n      gltf.userData.vrm = vrm;\n    }\n  }\n}\n", "// See: https://threejs.org/docs/#manual/en/introduction/How-to-dispose-of-objects\n\nimport * as THREE from 'three';\n\nfunction disposeMaterial(material: THREE.Material): void {\n  Object.values(material).forEach((value) => {\n    if (value?.isTexture) {\n      const texture = value as THREE.Texture;\n      texture.dispose();\n    }\n  });\n\n  if ((material as any).isShaderMaterial) {\n    const uniforms: { [uniform: string]: THREE.IUniform<any> } = (material as any).uniforms;\n    if (uniforms) {\n      Object.values(uniforms).forEach((uniform) => {\n        const value = uniform.value;\n        if (value?.isTexture) {\n          const texture = value as THREE.Texture;\n          texture.dispose();\n        }\n      });\n    }\n  }\n\n  material.dispose();\n}\n\nfunction dispose(object3D: THREE.Object3D): void {\n  const geometry: THREE.BufferGeometry | undefined = (object3D as any).geometry;\n  if (geometry) {\n    geometry.dispose();\n  }\n\n  const skeleton: THREE.Skeleton | undefined = (object3D as any).skeleton;\n  if (skeleton) {\n    skeleton.dispose();\n  }\n\n  const material: THREE.Material | THREE.Material[] | undefined = (object3D as any).material;\n  if (material) {\n    if (Array.isArray(material)) {\n      material.forEach((material: THREE.Material) => disposeMaterial(material));\n    } else if (material) {\n      disposeMaterial(material);\n    }\n  }\n}\n\nexport function deepDispose(object3D: THREE.Object3D): void {\n  object3D.traverse(dispose);\n}\n", "import * as THREE from 'three';\n\n/**\n * Traverse given object and remove unnecessarily bound joints from every `THREE.SkinnedMesh`.\n * Some environments like mobile devices have a lower limit of bones and might be unable to perform mesh skinning, this function might resolve such an issue.\n * Also this function might greatly improve the performance of mesh skinning.\n *\n * @param root Root object that will be traversed\n */\nexport function removeUnnecessaryJoints(root: THREE.Object3D): void {\n  // some meshes might share a same skinIndex attribute and this map prevents to convert the attribute twice\n  const skeletonList: Map<THREE.BufferAttribute, THREE.Skeleton> = new Map();\n\n  // Traverse an entire tree\n  root.traverse((obj) => {\n    if (obj.type !== 'SkinnedMesh') {\n      return;\n    }\n\n    const mesh = obj as THREE.SkinnedMesh;\n    const geometry = mesh.geometry;\n    const attribute = geometry.getAttribute('skinIndex') as THREE.BufferAttribute;\n\n    // look for existing skeleton\n    let skeleton = skeletonList.get(attribute);\n\n    if (!skeleton) {\n      // generate reduced bone list\n      const bones: THREE.Bone[] = []; // new list of bone\n      const boneInverses: THREE.Matrix4[] = []; // new list of boneInverse\n      const boneIndexMap: { [index: number]: number } = {}; // map of old bone index vs. new bone index\n\n      // create a new bone map\n      const array = attribute.array;\n      for (let i = 0; i < array.length; i++) {\n        const index = array[i];\n\n        // new skinIndex buffer\n        if (boneIndexMap[index] === undefined) {\n          boneIndexMap[index] = bones.length;\n          bones.push(mesh.skeleton.bones[index]);\n          boneInverses.push(mesh.skeleton.boneInverses[index]);\n        }\n\n        array[i] = boneIndexMap[index];\n      }\n\n      // replace with new indices\n      attribute.copyArray(array);\n      attribute.needsUpdate = true;\n\n      // replace with new indices\n      skeleton = new THREE.Skeleton(bones, boneInverses);\n      skeletonList.set(attribute, skeleton);\n    }\n\n    mesh.bind(skeleton, new THREE.Matrix4());\n    //                  ^^^^^^^^^^^^^^^^^^^ transform of meshes should be ignored\n    // See: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins\n  });\n}\n", "import * as THREE from 'three';\nimport { BufferAttribute } from 'three';\n\n/**\n * Traverse given object and remove unnecessary vertices from every BufferGeometries.\n * This only processes buffer geometries with index buffer.\n *\n * Three.js creates morph textures for each geometries and it sometimes consumes unnecessary amount of VRAM for certain models.\n * This function will optimize geometries to reduce the size of morph texture.\n * See: https://github.com/mrdoob/three.js/issues/23095\n *\n * @param root Root object that will be traversed\n */\nexport function removeUnnecessaryVertices(root: THREE.Object3D): void {\n  const geometryMap = new Map<THREE.BufferGeometry, THREE.BufferGeometry>();\n\n  // Traverse an entire tree\n  root.traverse((obj) => {\n    if (!(obj as any).isMesh) {\n      return;\n    }\n\n    const mesh = obj as THREE.Mesh;\n    const geometry = mesh.geometry;\n\n    // if the geometry does not have an index buffer it does not need to process\n    const origianlIndex = geometry.index;\n    if (origianlIndex == null) {\n      return;\n    }\n\n    // skip already processed geometry\n    const newGeometryAlreadyExisted = geometryMap.get(geometry);\n    if (newGeometryAlreadyExisted != null) {\n      mesh.geometry = newGeometryAlreadyExisted;\n      return;\n    }\n\n    const newGeometry = new THREE.BufferGeometry();\n\n    // copy various properties\n    // Ref: https://github.com/mrdoob/three.js/blob/1a241ef10048770d56e06d6cd6a64c76cc720f95/src/core/BufferGeometry.js#L1011\n    newGeometry.name = geometry.name;\n\n    newGeometry.morphTargetsRelative = geometry.morphTargetsRelative;\n\n    geometry.groups.forEach((group) => {\n      newGeometry.addGroup(group.start, group.count, group.materialIndex);\n    });\n\n    newGeometry.boundingBox = geometry.boundingBox?.clone() ?? null;\n    newGeometry.boundingSphere = geometry.boundingSphere?.clone() ?? null;\n\n    newGeometry.setDrawRange(geometry.drawRange.start, geometry.drawRange.count);\n\n    newGeometry.userData = geometry.userData;\n\n    // set to geometryMap\n    geometryMap.set(geometry, newGeometry);\n\n    /** from original index to new index */\n    const originalIndexNewIndexMap: number[] = [];\n\n    /** from new index to original index */\n    const newIndexOriginalIndexMap: number[] = [];\n\n    // reorganize indices\n    {\n      const originalIndexArray = origianlIndex.array;\n      const newIndexArray = new (originalIndexArray.constructor as any)(originalIndexArray.length);\n\n      let indexHead = 0;\n\n      for (let i = 0; i < originalIndexArray.length; i++) {\n        const originalIndex = originalIndexArray[i];\n\n        let newIndex = originalIndexNewIndexMap[originalIndex];\n        if (newIndex == null) {\n          originalIndexNewIndexMap[originalIndex] = indexHead;\n          newIndexOriginalIndexMap[indexHead] = originalIndex;\n          newIndex = indexHead;\n          indexHead++;\n        }\n        newIndexArray[i] = newIndex;\n      }\n\n      newGeometry.setIndex(new BufferAttribute(newIndexArray, 1, false));\n    }\n\n    // reorganize attributes\n    Object.keys(geometry.attributes).forEach((attributeName) => {\n      const originalAttribute = geometry.attributes[attributeName] as THREE.BufferAttribute;\n\n      if ((originalAttribute as any).isInterleavedBufferAttribute) {\n        throw new Error('removeUnnecessaryVertices: InterleavedBufferAttribute is not supported');\n      }\n\n      const originalAttributeArray = originalAttribute.array;\n      const { itemSize, normalized } = originalAttribute;\n\n      const newAttributeArray = new (originalAttributeArray.constructor as any)(\n        newIndexOriginalIndexMap.length * itemSize,\n      );\n\n      newIndexOriginalIndexMap.forEach((originalIndex, i) => {\n        for (let j = 0; j < itemSize; j++) {\n          newAttributeArray[i * itemSize + j] = originalAttributeArray[originalIndex * itemSize + j];\n        }\n      });\n\n      newGeometry.setAttribute(attributeName, new BufferAttribute(newAttributeArray, itemSize, normalized));\n    });\n\n    // reorganize morph attributes\n    /** True if all morphs are zero. */\n    let isNullMorph = true;\n\n    Object.keys(geometry.morphAttributes).forEach((attributeName) => {\n      newGeometry.morphAttributes[attributeName] = [];\n\n      const morphs = geometry.morphAttributes[attributeName];\n      for (let iMorph = 0; iMorph < morphs.length; iMorph++) {\n        const originalAttribute = morphs[iMorph] as THREE.BufferAttribute;\n\n        if ((originalAttribute as any).isInterleavedBufferAttribute) {\n          throw new Error('removeUnnecessaryVertices: InterleavedBufferAttribute is not supported');\n        }\n\n        const originalAttributeArray = originalAttribute.array;\n        const { itemSize, normalized } = originalAttribute;\n\n        const newAttributeArray = new (originalAttributeArray.constructor as any)(\n          newIndexOriginalIndexMap.length * itemSize,\n        );\n\n        newIndexOriginalIndexMap.forEach((originalIndex, i) => {\n          for (let j = 0; j < itemSize; j++) {\n            newAttributeArray[i * itemSize + j] = originalAttributeArray[originalIndex * itemSize + j];\n          }\n        });\n\n        isNullMorph = isNullMorph && newAttributeArray.every((v: number) => v === 0);\n\n        newGeometry.morphAttributes[attributeName][iMorph] = new BufferAttribute(\n          newAttributeArray,\n          itemSize,\n          normalized,\n        );\n      }\n    });\n\n    // If all morphs are zero, just discard the morph attributes we've just made\n    if (isNullMorph) {\n      newGeometry.morphAttributes = {};\n    }\n\n    mesh.geometry = newGeometry;\n  });\n\n  Array.from(geometryMap.keys()).forEach((originalGeometry) => {\n    originalGeometry.dispose();\n  });\n}\n", "import { VRM } from '../VRM';\n\n/**\n * If the given VRM is VRM0.0, rotate the `vrm.scene` by 180 degrees around the Y axis.\n *\n * @param vrm The target VRM\n */\nexport function rotateVRM0(vrm: VRM): void {\n  if (vrm.meta?.metaVersion === '0') {\n    vrm.scene.rotation.y = Math.PI;\n  }\n}\n", "import { deepDispose } from './deepDispose';\nimport { removeUnnecessaryJoints } from './removeUnnecessaryJoints';\nimport { removeUnnecessaryVertices } from './removeUnnecessaryVertices';\nimport { rotateVRM0 } from './rotateVRM0';\n\nexport class VRMUtils {\n  private constructor() {\n    // this class is not meant to be instantiated\n  }\n\n  public static deepDispose = deepDispose;\n  public static removeUnnecessaryJoints = removeUnnecessaryJoints;\n  public static removeUnnecessaryVertices = removeUnnecessaryVertices;\n  public static rotateVRM0 = rotateVRM0;\n}\n"],
  "mappings": "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CA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACJ;AAQK,IAAC,mBAAmB;EACrB,MAAM;EACN,OAAO;EACP,OAAO;EACP,YAAY;EACZ,MAAM;EACN,MAAM;EACN,SAAS;EACT,UAAU;EACV,KAAK;EACL,cAAc;EACd,cAAc;EACd,UAAU;EACV,UAAU;EACV,eAAe;EACf,eAAe;EACf,WAAW;EACX,WAAW;EACX,cAAc;EACd,cAAc;EACd,cAAc;EACd,UAAU;EACV,eAAe;EACf,eAAe;EACf,eAAe;EACf,WAAW;EACX,qBAAqB;EACrB,mBAAmB;EACnB,iBAAiB;EACjB,mBAAmB;EACnB,uBAAuB;EACvB,iBAAiB;EACjB,oBAAoB;EACpB,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,sBAAsB;EACtB,gBAAgB;EAChB,oBAAoB;EACpB,wBAAwB;EACxB,kBAAkB;EAClB,sBAAsB;EACtB,oBAAoB;EACpB,kBAAkB;EAClB,oBAAoB;EACpB,wBAAwB;EACxB,kBAAkB;EAClB,qBAAqB;EACrB,yBAAyB;EACzB,mBAAmB;EACnB,mBAAmB;EACnB,uBAAuB;EACvB,iBAAiB;EACjB,qBAAqB;EACrB,yBAAyB;EACzB,mBAAmB;AACvB;AAQK,IAAC,wBAAwB;EAC1B,MAAM;EACN,OAAO;EACP,OAAO;EACP,YAAY;EACZ,MAAM;EACN,MAAM;EACN,SAAS;EACT,UAAU;EACV,KAAK;EACL,cAAc;EACd,cAAc;EACd,UAAU;EACV,UAAU;EACV,eAAe;EACf,eAAe;EACf,WAAW;EACX,WAAW;EACX,cAAc;EACd,cAAc;EACd,cAAc;EACd,UAAU;EACV,eAAe;EACf,eAAe;EACf,eAAe;EACf,WAAW;EACX,qBAAqB;EACrB,mBAAmB;EACnB,iBAAiB;EACjB,mBAAmB;EACnB,uBAAuB;EACvB,iBAAiB;EACjB,oBAAoB;EACpB,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,sBAAsB;EACt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",
  "names": ["__awaiter", "__awaiter", "_a", "_b", "_v3A$4", "_v3B$2", "quatInvertCompat", "_v3A$3", "_v3A$2", "_quatA$3", "POSSIBLE_SPEC_VERSIONS$2", "_quatA$2", "_quatB$2", "_v3A$1", "_v3B$1", "_v3A", "_v3B", "_v3C", "_quatA$1", "_quatB$1", "_quatC", "_quatA", "_quatB", "POSSIBLE_SPEC_VERSIONS$1", "POSSIBLE_SPEC_VERSIONS", "__awaiter", "__awaiter", "POSSIBLE_SPEC_VERSIONS", "__awaiter", "__awaiter", "_a", "_v3A$3", "_v3A$2", "_v3B$1", "_v3A$1", "_v3B", "_v3C", "traverseAncestorsFromRoot", "constraint", "_v3A", "_quatA", "POSSIBLE_SPEC_VERSIONS", "__awaiter", "_a", "springBone", "_a", "_b", "_c", "_d", "_e", "material"]
}
