/**
 * ÏóêÏÖã ÎØ∏Î¶¨ Î°úÎçî
 * JS/CSS Î≤àÎì§ ÌååÏùºÍ≥º Í∏∞ÌÉÄ Ï§ëÏöîÌïú ÏóêÏÖãÎì§ÏùÑ ÎØ∏Î¶¨ Î°úÎìúÌïòÏó¨ Ï∫êÏãú
 */

import fileCache from './fileCache';

class AssetPreloader {
  constructor() {
    this.preloadedAssets = new Set();
  }

  // ÌòÑÏû¨ ÌéòÏù¥ÏßÄÏùò JS/CSS ÏóêÏÖã ÏûêÎèô Í∞êÏßÄ Î∞è Ï∫êÏãú
  async preloadCurrentPageAssets() {
    const assets = [];
    
    // ÌòÑÏû¨ ÌéòÏù¥ÏßÄÏùò Î™®Îì† script ÌÉúÍ∑∏ ÌôïÏù∏
    const scripts = document.querySelectorAll('script[src]');
    scripts.forEach(script => {
      const src = script.getAttribute('src');
      if (src && (src.includes('/assets/') || src.startsWith('/'))) {
        assets.push(src);
      }
    });
    
    // ÌòÑÏû¨ ÌéòÏù¥ÏßÄÏùò Î™®Îì† link ÌÉúÍ∑∏ (CSS) ÌôïÏù∏
    const links = document.querySelectorAll('link[rel="stylesheet"][href]');
    links.forEach(link => {
      const href = link.getAttribute('href');
      if (href && (href.includes('/assets/') || href.startsWith('/'))) {
        assets.push(href);
      }
    });
    
    console.log(`üîÑ ÌéòÏù¥ÏßÄ ÏóêÏÖã ÎØ∏Î¶¨ Î°úÎìú ÏãúÏûë: ${assets.length}Í∞ú`);
    
    // Î≥ëÎ†¨Î°ú ÎØ∏Î¶¨ Î°úÎìú
    const results = await Promise.allSettled(
      assets.map(url => this.preloadAsset(url))
    );
    
    const successful = results.filter(r => r.status === 'fulfilled').length;
    console.log(`‚úÖ ÌéòÏù¥ÏßÄ ÏóêÏÖã ÎØ∏Î¶¨ Î°úÎìú ÏôÑÎ£å: ${successful}/${assets.length}Í∞ú ÏÑ±Í≥µ`);
    
    return { total: assets.length, successful };
  }

  // Í∞úÎ≥Ñ ÏóêÏÖã ÎØ∏Î¶¨ Î°úÎìú
  async preloadAsset(url) {
    if (this.preloadedAssets.has(url)) {
      return { url, status: 'already_cached' };
    }
    
    try {
      // Ïù¥ÎØ∏ Ï∫êÏãúÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏
      const isCached = await fileCache.hasFile(url);
      if (isCached) {
        this.preloadedAssets.add(url);
        return { url, status: 'already_cached' };
      }
      
      // ÌååÏùº Î°úÎìú Î∞è Ï∫êÏãú
      await fileCache.getFile(url);
      this.preloadedAssets.add(url);
      
      return { url, status: 'cached' };
    } catch (error) {
      console.warn(`‚ö†Ô∏è ÏóêÏÖã ÎØ∏Î¶¨ Î°úÎìú Ïã§Ìå®: ${url}`, error);
      return { url, status: 'failed', error };
    }
  }

  // Ï§ëÏöîÌïú ÏóêÏÖãÎì§ ÎØ∏Î¶¨ Î°úÎìú
  async preloadCriticalAssets() {
    const criticalAssets = [
      // VRM Î™®Îç∏Îì§
      '/vrm/AvatarSample_B.vrm',
      '/vrm/AvatarSample_D.vrm',
      
      // Í∏∞Î≥∏ Ïï†ÎãàÎ©îÏù¥ÏÖò
      '/animations/idle_loop.vrma',
      '/animations/greeting.vrma',
      
      // Ïù∏Í∏∞ Î∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄÎì§
      '/bg/bg-landscape1.jpg',
      '/bg/bg-room1.jpg',
      '/bg/bg-sunset1.jpg'
    ];
    
    console.log(`üîÑ Ï§ëÏöî ÏóêÏÖã ÎØ∏Î¶¨ Î°úÎìú ÏãúÏûë: ${criticalAssets.length}Í∞ú`);
    
    // Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú ÏàúÏ∞®Ï†ÅÏúºÎ°ú Î°úÎìú (ÎÑ§Ìä∏ÏõåÌÅ¨ Î∂ÄÌïò Î∞©ÏßÄ)
    let successful = 0;
    for (const url of criticalAssets) {
      try {
        await this.preloadAsset(url);
        successful++;
      } catch (error) {
        console.warn(`‚ö†Ô∏è Ï§ëÏöî ÏóêÏÖã Î°úÎìú Ïã§Ìå®: ${url}`, error);
      }
      
      // Í∞Å ÌååÏùº ÏÇ¨Ïù¥Ïóê ÏïΩÍ∞ÑÏùò ÏßÄÏó∞ (ÎÑ§Ìä∏ÏõåÌÅ¨ Î∂ÄÌïò Î∞©ÏßÄ)
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    console.log(`‚úÖ Ï§ëÏöî ÏóêÏÖã ÎØ∏Î¶¨ Î°úÎìú ÏôÑÎ£å: ${successful}/${criticalAssets.length}Í∞ú ÏÑ±Í≥µ`);
    return { total: criticalAssets.length, successful };
  }

  // Ïï± ÏãúÏûë Ïãú ÏûêÎèô ÎØ∏Î¶¨ Î°úÎìú
  async initializePreloading() {
    try {
      // 1. ÌòÑÏû¨ ÌéòÏù¥ÏßÄ ÏóêÏÖã Ï¶âÏãú Ï∫êÏãú
      await this.preloadCurrentPageAssets();
      
      // 2. Ï§ëÏöî ÏóêÏÖãÎì§ Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Î°úÎìú
      setTimeout(() => {
        this.preloadCriticalAssets().catch(error => {
          console.warn('Ï§ëÏöî ÏóêÏÖã ÎØ∏Î¶¨ Î°úÎìú Ïã§Ìå®:', error);
        });
      }, 2000); // 2Ï¥à ÌõÑ ÏãúÏûë
      
    } catch (error) {
      console.error('ÏóêÏÖã ÎØ∏Î¶¨ Î°úÎìú Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
    }
  }

  // Ï∫êÏãú ÏÉÅÌÉú ÌôïÏù∏
  async getCacheStatus() {
    const cacheInfo = await fileCache.getCacheSize();
    
    const assetFiles = cacheInfo.files.filter(f => f.url.includes('/assets/'));
    const vrmFiles = cacheInfo.files.filter(f => f.url.includes('.vrm'));
    const animationFiles = cacheInfo.files.filter(f => f.url.includes('.vrma'));
    const backgroundFiles = cacheInfo.files.filter(f => f.url.includes('/bg/'));
    
    return {
      total: cacheInfo.fileCount,
      totalSize: cacheInfo.formattedSize,
      assets: assetFiles.length,
      vrm: vrmFiles.length,
      animations: animationFiles.length,
      backgrounds: backgroundFiles.length,
      files: {
        assets: assetFiles,
        vrm: vrmFiles,
        animations: animationFiles,
        backgrounds: backgroundFiles
      }
    };
  }
}

// Ï†ÑÏó≠ Ïù∏Ïä§ÌÑ¥Ïä§
const assetPreloader = new AssetPreloader();

export default assetPreloader; 